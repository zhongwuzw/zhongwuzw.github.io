<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Flutter InheritedWidget实现原理]]></title>
      <url>https://zhongwuzw.github.io/2020/09/24/Flutter-InheritedWidget%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p>在Flutter开发中，对于一些简单的数据传递，我们可以使用Widget constructor直接传递进去，但是当某个后代Widget依赖上层的祖先Widget或者多个Widget同时依赖祖先Widget的情形时，直接传递的方式就会暴露出很多的问题：需要连续传递很难维护以及依赖的祖先Widget数据改变时，所有子Widget都需要rebuild。</p>
<p>Flutter提供了另外一个机制来解决这个问题，InheritedWidget，当InheritedWidget数据发生变化时，只通知依赖其数据变化的Widgets，接下来将按步骤分析实现细节。（ <a href="https://github.com/rrousselGit/provider?spm=ata.13261165.0.0.36547ede70zxv7" target="_blank" rel="external">Provider</a>也是基于InheritedWidget进行的封装）</p>
<p><img src="/images/flutter_inheritedWidget.png" alt=""></p>
<h2 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h2><hr>
<p>我们通过一个小demo来展示使用方法，假设数据Color需要被后代Widget访问，且当Color变化，后代Widget能监听到变化。步骤比较简单，先子类InheritedWidget，如下代码示例，FrogColor定义了一个名为of的静态方法，该方法由后代Widget进行调用，调用时将后代Widget的Element作为context传入。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FrogColor</span> <span class="keyword">extends</span> <span class="title">InheritedWidget</span> </span>&#123;</div><div class="line">  const <span class="type">FrogColor</span>(&#123;</div><div class="line">    <span class="type">Key</span> key,</div><div class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.color,</div><div class="line">    <span class="meta">@required</span> <span class="type">Widget</span> child,</div><div class="line">  &#125;) : assert(color != <span class="literal">null</span>),</div><div class="line">       assert(child != <span class="literal">null</span>),</div><div class="line">       <span class="keyword">super</span>(key: key, child: child);</div><div class="line"></div><div class="line">  <span class="keyword">final</span> <span class="type">Color</span> color;</div><div class="line"></div><div class="line">  static <span class="type">FrogColor</span> of(<span class="type">BuildContext</span> context) &#123;</div><div class="line">    <span class="keyword">return</span> context.dependOnInheritedWidgetOfExactType&lt;<span class="type">FrogColor</span>&gt;();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@override</span></div><div class="line">  bool updateShouldNotify(<span class="type">FrogColor</span> old) =&gt; color != old.color;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们看下of静态方法的实现，实际调用的是后代Widget对应Element的 dependOnInheritedWidgetOfExactType，该方法首先会去_inheritedWidgets里找是否有需要的InheritedWidget，如果找到，返回找到的InheritedWidget，并将自己作为依赖注册到InheritedWidget里，这样InheritedWidget就能知道哪些Widget依赖它，如果InheritedWidget发生了变化，会通知依赖方。_inheritedWidgets会在InheritedWidget mount的时候从父Element获取当前所有的InheritedWidgets，并且把自己也加到里边，也就是说，所有的Element都有一个Map来收集当前祖先所有的InheritedWidget。</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@override</span></div><div class="line">T dependOnInheritedWidgetOfExactType&lt;T <span class="keyword">extends</span> InheritedWidget&gt;(&#123;<span class="built_in">Object</span> aspect&#125;) &#123;</div><div class="line">  <span class="keyword">assert</span>(_debugCheckStateIsActiveForAncestorLookup());</div><div class="line">  <span class="keyword">final</span> InheritedElement ancestor = _inheritedWidgets == <span class="keyword">null</span> ? <span class="keyword">null</span> : _inheritedWidgets[T];</div><div class="line">  <span class="keyword">if</span> (ancestor != <span class="keyword">null</span>) &#123;</div><div class="line">    <span class="keyword">assert</span>(ancestor <span class="keyword">is</span> InheritedElement);</div><div class="line">    <span class="keyword">return</span> dependOnInheritedElement(ancestor, aspect: aspect) <span class="keyword">as</span> T;</div><div class="line">  &#125;</div><div class="line">  _hadUnsatisfiedDependencies = <span class="keyword">true</span>;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>重新回到FrogColor类，另一个方法updateShouldNotify，当FrogColor widget rebuild时，FrogColor的Element会通过updated方法来判断是否需要通知所有依赖它的后代Widgets，super.updated(oldWidget)用来通知所有的dependencies 依赖方。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@override</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">updated</span><span class="params">(InheritedWidget oldWidget)</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (widget.updateShouldNotify(oldWidget))</div><div class="line">    <span class="keyword">super</span>.updated(oldWidget);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当需要通知依赖方的时候，调用依赖Widget对应Element的didChangeDependencies方法，Element将自己标记为dirty，并加到BuildOwner的dirty列表中，当下一帧绘制时，会重新build Widget。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@mustCallSuper</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">didChangeDependencies</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">assert</span>(_active); <span class="comment">// otherwise markNeedsBuild is a no-op</span></div><div class="line">  <span class="keyword">assert</span>(_debugCheckOwnerBuildTargetExists(<span class="string">'didChangeDependencies'</span>));</div><div class="line">  markNeedsBuild();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><hr>
<p>综上，我们可以看到，InheritedWidget不仅能解决多层传递带来的业务复杂度，也能非常高效的进行rebuild操作。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Flutter Dart垃圾回收]]></title>
      <url>https://zhongwuzw.github.io/2020/09/24/Flutter-Dart%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</url>
      <content type="html"><![CDATA[<hr>
<p>Flutter使用Dart作为开发语言以及运行时，Dart 运行时存在于Debug和Release模式，不过两个模式中的运行时有很大的区别。</p>
<p>Debug模式下，Dart运行时，JIT编译器/解释器（Android是JIT，iOS是解释器），Debug和Profile工具都会加载到设备上。而Release模式下，JIT编译器/解释器和Debug服务被移除，只包括运行时。</p>
<p><img src="/images/flutter_debug_release.png" alt=""></p>
<p> Dart运行时包含垃圾回收器，在对象创建和销毁时分配和释放内存。Flutter在运行中，会创建大量的对象，比如，伴随着在界面展示，不可见，app 状态变化等，会创建很多Staleless Widgets，其中很多生命周期都很短。一个比较复杂的UI界面，widgets数量能上千。</p>
<p> 那么Flutter 开发者是否需要关心垃圾回收？Flutter在高频次创建和销毁对象的情况下，开发者是否需要采取措施来限制这种行为？很多人会对不会变的widgets创建引用，保存在state中，来避免重建和销毁。其实这些是没有必要的，因为Dart垃圾回收器基于分代架构，且针对对象的快速创建和销毁做了优化，大多数情况下，让引擎自己管理所有widgets创建和销毁即可。</p>
<h2 id="Dart垃圾回收器"><a href="#Dart垃圾回收器" class="headerlink" title="Dart垃圾回收器"></a>Dart垃圾回收器</h2><hr>
<p>Dart的垃圾回收器由两部分组成：新生代scavenger和并发标记清除回收器。</p>
<h3 id="调度"><a href="#调度" class="headerlink" title="调度"></a>调度</h3><p>为了降低垃圾回收对UI性能的影响，垃圾回收器提供了hooks给flutter engine，当没有用户交互或app处于闲时状态时，flutter engine会通知垃圾回收器来进行收集，而不会影响想能。</p>
<p>当处于闲时状态时，垃圾回收器也能进行内存碎片整理，减少内存碎片。</p>
<h3 id="年轻代Scavenger"><a href="#年轻代Scavenger" class="headerlink" title="年轻代Scavenger"></a>年轻代Scavenger</h3><p>该阶段主要用来清理生命周期短的临时对象，如stateless widgets，会比次代标记/清除阶段更快，极大减小app运行过程中可能带来的卡顿。</p>
<p>对象创建时会在一片连续的内存空间进行分配，每次创建对象，都会再这片空间区域查找是否有可用的空间，当可用空间被占满，Dart会使用bump pointer（指针碰撞）的方式来快速分配新的空间。</p>
<p>新的空间分为两部分，称为半空间，任何时候，只有一半是处于激活的，另一半则处于非激活状态。新创建的对象会在激活的那部分空间进行分配，当激活部分被占满，引用不可释放的对象会从激活空间移到非激活空间，非激活空间将变为激活空间，以此反复。</p>
<p>为了确定当前的对象是否可释放，收集器会从根对象，如栈变量，来检测是否是否还有引用，引用的对象会被移动到非激活空间，最后，剩下的对象就是可释放对象，在后续的垃圾回收时，引用对象会直接覆盖之前的可释放对象占用的空间。更多细节，参看<a href="https://en.wikipedia.org/wiki/Cheney%27s_algorithm?spm=ata.13261165.0.0.1f0058e56w9Oaq" target="_blank" rel="external">Cheney’s 算法</a>。</p>
<p><img src="/images/flutter_scavenger.png" alt=""></p>
<h3 id="并行标记和并发清除"><a href="#并行标记和并发清除" class="headerlink" title="并行标记和并发清除"></a>并行标记和并发清除</h3><p>当对象到达一定的生命周期，他们会被移入新的内存空间（老年代），由次代收集器（标记/清除）进行内存管理，收集器同样分两部分：首先会遍历对象图，标记还在使用的对象。遍历完成后，未被标记的对象会被回收。</p>
<p>注意，这种形式的垃圾回收会在标记阶段阻塞UI线程，且不能进行内存修改操作。不过，这个阶段发生的频率很低，因为生命周期短的对象都被年轻代scavenger处理了。</p>
<p>当然，如果开发的app不满足弱分代假说（即大多数对象会在年轻时死亡，生命周期短）的情况，那么该形式的垃圾回收会更容易发生。</p>
<h3 id="Heap-Map"><a href="#Heap-Map" class="headerlink" title="Heap Map"></a>Heap Map</h3><p>Observatory下可以通过heap map来观察某一时刻特定Isolate老年代的内存分配，如下图，不同的颜色代表不同的内存块，白色代表空闲空间，如果我们看到很多小的白色块，说明产生了内存碎片，可能考虑有内存泄漏了。</p>
<p><img src="/images/flutter_heap_map.png" alt=""></p>
<h2 id="Isolates"><a href="#Isolates" class="headerlink" title="Isolates"></a>Isolates</h2><hr>
<p>Dart的每个Isolate有自己的堆空间，每个Isolate也都运行在单独的线程中，垃圾回收时，互不影响性能，所以Isolate可以避免阻塞UI，进行CPU密集型、IO、网络等操作。</p>
<p><img src="/images/fkutter_isolates.png" alt=""></p>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><hr>
<ol>
<li><a href="https://mrale.ph/dartvm/" target="_blank" rel="external">https://mrale.ph/dartvm/</a></li>
<li><a href="https://medium.com/flutter/flutter-dont-fear-the-garbage-collector-d69b3ff1ca30" target="_blank" rel="external">https://medium.com/flutter/flutter-dont-fear-the-garbage-collector-d69b3ff1ca30</a></li>
<li><a href="https://dart-lang.github.io/observatory/heap-map.html" target="_blank" rel="external">https://dart-lang.github.io/observatory/heap-map.html</a></li>
<li><a href="https://dart-lang.github.io/observatory/glossary.html?spm=ata.13261165.0.0.1f0058e56w9Oaq#memory-leak" target="_blank" rel="external">https://dart-lang.github.io/observatory/glossary.html?spm=ata.13261165.0.0.1f0058e56w9Oaq#memory-leak</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS之获取Block retain的objects]]></title>
      <url>https://zhongwuzw.github.io/2018/09/11/iOS%E4%B9%8B%E8%8E%B7%E5%8F%96Block-retain%E7%9A%84objects/</url>
      <content type="html"><![CDATA[<h2 id="Block管理Objective-C对象实例的原理"><a href="#Block管理Objective-C对象实例的原理" class="headerlink" title="Block管理Objective-C对象实例的原理"></a>Block管理<code>Objective-C</code>对象实例的原理</h2><hr>
<p><code>Block</code>的实现结构体见如下图所示，<code>Block</code>对于捕获的<code>Objective-C</code>对象实例，会在<code>Block</code>实现的结构体中创建一个变量指向<code>Objective-C</code>对象实例，当<code>Block</code>将要释放时，会调用<code>dispose_helper</code>函数，该函数会调用所有需要进行内存管理的所捕获的对象，如<code>Block</code>、<code>__block</code>变量、<code>__attribute__((NSObject))</code>变量或有<code>constructor/destructor</code>的<code>C++</code> <code>const</code>对象。</p>
<p><img src="https://raw.githubusercontent.com/zhongwuzw/zhongwuzw.github.io.resource/master/images/blog/Block.png" alt=""></p>
<h2 id="获取Block-retain的Objective-C对象实例"><a href="#获取Block-retain的Objective-C对象实例" class="headerlink" title="获取Block retain的Objective-C对象实例"></a>获取Block retain的Objective-C对象实例</h2><hr>
<p>所以，怎么能够拿到<code>retain</code>的<code>Objective-C</code>对象实例呢，方法为创建<code>fake</code>对象，来模拟捕获的<code>Objective-C</code>对象实例，然后我们程序来调用<code>Block</code>的<code>dispose_helper</code>方法（<code>dispose_helper</code>方法接收一个参数，值为<code>Block</code>的指针），该方法会调用对象实例的<code>release</code>方法，我们只需要在<code>fake</code>对象中实现<code>release</code>方法，如果<code>release</code>方法被调用，所以该<code>fake</code>对象对应的真实变量为<code>Objective-C</code>对象实例。</p>
<p>那么需要创建多少个<code>fake</code>对象呢，首先，<code>Objective-C</code>对象实例在<code>Block</code>的<code>struct</code>中的位置是指针对齐的，所以我们可以获取<code>Block</code>结构体的大小，除以指针的大小取上即为需要创建的<code>fake</code>对象的数量,<code>Block</code>结构体的<code>size</code>可以通过<code>block-&gt;descriptor-&gt;size</code>来获取。</p>
<p>得到需要创建<code>fake</code>对象的数量<code>count</code>后，创建一个数组，再创建<code>count</code>个<code>fake</code>对象，将数组指针传入<code>dispose_helper</code>即可。对于调用了<code>release</code>方法的对象，记录其索引值，通过访问<code>block[index]</code>即可拿到真正的<code>Objective-C</code>对象实例。</p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><hr>
<p>如上所说的捕获的<code>Objective-C</code>对象实例，不包括使用<code>__block</code>创建的实例，因为使用<code>__block</code>创建的变量，会加一层间接层，并不会在<code>Block</code>结构体中创建指向实例对象的变量，而是指向另一个间接层结构体。</p>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><hr>
<ol>
<li><a href="https://clang.llvm.org/docs/Block-ABI-Apple.html" target="_blank" rel="external">https://clang.llvm.org/docs/Block-ABI-Apple.html</a></li>
<li><a href="https://github.com/mikeash/Circle/blob/master/Circle/CircleIVarLayout.m" target="_blank" rel="external">https://github.com/mikeash/Circle/blob/master/Circle/CircleIVarLayout.m</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS内存管理之Swapped Memory]]></title>
      <url>https://zhongwuzw.github.io/2018/06/13/iOS%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E4%B9%8BSwapped-Memory/</url>
      <content type="html"><![CDATA[<h2 id="Swap-Space"><a href="#Swap-Space" class="headerlink" title="Swap Space"></a>Swap Space</h2><hr>
<p><code>Linux</code>、<code>Macos</code>等系统有一个<code>Swap space</code>的概念，当物理内存紧张时，系统会将<code>inactive</code>的<code>pages</code>放到<code>Swap Space</code>，<code>Swap Space</code>为磁盘上的某个区域，一般是文件形式，这样能节省出来一部分的物理内存，不过，当我们需要访问已经放到磁盘中的内存时，由于已经不在物理内存中，会引发缺页中断，需要再次从磁盘中重新读取，所以会比直接从内存获取要慢。</p>
<p>不过<code>iOS</code>系统并没有<code>Swap Space</code>，原因可能有二，其一是<code>iPhone</code>的<code>Flash</code>闪存空间受限；其二是<code>CPU</code>受限，因为手机的<code>CPU</code>相比电脑还是有一定差距。</p>
<h2 id="Swapped-Size"><a href="#Swapped-Size" class="headerlink" title="Swapped Size"></a>Swapped Size</h2><hr>
<p><code>iOS</code>中，内存分为两种，一种为<code>Clean memory</code>，另一种为<code>Dirty memory</code>；<br><code>Clean memory</code>的<code>page</code>可以换出，既磁盘中有其对应内容，系统可以在内存紧张时将<code>Clean memory</code>的<code>page</code>换出，当再次访问时，可以重新从磁盘中读取，我们使用的图片、<code>mapped files</code>、<code>Framework</code>的数据段常量以及代码段等，这些都是<code>Clean memory</code>。<br><code>Dirty memory</code>是无法换出的，我们所有的堆上的分配等都是属于<code>Dirty memory</code>,所以我们一定要尽可能的减少<code>Dirty memory</code>的使用。</p>
<p>从<code>iOS7</code>开始，<code>iOS</code>引入了<code>Compression</code>的概念，如下图为<code>Instruments</code>的<code>Allocations template</code>，我们可以从标红的地方看到，有一个<code>Swapped Size</code>的指标，从<a href="https://devstreaming-cdn.apple.com/videos/wwdc/2018/416n2fmzz0fz88f/416/416_ios_memory_deep_dive.pdf" target="_blank" rel="external">WWDC 2018 416</a>得知，该指标的含义为<code>compression size</code>，即系统可以把最近最少使用的<code>Dirty memory</code>进行压缩，这样可以腾出一些<code>pages</code>供使用，当再次需要访问内容时，系统将其解压，这时，原来内容占多少<code>pages</code>，解压后同样会是相同数量的<code>pages</code>。</p>
<p><img src="https://raw.githubusercontent.com/zhongwuzw/zhongwuzw.github.io.resource/b14b5edf5c614b290b9ad0d5cdcbb81c1a6583d7/images/blog/ios-swapped-size.png" alt=""></p>
<p><img src="https://raw.githubusercontent.com/zhongwuzw/zhongwuzw.github.io.resource/b14b5edf5c614b290b9ad0d5cdcbb81c1a6583d7/images/blog/ios-memory-compression.png" alt=""></p>
<p>上图为<code>JetsamEvent</code>的log，展示了<code>compression size</code>等指标，<code>jetsam_thread</code>线程运行在阻塞的循环中，当唤起时，根据内存列表来<code>kill</code>掉处于<code>top</code>的进程，当内存足够时，再次进入休眠。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><hr>
<ol>
<li><a href="https://devstreaming-cdn.apple.com/videos/wwdc/2018/416n2fmzz0fz88f/416/416_ios_memory_deep_dive.pdf" target="_blank" rel="external">https://devstreaming-cdn.apple.com/videos/wwdc/2018/416n2fmzz0fz88f/416/416_ios_memory_deep_dive.pdf</a></li>
<li><a href="http://newosxbook.com/articles/MemoryPressure.html" target="_blank" rel="external">http://newosxbook.com/articles/MemoryPressure.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS知识小集之main-queue!=main-thread]]></title>
      <url>https://zhongwuzw.github.io/2018/05/22/iOS%E7%9F%A5%E8%AF%86%E5%B0%8F%E9%9B%86%E4%B9%8Bmain-queue-main-thread/</url>
      <content type="html"><![CDATA[<h2 id="GCD-main-queue和main-thread的关系"><a href="#GCD-main-queue和main-thread的关系" class="headerlink" title="GCD main queue和main thread的关系"></a>GCD <code>main queue</code>和<code>main thread</code>的关系</h2><hr>
<p><code>dispatch_get_main_queue()</code>返回<code>main queue</code>，该队列会被绑定到<code>main thread</code>，所以我们如果我们将<code>block</code>提交到<code>main queue</code>，那么该<code>block</code>将会在主线程中执行。</p>
<h2 id="dispatch-sync-queue-block-向-main-queue提交block"><a href="#dispatch-sync-queue-block-向-main-queue提交block" class="headerlink" title="dispatch_sync(queue, block)向 main queue提交block"></a><code>dispatch_sync(queue, block)</code>向 <code>main queue</code>提交<code>block</code></h2><hr>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// Current thread is main thread</span></div><div class="line"><span class="selector-tag">dispatch_sync</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, <span class="number">0</span>), ^&#123;</div><div class="line">        NSLog(@"Is main thread? %d", <span class="selector-attr">[NSThread isMainThread]</span>);</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line"><span class="comment">/// output:</span></div><div class="line"><span class="comment">/// "Is main thread? 1"</span></div></pre></td></tr></table></figure>
<p>大家有没有注意到，<code>Log</code>输出表明执行<code>Block</code>时的线程为主线程，根据我们以往的经验，<code>dispatch_get_global_queue</code>获取到的队列，队列中的<code>Block</code>应该是在<code>Secondly thread</code>中执行，为什么这里会是在主线程中呢。</p>
<p>答案就是在<code>dispatch_sync</code>语句，<code>libdispatch</code>在<a href="https://github.com/apple/swift-corelibs-libdispatch/commit/e64e4b962e1f356d7561e7a6103b424f335d85f6" target="_blank" rel="external">commit</a>中进行了优化，只要目标<code>queue</code>不是<code>main queue</code>，那么提交的<code>Block</code>就会直接在原线程中执行，这就能解释为什么上面的<code>demo</code>程序中输出的<code>Log</code>显示是主线程。</p>
<p>那么，这种会不会有潜在的问题呢？</p>
<h2 id="isMainThread带来的潜在问题"><a href="#isMainThread带来的潜在问题" class="headerlink" title="isMainThread带来的潜在问题"></a><code>isMainThread</code>带来的潜在问题</h2><hr>
<p>首先，我们看一个<a href="http://www.openradar.me/24025596" target="_blank" rel="external">Radar</a>，大概意思是，即使<code>MapKit</code>框架的<code>addOverlay</code>方法在主线程执行，但是由于其不是在<code>main queue</code>中执行的，会导致<code>Crash</code>，这是因为<code>MapKit</code>内部在<code>main queue</code>中使用<code>dispatch_queue_set_specific</code>设置了数据，当你在其它队列中执行时，会由于没有该数据从而导致<code>Crash</code>。</p>
<h2 id="避免使用isMainThread"><a href="#避免使用isMainThread" class="headerlink" title="避免使用isMainThread"></a>避免使用<code>isMainThread</code></h2><hr>
<p>所以，我们需要避免使用<code>isMainThread</code>，而是判断是不是<code>main queue</code>，我们可以使用两种方法来判断：</p>
<ol>
<li>使用<code>dispatch_queue_set_specific</code>在<code>main queue</code>上设置<code>flag</code>，然后做判断，有该<code>flag</code>即为<code>main queue</code>.</li>
<li>判断<code>dispatch_queue_get_label(DISPATCH_CURRENT_QUEUE_LABEL) == dispatch_queue_get_label(dispatch_get_main_queue())</code>，<code>main queue</code>设置了<code>label</code>，可以通过其来判断。</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><hr>
<ol>
<li><code>main queue</code>中的<code>Block</code>一定在主线程中执行。</li>
<li>主线程可以对应多个<code>queue</code>，既可以有任意的队列，其<code>Block</code>可以在主线程中执行。</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><hr>
<ol>
<li><a href="https://github.com/ReactiveCocoa/ReactiveCocoa/issues/2635#issuecomment-170215083" target="_blank" rel="external">https://github.com/ReactiveCocoa/ReactiveCocoa/issues/2635#issuecomment-170215083</a></li>
<li><a href="http://www.openradar.me/24025596" target="_blank" rel="external">http://www.openradar.me/24025596</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS知识小集之Swift闭包作为Objective-C方法参数]]></title>
      <url>https://zhongwuzw.github.io/2018/05/05/iOS%E7%9F%A5%E8%AF%86%E5%B0%8F%E9%9B%86%E4%B9%8BSwift%E9%97%AD%E5%8C%85%E4%BD%9C%E4%B8%BAObjective-C%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0/</url>
      <content type="html"><![CDATA[<h2 id="Swift闭包作为Objective-C方法参数"><a href="#Swift闭包作为Objective-C方法参数" class="headerlink" title="Swift闭包作为Objective-C方法参数"></a>Swift闭包作为Objective-C方法参数</h2><hr>
<p>在<code>Swift</code>开发时，有时我们需要调用带有<code>Block</code>参数的<code>Objective-C</code>方法，比如，我们通过<code>perform(_:with:afterDelay:inModes:)</code>来在特定的<code>Runloop</code>模式下运行某<code>selector</code>，如下所示，<code>doAnimation</code>方法接收一个<code>Optional</code>的<code>Block</code>，注意，该方法标注了<code>@objc</code>，所以是<code>Objective-C</code>方法，<code>animationBlock</code>参数为<code>Objective-C</code>的<code>Block</code>，那么我们怎么将<code>Swift</code>的<code>Closure</code>转化为<code>Block</code>呢，方法就是使用<code>@convention(block)</code>来声明兼容<code>Objective-C</code> <code>Block</code>的<code>Closure</code>，如下<code>[1]</code>所示：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocationMessageCell</span>: <span class="title">UICollectionViewCell</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">callSEL</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> block: <span class="meta">@convention</span>(block) (<span class="type">UIImageView</span>) -&gt; <span class="type">Void</span> = &#123; <span class="number">_</span> <span class="keyword">in</span>    <span class="comment">// [1]</span></div><div class="line">        ....</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">self</span>.perform(#selector(<span class="type">LocationMessageCell</span>.doAnimation(with:)), with: block, afterDelay: <span class="number">0</span>, inModes: [.defaultRunLoopMode])</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@objc</span> <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">doAnimation</span><span class="params">(with animationBlock: <span class="params">(<span class="params">(UIImageView)</span></span></span></span> -&gt; <span class="type">Void</span>)!) &#123;</div><div class="line">        ....</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>除了显式的用<code>@convention(block)</code>来声明，我们也可以直接使用闭包，如：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">UIView</span><span class="selector-class">.animate</span>(<span class="attribute">withDuration</span>: <span class="number">0.1</span>, <span class="attribute">animations</span>: &#123;</div><div class="line">    ...                </div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>注意，之所以我没有在之前的例子进行修改，是因为<code>func perform(_ aSelector: Selector, with anArgument: Any?, afterDelay delay: TimeInterval, inModes modes: [RunLoopMode])</code>的<code>anArgument</code>参数类型为<code>Any?</code>，编译器没有进行自动转换，这种情况只能显式的声明<code>@convention(block)</code>。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><hr>
<ol>
<li><a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithObjective-CAPIs.html" target="_blank" rel="external">https://developer.apple.com/library/content/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithObjective-CAPIs.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS知识小集之为什么objc_msgSend()是用汇编实现的]]></title>
      <url>https://zhongwuzw.github.io/2018/04/21/iOS%E7%9F%A5%E8%AF%86%E5%B0%8F%E9%9B%86%E4%B9%8B%E4%B8%BA%E4%BB%80%E4%B9%88objc-msgSend-%E6%98%AF%E7%94%A8%E6%B1%87%E7%BC%96%E5%AE%9E%E7%8E%B0%E7%9A%84/</url>
      <content type="html"><![CDATA[<h2 id="消息发送"><a href="#消息发送" class="headerlink" title="消息发送"></a>消息发送</h2><hr>
<p>在使用<code>Objective-C</code>调用方法时，我们将其称之为消息发送，这与我们用的<code>C</code>、<code>C++</code>等调用函数的说法不一样，原因就是<code>Objective-C</code>调用方法时，并不是简单的会在编译时得到函数指针，调用时直接使用该函数指针调用就行（<code>C++</code>有虚函数，包含一个<code>v-table</code>，可以实现简单的多态），而是会在调用的时候，运行时的去查找函数实现，比如，当我们发送<code>[objc foo]</code>时，编译器会将其转化为<code>objc_msgSend(objc, @selector(foo))</code>(注意，不一定都是转化为<code>objc_msgSend</code>，根据发送对象和返回类型，可转化为<code>objc_msgSendSuper</code>,<code>objc_msgSendSuper_stret</code>等)，<code>objc_msgSend</code>方法负责查找函数实现并调用返回结果，我们知道，<code>Objc Runtime</code>是<a href="https://github.com/zhongwuzw/objc4-cn" target="_blank" rel="external">开源</a>的，所以我们可以看一下源代码<code>objc_msgSend</code>的实现逻辑。</p>
<h2 id="objc-msgSend-使用汇编实现"><a href="#objc-msgSend-使用汇编实现" class="headerlink" title="objc_msgSend()使用汇编实现"></a>objc_msgSend()使用汇编实现</h2><hr>
<p>源码可参见<a href="https://github.com/zhongwuzw/objc4-cn/blob/087a6fd60e3cad2934163b26aa484640d6ff9467/runtime/Messengers.subproj/objc-msg-arm64.s#L286" target="_blank" rel="external">objc_msgSend源码</a>，我们发现，竟然不是用<code>C</code>实现的，而是使用的汇编语言，总结来说，原因有二：</p>
<ol>
<li>我们无法定义一个<code>C</code>函数，可以有可变的参数(可变参数是可以实现的，参考<code>printf</code>函数)并且可以调用任意的<code>C</code>函数指针，因为函数指针类型是在是无穷无尽的，根本就无法预先全部定义出来。<a id="more"></a></li>
<li>使用汇编另一个很重要的原因就是速度，首先，汇编就比<code>C</code>快，其次，通过使用汇编，可以免去大量局部变量拷贝的操作，参数会直接被存放在寄存器中，当找到<code>IMP</code>时，参数已经保存在了寄存器中，可以直接使用。</li>
</ol>
<h2 id="objc-msgSend-步骤总结"><a href="#objc-msgSend-步骤总结" class="headerlink" title="objc_msgSend()步骤总结"></a>objc_msgSend()步骤总结</h2><hr>
<p><code>objc_msgSend</code>步骤：</p>
<ol>
<li>获取传递进来的类对象</li>
<li>获取类用来缓存方法的cache</li>
<li>使用<code>selector</code>在cache中查找</li>
<li>如果cache中查找不到，则跳转到C代码(<code>_class_lookupMethodAndLoadCache3</code>)，进行slow search</li>
<li>调用方法的IMP</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><hr>
<ol>
<li><a href="https://www.mikeash.com/pyblog/friday-qa-2017-06-30-dissecting-objc_msgsend-on-arm64.html" target="_blank" rel="external">https://www.mikeash.com/pyblog/friday-qa-2017-06-30-dissecting-objc_msgsend-on-arm64.html</a></li>
<li><a href="https://github.com/zhongwuzw/objc4-cn/blob/087a6fd60e3cad2934163b26aa484640d6ff9467/runtime/Messengers.subproj/objc-msg-arm64.s" target="_blank" rel="external">https://github.com/zhongwuzw/objc4-cn/blob/087a6fd60e3cad2934163b26aa484640d6ff9467/runtime/Messengers.subproj/objc-msg-arm64.s</a></li>
<li><a href="https://github.com/zhongwuzw/objc4-cn" target="_blank" rel="external">https://github.com/zhongwuzw/objc4-cn</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Goroutines vs 多线程]]></title>
      <url>https://zhongwuzw.github.io/2018/01/30/Goroutines-vs-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p><a href="https://golang.google.cn" target="_blank" rel="external">Golang</a>是由<code>Google</code>开发，天生支持并发的语言。<code>Go</code>有一个<code>goroutine</code>的机制，当我们在调用函数前加上<code>go</code>关键字，那么就会创建一个<code>goroutine</code>来异步执行该函数，如：<code>go foo()</code>，以此来实现并发的功能。本文，我们将讨论一下<code>goroutine</code>和线程的区别。</p>
<h2 id="大小可调整的栈"><a href="#大小可调整的栈" class="headerlink" title="大小可调整的栈"></a>大小可调整的栈</h2><hr>
<p>线程可以在启动前设置栈的大小，启动后，线程的栈大小就固定了，所以带来的弊端就是浪费内存空间，因为很多时候并不需要这么多内存。<br>相比于线程，<code>goroutine</code>的栈空间是可调整的，<code>goroutine</code>创建时，通常只会分配<code>2KB</code>大小的栈，随着<code>goroutine</code>的运行，比如不断的递归，创建变量等，相应的栈空间也会增大，反之也会按需减小，一个<code>goroutine</code>最大可分配栈空间通常为<code>1GB</code>。</p>
<h2 id="goroutine-的调度"><a href="#goroutine-的调度" class="headerlink" title="goroutine 的调度"></a><code>goroutine</code> 的调度</h2><hr>
<p>线程由系统内核进行调度，系统为了实现并发，会不断的切换线程的执行，由此会带来线程的上下文切换。<br>而<code>Go</code>的运行时有一套自己的调度系统，使用<code>m:n</code>策略，既复用<code>m</code>个<code>goroutine</code>到<code>n</code>个线程，<code>Go</code>的调度器类似于内核调度器，区别是它仅管理单个<code>Go</code>程序创建的<code>goroutine</code>。<br>相比于线程，<code>Go</code>的调度器并不会周期性的被硬件定时器调用，而是<code>Go</code>自己来处理，比如，当一个<code>goroutine</code>调用<code>time.Sleep</code>或阻塞与通道、互斥操作时，调度器会将<code>goroutine</code>休眠，然后运行另外的<code>goroutine</code>，这些并不需要内核的上下文切换，所以重新调度一个<code>goroutine</code>的开销会小于重新调度线程的开销。</p>
<h2 id="GOMAXPROCS"><a href="#GOMAXPROCS" class="headerlink" title="GOMAXPROCS"></a><code>GOMAXPROCS</code></h2><hr>
<p><code>Go</code>的调度器使用一个名为<code>GOMAXPROCS</code>的参数来确定真正的线程数，其默认值为机器的<code>CPU</code>的数量，如一台机器有8个<code>CPU</code>,那么调度器会同时创建8个线程（<code>GOMAXPROCS</code>就是如上所说<code>m:n</code>中的<code>n</code>)。休眠或阻塞中<code>goroutine</code>不需要线程，但是对于阻塞在<code>I/O</code>或系统调用、正在调用非<code>Go</code>函数的<code>goroutine</code>来说，需要一个系统线程，不过不占用<code>GOMAXPROCS</code>。</p>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><hr>
<ol>
<li><a href="https://golang.google.cn" target="_blank" rel="external">https://golang.google.cn</a></li>
<li><a href="http://www.gopl.io" target="_blank" rel="external">http://www.gopl.io</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Objective-C++之内存管理]]></title>
      <url>https://zhongwuzw.github.io/2017/11/16/Objective-C-%E4%B9%8B%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<h2 id="Objective-C-内存管理"><a href="#Objective-C-内存管理" class="headerlink" title="Objective-C++内存管理"></a>Objective-C++内存管理</h2><hr>
<p>在项目开发时，有时会使用<code>C++</code>来进行混合开发，因为<code>C++</code>有很好的跨平台及性能优势。我们可以将<code>C++</code>对象作为<code>Objective-C</code>的属性或者反过来<code>Objective-C</code>作为<code>C++</code>对象的成员，当我们需要在App中使用C++库时，会很有用。</p>
<p>当我们的文件同时使用了<code>Objective-C</code>和<code>C++</code>时，需要告知编译器来进行处理，方法为将该文件的后缀从<code>.m</code>改为<code>.mm</code>。</p>
<p>如下示例展示了<code>Objective-C</code>和<code>C++</code>互相作为成员变量来关联：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// Forward declare so that everything works below</span></div><div class="line"><span class="class"><span class="keyword">@class</span> <span class="title">ObjcClass</span>;</span></div><div class="line"><span class="keyword">class</span> CppClass;</div><div class="line"></div><div class="line"><span class="comment">// C++ class with an Objective-C member variable</span></div><div class="line"><span class="keyword">class</span> CppClass &#123;</div><div class="line">  public:</div><div class="line">    ObjcClass *objcClass;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// Objective-C class with a C++ object as a property</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ObjcClass</span> : <span class="title">NSObject</span></span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) std::shared_ptr&lt;CppClass&gt; cppClass;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ObjcClass</span></span></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="comment">// Using the two classes above</span></div><div class="line">std::shared_ptr&lt;CppClass&gt; cppClass(new CppClass());</div><div class="line">ObjcClass *objcClass = [[ObjcClass alloc] init];</div><div class="line"></div><div class="line">cppClass-&gt;objcClass = objcClass;</div><div class="line">objcClass.cppClass = cppClass;</div></pre></td></tr></table></figure>
<p>如上，我们注意到，属性声明成了<code>assign</code>，而不是我们通常使用的<code>strong</code>、<code>weak</code>，原因就是对于非<code>Objective-C</code>类型对象来说是没有意义的，编译器无法<code>retain</code>或<code>release</code>一个<code>C++</code>对象，因为它不是一个<code>Objective-C</code>对象类型。</p>
<p>尽管声明属性为<code>assign</code>，但是内存管理依然能正确处理；不过这里要注意的是，如果我们使用原始指针来保存，这时候就需要自己进行内存管理了。</p>
<p><code>Objective-C</code>对象实例总是在堆上分配，但是<code>C++</code>实例可以在栈或堆上。所以我们把分配在栈上的<code>C++</code>实例赋值给<code>Objective-C</code>的成员变量时，就有点奇怪，不过不用担心，它其实会放到堆上，因为整个<code>Objective-C</code>对象都是在堆上的。编译器实现这个转化的方式为：在<code>alloc</code>和<code>dealloc</code>方法中构建和析构<code>C++</code>对象，分别调用<code>object_cxxConstruct</code>、<code>object_cxxDestruct</code>方法，来处理<code>C++</code>对象。</p>
<p>所以，对于所有基于栈的<code>C++</code>对象，不需要担心内存的问题，编译器自动接管。但是再强调一下，基于堆的<code>C++</code>对象，需要手动管理内存，如在<code>dealloc</code>中<code>delete``C++</code>对象。</p>
<p><code>Game Over!!!</code></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[聊聊dealloc]]></title>
      <url>https://zhongwuzw.github.io/2017/09/21/%E8%81%8A%E8%81%8Adealloc/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<blockquote>
<p>所有代码注释可在<a href="https://github.com/zhongwuzw/ObjC-Runtime" target="_blank" rel="external">Objc-Runtime</a>中查看</p>
</blockquote>
<p>在<code>iOS</code>开发中，我们经常会通过<code>dealloc</code>来判断对象实例是否被释放，依据是当对象实例的引用计数变为0时，运行时会调用对象实例的<code>dealloc</code>方法，我们可以利用该方法做一些扫尾的工作。</p>
<h2 id="dealloc调用时机"><a href="#dealloc调用时机" class="headerlink" title="dealloc调用时机"></a>dealloc调用时机</h2><hr>
<p><code>Objective-C</code>的引用计数管理使用两种方式相结合，<code>sidetable</code>和<code>isa</code>指针（指针并不是对象的真正内存地址，而是某些位用来进行了一些标志位的存放）；接下来，我将以<code>sidetable</code>进行<code>release</code>来讨论<code>dealloc</code>的调用，直接上代码，如下<code>sidetable_release</code>（下文所有都会用<code>sidetable_release</code>来讨论）函数会在给对象发送<code>release</code>消息的时候调用，<code>sidetable_release</code>方法首先获取对象的引用计数，对引用计数相关标志位做操作，若对象实例可以被释放，将通过<code>objc_msgSend</code>发送<code>SEL_dealloc</code>消息，既调用对象的<code>dealloc</code>方法。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">uintptr_t</span></div><div class="line">objc_object::sidetable_release(<span class="keyword">bool</span> performDealloc)</div><div class="line">&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> SUPPORT_NONPOINTER_ISA</span></div><div class="line">    assert(!isa.nonpointer);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    SideTable&amp; table = SideTables()[<span class="keyword">this</span>];</div><div class="line"></div><div class="line">    <span class="keyword">bool</span> do_dealloc = <span class="literal">false</span>;</div><div class="line"></div><div class="line">    table.lock();</div><div class="line">    RefcountMap::iterator it = table.refcnts.find(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">if</span> (it == table.refcnts.end()) &#123;</div><div class="line">        do_dealloc = <span class="literal">true</span>;</div><div class="line">        table.refcnts[<span class="keyword">this</span>] = SIDE_TABLE_DEALLOCATING;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (it-&gt;second &lt; SIDE_TABLE_DEALLOCATING) &#123;</div><div class="line">        <span class="comment">// SIDE_TABLE_WEAKLY_REFERENCED may be set. Don't change it.</span></div><div class="line">        do_dealloc = <span class="literal">true</span>;</div><div class="line">        it-&gt;second |= SIDE_TABLE_DEALLOCATING;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (! (it-&gt;second &amp; SIDE_TABLE_RC_PINNED)) &#123;</div><div class="line">        it-&gt;second -= SIDE_TABLE_RC_ONE;</div><div class="line">    &#125;</div><div class="line">    table.unlock();</div><div class="line">    <span class="comment">// 进行释放操作，调用dealloc</span></div><div class="line">    <span class="keyword">if</span> (do_dealloc  &amp;&amp;  performDealloc) &#123;</div><div class="line">        ((<span class="keyword">void</span>(*)(objc_object *, SEL))objc_msgSend)(<span class="keyword">this</span>, SEL_dealloc);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> do_dealloc;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p><code>dealloc</code>方法的实现如下：</p>
<figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- <span class="params">(void)</span>dealloc &#123;</div><div class="line">    _objc_rootDealloc<span class="params">(self)</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>直接调用<code>_objc_rootDealloc</code>方法来做处理，我们省略一些细节处理，通常情况下，<code>dealloc</code>方法最终会调用<code>objc_dispose</code>方法，内部又调用<code>objc_destructInstance</code>方法来进行析构操作，析构完成后将内存释放掉。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">id</span> </div><div class="line">object_dispose(<span class="keyword">id</span> obj)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (!obj) <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line"></div><div class="line">    objc_destructInstance(obj);</div><div class="line">    <span class="comment">// 做完各种析构操作后释放obj的内存</span></div><div class="line">    free(obj);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">void *objc_destructInstance(id obj) </div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (obj) &#123;</div><div class="line">        <span class="comment">// Read all of the flags at once for performance.</span></div><div class="line">        <span class="keyword">bool</span> cxx = obj-&gt;hasCxxDtor();</div><div class="line">        <span class="keyword">bool</span> assoc = obj-&gt;hasAssociatedObjects();</div><div class="line"></div><div class="line">        <span class="comment">// This order is important.</span></div><div class="line">        <span class="keyword">if</span> (cxx) object_cxxDestruct(obj);   <span class="comment">// 调用C++析构器</span></div><div class="line">        <span class="keyword">if</span> (assoc) _object_remove_assocations(obj); <span class="comment">// 移除对象相关的关联引用</span></div><div class="line">        obj-&gt;clearDeallocating();   <span class="comment">// 进行ARC相关操作，如weak置nil，清理计数位</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> obj;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="并发赋值"><a href="#并发赋值" class="headerlink" title="并发赋值"></a>并发赋值</h2><hr>
<p>考虑如下代码，我们来模拟并发的对变量<code>obj</code>进行赋值。<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">__block <span class="built_in">NSObject</span> *obj = [<span class="built_in">NSObject</span> new];</div><div class="line"><span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, <span class="number">0</span>), ^&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">YES</span>) &#123;</div><div class="line">        obj = [<span class="built_in">NSObject</span> new];</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">while</span> (<span class="literal">YES</span>) &#123;</div><div class="line">    obj = [<span class="built_in">NSObject</span> new];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>执行如上代码，我们发现，很快程序就会崩溃，异常为<code>EXC_BAD_ACCESS</code>，既访问已释放的内存地址，异常栈如下，在调用<code>objc_msgSend</code>发送<code>SEL_dealloc</code>方法时异常，而该方法正是在如上的<code>objc_object::sidetable_release</code>中被调用的，也就是<code>release</code>方法调用过程中。最终的原因就是对已释放的对象实例再次进行<code>release</code>操作。</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="number">0x106463a00</span> &lt;+<span class="number">156</span>&gt;: callq  <span class="number">0x1064653e8</span>               <span class="comment">; objc::DenseMapBase&lt;objc::DenseMap&lt;DisguisedPtr&lt;objc_object&gt;, unsigned long, true, objc::DenseMapInfo&lt;DisguisedPtr&lt;objc_object&gt; &gt; &gt;, DisguisedPtr&lt;objc_object&gt;, unsigned long, objc::DenseMapInfo&lt;DisguisedPtr&lt;objc_object&gt; &gt;, true&gt;::FindAndConstruct(DisguisedPtr&lt;objc_object&gt; const&amp;)</span></div><div class="line"><span class="number">0x106463a05</span> &lt;+<span class="number">161</span>&gt;: <span class="keyword">movq</span>   <span class="number">$0</span>x2, <span class="number">0x8</span>(%rax)</div><div class="line"><span class="number">0x106463a0d</span> &lt;+<span class="number">169</span>&gt;: movl   -<span class="number">0x2c</span>(%rbp), %ebx</div><div class="line"><span class="number">0x106463a10</span> &lt;+<span class="number">172</span>&gt;: <span class="keyword">movq</span>   %r15, %rdi</div><div class="line"><span class="number">0x106463a13</span> &lt;+<span class="number">175</span>&gt;: callq  <span class="number">0x1064669fa</span>               <span class="comment">; symbol stub for: os_unfair_lock_unlock</span></div><div class="line"><span class="number">0x106463a18</span> &lt;+<span class="number">180</span>&gt;: testb  %bl, %bl</div><div class="line"><span class="number">0x106463a1a</span> &lt;+<span class="number">182</span>&gt;: <span class="keyword">je</span>     <span class="number">0x106463a2e</span>               <span class="comment">; &lt;+202&gt;</span></div><div class="line"><span class="number">0x106463a1c</span> &lt;+<span class="number">184</span>&gt;: leaq   <span class="number">0x55a8ad</span>(%rip), %rax      <span class="comment">; SEL_dealloc</span></div><div class="line"><span class="number">0x106463a23</span> &lt;+<span class="number">191</span>&gt;: <span class="keyword">movq</span>   (%rax), %rsi // 在这访问了已释放的内存地址</div><div class="line"><span class="number">0x106463a26</span> &lt;+<span class="number">194</span>&gt;: <span class="keyword">movq</span>   %r14, %rdi</div><div class="line"><span class="number">0x106463a29</span> &lt;+<span class="number">197</span>&gt;: callq  <span class="number">0x106465940</span>               <span class="comment">; objc_msgSend</span></div><div class="line"><span class="number">0x106463a2e</span> &lt;+<span class="number">202</span>&gt;: movl   <span class="number">$0</span>x1, %eax</div><div class="line"><span class="number">0x106463a33</span> &lt;+<span class="number">207</span>&gt;: <span class="keyword">jmp</span>    <span class="number">0x106463a4c</span>               <span class="comment">; &lt;+232&gt;</span></div></pre></td></tr></table></figure>
<p>为什么会导致这样的结果呢？原因其实是，对属性的赋值操作并不是原子操作，对属性的赋值其实是调用属性的<code>setter</code>方法，默认<code>setter</code>代码实现如下：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)setObj:(<span class="built_in">NSObject</span> *)obj &#123;</div><div class="line">    <span class="keyword">if</span> (obj != _obj) &#123;          <span class="comment">// 1</span></div><div class="line">        <span class="keyword">id</span> oldValue = _obj;     <span class="comment">// 2</span></div><div class="line">        _obj = [obj <span class="keyword">retain</span>];    <span class="comment">// 3</span></div><div class="line">        [oldValue release];     <span class="comment">// 4</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们考虑两个线程同时进行<code>setObj:</code>赋值操作，当走到第4步时，两个线程同时尝试进行<code>release</code>操作，结果是一个线程成功的释放对象，而另一个线程会在<code>release</code>函数调用过程中访问已经释放的内存区域，这就导致了崩溃。</p>
<h2 id="dealloc在哪个线程被调用"><a href="#dealloc在哪个线程被调用" class="headerlink" title="dealloc在哪个线程被调用"></a>dealloc在哪个线程被调用</h2><hr>
<p><code>dealloc</code>并不总是在主线程中被调用，从如上<code>sidetable_release</code>方法，我们可得知，其调用线程为最后一个调用<code>release</code>方法的线程，当需要释放对象时，向对象实例发送<code>SEL_dealloc</code>（即<code>dealloc</code>）消息。</p>
<p>也就是说,<code>dealloc</code>方法有可能在任何线程被调用，这就需要注意一点，就是在<code>dealloc</code>中进行<code>UIKit</code>相关<code>API</code>的操作（<code>UIKit</code>相关<code>API</code>只能在主线程操作）。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><hr>
<ol>
<li><a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/mmPractical.html#//apple_ref/doc/uid/TP40004447-SW13" target="_blank" rel="external">https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/mmPractical.html#//apple_ref/doc/uid/TP40004447-SW13</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[实现Swift的Array]]></title>
      <url>https://zhongwuzw.github.io/2017/09/01/%E5%AE%9E%E7%8E%B0Swift%E7%9A%84Array/</url>
      <content type="html"><![CDATA[<p>当我们从<code>Obj-C</code>转到<code>Swift</code>时，会发现<code>Swift</code>提供的数据结构大量使用值语义，如<code>Array</code>、<code>Dictionary</code>等，今天，我们将实现<code>Array</code>的基本功能，来理解值语义以及写时复制。</p>
<h2 id="值和引用语义"><a href="#值和引用语义" class="headerlink" title="值和引用语义"></a>值和引用语义</h2><hr>
<p>在实现之前，我们来简单讨论一下值语义和引用语义的区别。当我们使用<code>Obj-C</code>及大多数其他面向对象语言开发时，经常会使用对象指针或引用，而这就是常说的引用语义，我们可以赋值一个对象实例的引用给一个变量：</p>
<p><code>MyClass *a = ...;</code></p>
<p>接着，可以将该变量赋值给另一个变量：</p>
<p><code>MyClass *b = a;</code></p>
<p>此时，<code>a</code>和<code>b</code>将指向同一个对象，如果指向的对象是可变的，当我们修改对象的内容时，两者对其都可见。</p>
<p>值语义相对比较简单，我们使用的如<code>int</code>、<code>struct</code>等都是值语义，声明为值语义的变量，其直接指向真正的值，而不是值的指针。所以当我们进行赋值时，将得到值的拷贝，如：</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">int a = <span class="number">42</span><span class="comment">;</span></div><div class="line">int <span class="keyword">b </span>= a<span class="comment">;</span></div><div class="line"><span class="keyword">b++;</span></div></pre></td></tr></table></figure>
<p>此时，<code>b</code>的值为<code>43</code>，而<code>a</code>依然为<code>42</code>。</p>
<p>在<code>Swift</code>中，<code>class</code>类型仍然是引用语义，<code>struct</code>则为值语义，所以，如果对<code>class</code>类型进行赋值时，将得到一个指向同一个实例的引用，对实例对象内容的修改将对所有的引用可见；使用<code>struct</code>时，则不会，每个变量之间都是独立的。</p>
<p>对于使用过<code>Obj-C</code>开发过的人来说，转到<code>Swift</code>使用其提供的数组和字典时，可能会不习惯，因为<code>Swift</code>中两者已经变成了值语义，如：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> <span class="selector-tag">a</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"><span class="selector-tag">var</span> <span class="selector-tag">b</span> = <span class="selector-tag">a</span></div><div class="line"><span class="selector-tag">b</span>.append(<span class="number">4</span>)</div></pre></td></tr></table></figure>
<p>对于大多数语言，如上代码的结果一般都是<code>a</code>和<code>b</code>都指向同一个数组<code>[1, 2, 3, 4]</code>。而在<code>Swift</code>中，<code>a</code>指向<code>[1, 2, 3]</code>，<code>b</code>则指向<code>[1, 2, 3, 4]</code>。</p>
<h2 id="实现值语义"><a href="#实现值语义" class="headerlink" title="实现值语义"></a>实现值语义</h2><hr>
<p>如果对象包含固定数量的数据，那么实现就比较简单：我们直接将数据放到<code>struct</code>中即可。比如想要一个2D <code>Point</code>类型且满足值语义，可以创建一个<code>struct</code>包含<code>x``y</code>的值：</p>
<figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">struct Point &#123;</div><div class="line">    <span class="built_in">var</span> <span class="symbol">x:</span> <span class="built_in">Int</span></div><div class="line">    <span class="built_in">var</span> <span class="symbol">y:</span> <span class="built_in">Int</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>固定数量实现起来比较简单，但是我们使用的<code>Array</code>，它的个数不定，我们不可能直接把所有数组元素放到<code>struct</code>中，所以，我们需要创建一个指针，用来指向数组元素的内存：</p>
<figure class="highlight capnproto"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Array</span>&lt;T&gt; </span>&#123;</div><div class="line">    var ptr: UnsafeMutablePointer&lt;T&gt;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不过，有这还不够，我们还需要针对<code>struct</code>的赋值和销毁做一些操作；当<code>struct</code>被赋值时，需要对新的<code>struct</code>的<code>ptr</code>元素赋值，这时候需要将原<code>struct</code>的<code>ptr</code>指向的所有元素拷贝到一组新的内存块中，并将新的<code>struct</code>的<code>ptr</code>指向新的第一个元素的地址。当<code>struct</code>销毁时，其指针指向的元素占用的内存同样需要被释放。而这两个需求，<code>Swift</code>的<code>struct</code>并没有提供自定义方法可以实现。</p>
<p>由于<code>class</code>有<code>deinit</code>方法，所以析构功能可以通过<code>class</code>来实现，指针指向的内容可以在<code>deinit</code>中进行处理，但是<code>class</code>又不是值语义的，不过我们依然可以解决，既外封装<code>struct</code>，使用<code>struct</code>作为外部接口进行数组的使用，如下：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class ArrayImpl<span class="symbol">&lt;T&gt;</span> &#123;</div><div class="line">    var <span class="keyword">ptr</span>: UnsafeMutablePointer<span class="symbol">&lt;T&gt;</span></div><div class="line"></div><div class="line">    deinit &#123;</div><div class="line">        <span class="keyword">ptr</span>.destroy(...)</div><div class="line">        <span class="keyword">ptr</span>.dealloc(...)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">struct Array<span class="symbol">&lt;T&gt;</span> &#123;</div><div class="line">    var imp<span class="variable">l:</span> ArrayImpl<span class="symbol">&lt;T&gt;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来，在<code>Array&lt;T&gt;</code>中添加一个接口，其内部则调用<code>ArrayImpl</code>的实现。</p>
<p>如上，尽管使用了<code>struct</code>，但是我们还并没有实现值语义，如果拷贝一个<code>struct</code>，新的<code>struct</code>依然指向相同的<code>ArrayImpl</code>，而我们又没法自定义<code>struct</code>的赋值操作，所以也没法拷贝。不过，我们可以从另一个角度去解决这个问题，我们可以思考一下，真正需要在什么时候进行拷贝的操作呢，答案就是做修改操作时，俗称的<code>COW</code>，既只有当进行修改操作时，才进行真正的拷贝。</p>
<p>比如，实现<code>append</code>方法来对<code>ArrayImpl</code>的拷贝添加一个元素（假设<code>ArrayImpl</code>已经实现了<code>copy</code>方法）：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mutating <span class="function"><span class="keyword">func</span> <span class="title">append</span><span class="params">(value: T)</span></span> &#123;</div><div class="line">    impl = impl.<span class="built_in">copy</span>()</div><div class="line">    impl.<span class="built_in">append</span>(value)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样，就实现了<code>Array</code>的值语义，尽管<code>a``b</code>赋值后依然指向相同的数据，但是只要修改其中的一个，就会进行拷贝操作，以保持数据的独立性。</p>
<p>如上的<code>append</code>方法，虽然实现了功能，但是效率太差，如：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> <span class="selector-tag">a</span>: [Int] = []</div><div class="line"><span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">1000</span> &#123;</div><div class="line">    <span class="selector-tag">a</span>.append(i)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在每一次进行迭代时，指向的数据都会进行拷贝的操作，然后立即销毁之前的存储内存，那么我们如何处理这种情况呢？</p>
<h2 id="isKnownUniquelyReferenced"><a href="#isKnownUniquelyReferenced" class="headerlink" title="isKnownUniquelyReferenced"></a>isKnownUniquelyReferenced</h2><hr>
<p>该<code>API</code>返回一个布尔值，表明某个对象是否只有一个单独的强引用指向它。</p>
<p>有了这个<code>API</code>，我们就可以修改一下<code>append</code>方法，只在必要的时候进行拷贝：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mutating <span class="function"><span class="keyword">func</span> <span class="title">append</span><span class="params">(_ value: T)</span></span> &#123;</div><div class="line">    <span class="comment">// isKnownUniquelyReferenced并不是线程安全的哦</span></div><div class="line">    <span class="keyword">if</span> !isKnownUniquelyReferenced(&amp;impl) &#123;</div><div class="line">        impl = impl.<span class="built_in">copy</span>()</div><div class="line">    &#125;</div><div class="line">    impl.<span class="built_in">append</span>(obj: value)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ArrayImpl"><a href="#ArrayImpl" class="headerlink" title="ArrayImpl"></a>ArrayImpl</h2><hr>
<p>接下来，我们将开始实现<code>ArrayImpl</code>。数组包含3个属性：数据指针、数组中元素的个数，以及当前分配的内存可存放的总个数。数据指针和数组元素个数这两个值是必须的，不过我们应当预先分配一定量的空闲内存区域，以避免过多的<code>reallocation</code>操作。</p>
<figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">class ArrayImpl&lt;<span class="built_in">T</span>&gt; &#123;</div><div class="line">    <span class="built_in">var</span> spa<span class="symbol">ce:</span> <span class="built_in">Int</span></div><div class="line">    <span class="built_in">var</span> cou<span class="symbol">nt:</span> <span class="built_in">Int</span></div><div class="line">    <span class="built_in">var</span> p<span class="symbol">tr:</span> UnsafeMutablePointer&lt;<span class="built_in">T</span>&gt;！</div></pre></td></tr></table></figure>
<p>接下来，实现<code>init</code>方法，<code>init</code>方法获取两个参数，<code>count</code>、<code>ptr</code>，拷贝指针的内容到新的对象。</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">init(coun<span class="variable">t:</span> Int = <span class="number">0</span>, <span class="keyword">ptr</span>: UnsafeMutablePointer<span class="symbol">&lt;T&gt;</span>? = nil) &#123;</div><div class="line">    self.<span class="built_in">count</span> = <span class="built_in">count</span></div><div class="line">    self.space = <span class="built_in">count</span></div><div class="line">    </div><div class="line">    self.<span class="keyword">ptr</span> = UnsafeMutablePointer<span class="symbol">&lt;T&gt;</span>.allocate(capacity: <span class="built_in">count</span>)</div><div class="line">    </div><div class="line">    guard <span class="keyword">let</span> <span class="keyword">ptr</span> = <span class="keyword">ptr</span> <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    self.<span class="keyword">ptr</span>.initialize(from: <span class="keyword">ptr</span>, coun<span class="variable">t:</span> <span class="built_in">count</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来，实现<code>append</code>方法，首先检查是否需要重新分配内存，如果没有多余的空间，则需要一块新的内存：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">append</span><span class="params">(obj: T)</span></span> &#123;</div><div class="line">    <span class="keyword">if</span> space == <span class="built_in">count</span> &#123;</div></pre></td></tr></table></figure>
<p>首次分配内存时，分配容量初始为<code>space</code>的2倍，且最小容量设置为16.</p>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> newSpace = <span class="built_in">max</span>(<span class="built_in">space</span> * <span class="number">2</span>, <span class="number">16</span>)</div><div class="line"><span class="built_in">let</span> newPtr = UnsafeMutablePointer&lt;T&gt;.allocate(capacity: newSpace)</div></pre></td></tr></table></figure>
<p>接着将数据从原位置拷贝到新的指针所在的内存。</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">newPtr.moveInitialize(<span class="keyword">from</span>: ptr, <span class="built_in">count</span>: <span class="built_in">count</span>)</div></pre></td></tr></table></figure>
<p>拷贝完成之后，就可以释放原来的内存了：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ptr</span>.deallocate(capacity: <span class="built_in">count</span>)</div><div class="line"><span class="keyword">ptr</span> = newPtr</div><div class="line">space = newSpace</div></pre></td></tr></table></figure>
<p>现在，已经有足够的空间来存放新的元素，我们将其拷贝到当前所有元素中最后一个元素后面内存区域并将<code>count</code>自增1：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(<span class="keyword">ptr</span> + <span class="built_in">count</span>).initialize(<span class="keyword">to</span>: obj)</div><div class="line"><span class="built_in">count</span> += <span class="number">1</span></div></pre></td></tr></table></figure>
<p><code>remove</code>操作也很简单，因为不需要重新分配内存。首先，清理待移除元素所在的内存：</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">remove</span><span class="params">(at index: Int)</span> &#123;</span></div><div class="line">    (<span class="built_in">ptr</span> + index).deinitialize()</div></pre></td></tr></table></figure>
<p><code>moveInitialize</code>方法可以使所有剩余的元素移动到指定的内存区域：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(<span class="keyword">ptr</span> + <span class="built_in">index</span>).moveInitialize(from: <span class="keyword">ptr</span> + <span class="built_in">index</span> + <span class="number">1</span>, coun<span class="variable">t:</span> <span class="built_in">count</span> - <span class="built_in">index</span> - <span class="number">1</span>)</div></pre></td></tr></table></figure>
<p>然后将<code>count</code>减一来表明已经移除一个元素:</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">count</span> -= <span class="number">1</span></div></pre></td></tr></table></figure>
<p>当然，我们也需要实现<code>copy</code>方法，以实现必要的拷贝操作（真正执行拷贝操作是在<code>init</code>方法中）：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">func <span class="keyword">copy</span>() -&gt; ArrayImpl<span class="symbol">&lt;T&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> ArrayImpl<span class="symbol">&lt;T&gt;</span>(coun<span class="variable">t:</span> <span class="built_in">count</span>, <span class="keyword">ptr</span>: <span class="keyword">ptr</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后，别忘了释放内存，我们可以在<code>deinit</code>中进行内存的释放操作：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">deinit</span> &#123;</div><div class="line">    ptr<span class="selector-class">.deinitialize</span>(<span class="attribute">count</span>: count)</div><div class="line">    <span class="selector-tag">ptr</span><span class="selector-class">.deallocate</span>(<span class="attribute">capacity</span>: space)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样，<code>ArrayImpl</code>基本方法已经完成，接下来就是实现<code>Array</code>的<code>struct</code>的接口方法，其主要是调用<code>ArrayImpl</code>的实现。</p>
<h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><hr>
<p>接下来，实现<code>Array</code>的一些接口方法，由于比较简单，直接上代码，代码如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">ensureUnique</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">if</span> !isKnownUniquelyReferenced(&amp;impl) &#123;</div><div class="line">        impl = impl.copy()</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">    </div><div class="line"><span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">append</span><span class="params">(<span class="number">_</span> value: T)</span></span> &#123;</div><div class="line">    ensureUnique()</div><div class="line">    impl.append(obj: value)</div><div class="line">&#125;</div><div class="line">    </div><div class="line"><span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">remove</span><span class="params">(at index: Int)</span></span> &#123;</div><div class="line">    ensureUnique()</div><div class="line">    impl.remove(at: index)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后，我们还要加上两个功能，下标访问以及<code>for...in</code>迭代，下标可以通过实现<code>subscript(index: Int)</code>方法，<code>for...in</code>迭代可以通过实现<code>Collection</code>协议的方法，具体如下：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">    <span class="selector-tag">var</span> count: Int &#123;</div><div class="line">    return impl<span class="selector-class">.count</span></div><div class="line">&#125;</div><div class="line">    </div><div class="line"><span class="function"><span class="title">subscript</span><span class="params">(index: Int)</span></span> -&gt; T &#123;</div><div class="line">    get &#123;</div><div class="line">        return impl<span class="selector-class">.ptr</span>[index]</div><div class="line">    &#125;</div><div class="line">    mutating set &#123;</div><div class="line">        ensureUnique()</div><div class="line">        impl<span class="selector-class">.ptr</span>[index] = newValue</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">    </div><div class="line"><span class="selector-tag">var</span> description: String &#123;</div><div class="line">    <span class="selector-tag">var</span> str = <span class="string">""</span></div><div class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> self &#123;</div><div class="line">        <span class="keyword">if</span> !str<span class="selector-class">.isEmpty</span> &#123;</div><div class="line">            str += <span class="string">", "</span></div><div class="line">        &#125;</div><div class="line">        str += String(describing: value)</div><div class="line">    &#125;</div><div class="line">    return <span class="string">"(\(impl.ptr): "</span> + str + <span class="string">")"</span></div><div class="line">&#125;</div><div class="line">    </div><div class="line">typealias Index = Int</div><div class="line">    </div><div class="line"><span class="selector-tag">var</span> startIndex: Index &#123;</div><div class="line">    return <span class="number">0</span></div><div class="line">&#125;</div><div class="line">    </div><div class="line"><span class="selector-tag">var</span> endIndex: Index &#123;</div><div class="line">    return count</div><div class="line">&#125;</div><div class="line">    </div><div class="line">func index(after <span class="selector-tag">i</span>: Int) -&gt; Int &#123;</div><div class="line">    return <span class="selector-tag">i</span> + <span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="源代码及测试代码"><a href="#源代码及测试代码" class="headerlink" title="源代码及测试代码"></a>源代码及测试代码</h2><hr>
<p>所有实现已上传<code>Github</code>：<a href="https://gist.github.com/zhongwuzw/2b194c9fb2e4aaaca04cedb79bf207f1" target="_blank" rel="external">https://gist.github.com/zhongwuzw/2b194c9fb2e4aaaca04cedb79bf207f1</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><hr>
<p><a href="https://www.mikeash.com/pyblog/friday-qa-2015-04-17-lets-build-swiftarray.html" target="_blank" rel="external">https://www.mikeash.com/pyblog/friday-qa-2015-04-17-lets-build-swiftarray.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxSwift之sentMessage、methodInvoked失效问题解决]]></title>
      <url>https://zhongwuzw.github.io/2017/07/27/RxSwift%E4%B9%8BsentMessage%E3%80%81methodInvoked%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      <content type="html"><![CDATA[<h2 id="RxSwift的sentMessage、methodInvoked方法"><a href="#RxSwift的sentMessage、methodInvoked方法" class="headerlink" title="RxSwift的sentMessage、methodInvoked方法"></a>RxSwift的<code>sentMessage</code>、<code>methodInvoked</code>方法</h2><hr>
<p><a href="https://github.com/ReactiveX/RxSwift" target="_blank" rel="external">RxSwift</a>是<a href="https://github.com/Reactive-Extensions/Rx.NET" target="_blank" rel="external">Rx</a>的<code>Swift</code>版本，用来实现函数式、响应式编程。</p>
<p>具体<code>RxSwift</code>的很多用法不做介绍，接下来，只讨论<code>sentMessage</code>、<code>methodInvoked</code>这两个方法，其作用是返回一个<code>Observable&lt;[Any]</code>，可以作为观察者监控<code>NSObject</code>子类的某个<code>selector</code>，当执行该<code>selector</code>时，将在执行前、后分别执行注册了该<code>selector</code>的<code>sentMessage</code>、<code>methodInvoked</code>方法。</p>
<h2 id="sentMessage、methodInvoked实现原理"><a href="#sentMessage、methodInvoked实现原理" class="headerlink" title="sentMessage、methodInvoked实现原理"></a><code>sentMessage</code>、<code>methodInvoked</code>实现原理</h2><hr>
<p><code>sentMessage</code>、<code>methodInvoked</code>只针对某个实例起作用，其实现首先借鉴了<code>KVO</code>的实现方法，通过创建监听的对象的子类，然后重写方法的实现来实现。<code>sentMessage</code>、<code>methodInvoked</code>实现分两个版本，基础版、优化版。基础版通过<code>Swizzle</code> <code>forwardInvocation:</code>、<code>respondsToSelector:</code>、<code>methodSignatureForSelector:</code>等函数，将所有需要观察的<code>selector</code>调用时进入<code>forwardInvocation:</code>流程，从而进行拦截，以实现通知；优化版则在基础版之上通过<code>Type Encoding</code>来做一个缓存优化，避免每次调用都进入转发的过程。</p>
<a id="more"></a>
<h2 id="sentMessage、methodInvoked遇到的问题"><a href="#sentMessage、methodInvoked遇到的问题" class="headerlink" title="sentMessage、methodInvoked遇到的问题"></a><code>sentMessage</code>、<code>methodInvoked</code>遇到的问题</h2><hr>
<p>在使用<code>sentMessage</code>、<code>methodInvoked</code>方法时，发现一个问题，当观察<code>iOS</code> <code>Framework</code>提供的方法时，可以正常运行，但是当观察自己创建的类（<code>NSObject</code>的子类）的实例的方法时，却始终无法运行，查看整个运行机制，<code>Class</code>、<code>IMP</code>都被正确替换，但是调用方法时，却始终截取不到，这下才意识到，难道是被编译器优化掉了？导致没有走<code>Objective-C</code>的动态派发？<br>遂翻看<code>Apple</code>的<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/BuildingCocoaApps/" target="_blank" rel="external">Using Swift with Cocoa and Objective-C</a>，有一段话是这么说的：</p>
<blockquote>
<p>“When Swift APIs are imported by the Objective-C runtime, there are no guarantees of dynamic dispatch for properties, methods, subscripts, or initializers. The Swift compiler may still devirtualize or inline member access to optimize the performance of your code, bypassing the Objective-C runtime.</p>
<p>You can use the dynamic modifier to require that access to members be dynamically dispatched through the Objective-C runtime. Requiring dynamic dispatch is rarely necessary. However, it is necessary when using APIs like key–value observing or the method_exchangeImplementations function in the Objective-C runtime, which dynamically replace the implementation of a method at runtime. If the Swift compiler inlined the implementation of the method or devirtualized access to it, the new implementation would not be used.”</p>
</blockquote>
<p>大概意思是当在<code>Swift</code>中使用<code>Objective-C</code>中定义的方法时，编译器不保证动态派发，会对其做优化来提高性能，导致的结果是，会使<code>KVO</code>、<code>Swizzling</code>等失效，要解决该问题，可以使用<code>dynamic</code>修饰符，使得方法强制进行<code>Objective-C</code>的动态派发。</p>
<p>这样，问题就解决了，原来是编译器优化搞的鬼。<br><a href="https://stackoverflow.com/questions/39708434/observable-for-selector-rxswift/45340883#45340883" target="_blank" rel="external">stackoverflow</a>上也有人提这个问题，我也进行了回答。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Swift3之Weak引用]]></title>
      <url>https://zhongwuzw.github.io/2017/06/17/Swift%E4%B9%8BWeak%E5%BC%95%E7%94%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>由于不同的<code>Swift</code>版本引用计数实现会有不同，该文讨论的引用计数原理都基于<code>Swift3</code></p>
</blockquote>
<h2 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h2><hr>
<p>做<code>iOS</code>开发时经常会遇到循环引用，如果处理不当会导致内存泄露，我们通常会使用<code>weak reference</code>弱引用来解决该问题，因为弱引用不会<code>retain</code>对象，当对象引用计数变为0时，弱引用指针将会被赋<code>nil</code>。</p>
<h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><hr>
<p>通常如果实现弱引用，可以让每一个对象维护所有指向该对象的一个弱引用列表，当一个弱引用指向一个对象时，该引用被添加进列表，当弱引用重新赋值或生命期结束，则将其从列表中移除，当一个对象<code>dealloced</code>后，列表中的所有引用会被赋<code>nil</code>。在多线程环境中，需要对获得弱引用和释放对象的操作进行同步，以避免竞态条件，既当一个线程在释放最后一个强引用对象的同时，另一个线程正尝试加载该对象的弱引用。</p>
<p><code>Objective-C</code>实现的过程为，每一个弱引用是一个指向目标对象的指针，编译器会使用<code>helper</code>函数，来避免直接读写指针，确保读取弱引用对象时不会返回正在被释放的对象指针。</p>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><hr>
<p>接下来，我们将创建几个方法来观察弱引用的过程。<br>首先我们想要能够<code>dump</code>出一个对象的内存，如下方法将获取一块内存，将其分成指针大小的块，再将其内容转成16进制，以便于观察：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">// Swift <span class="keyword">version</span>: Swift3</div><div class="line"></div><div class="line">func contents(<span class="keyword">ptr</span>: UnsafeRawPointer, _ length: Int) -&gt; String &#123;</div><div class="line">    <span class="keyword">let</span> wordPtr = <span class="keyword">ptr</span>.assumingMemoryBound(<span class="keyword">to</span>: UInt.self)</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> words = length / MemoryLayout<span class="symbol">&lt;UInt&gt;</span>.size</div><div class="line">    <span class="keyword">let</span> wordChars = MemoryLayout<span class="symbol">&lt;UInt&gt;</span>.size * <span class="number">2</span></div><div class="line">    </div><div class="line">    <span class="keyword">let</span> <span class="keyword">buffer</span> = UnsafeBufferPointer<span class="symbol">&lt;UInt&gt;</span>(<span class="keyword">star</span><span class="variable">t:</span> wordPtr, coun<span class="variable">t:</span> words)</div><div class="line">    <span class="keyword">let</span> wordStrings = <span class="keyword">buffer</span>.<span class="keyword">map</span>(&#123; word -&gt; String in</div><div class="line">        var wordString = String(word, radix: <span class="number">16</span>)</div><div class="line">        <span class="keyword">while</span> wordString.characters.<span class="built_in">count</span> &lt; wordChars &#123;</div><div class="line">            wordString = <span class="string">"0"</span> + wordString</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> wordString</div><div class="line">    &#125;)</div><div class="line">    <span class="keyword">return</span> wordStrings.joined(separator: <span class="string">" "</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>接下来，我们将创建一个<code>dumper</code>函数来打印一个对象实例的内容，参数为一个对象实例，函数返回一个闭包。在函数内部，会创建一个<code>UnsafeRawPointer</code>指针来指向对象，这样能确保不会进行引用计数的操作，且当对象被释放后，我们仍可以<code>dump</code>出指针所指向内存的内容。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Swift version: Swift3</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">dumperFunc</span><span class="params">(<span class="number">_</span> obj: AnyObject)</span></span> -&gt; ((<span class="type">Void</span>) -&gt; <span class="type">String</span>) &#123;</div><div class="line">    <span class="keyword">let</span> objString = <span class="type">String</span>(describing: obj)</div><div class="line">    <span class="keyword">let</span> ptr = <span class="built_in">unsafeBitCast</span>(obj, to: <span class="type">UnsafeRawPointer</span>.<span class="keyword">self</span>)</div><div class="line">    <span class="keyword">let</span> length = class_getInstanceSize(type(of: obj))</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="keyword">let</span> bytes = contents(ptr: ptr, length)</div><div class="line">        <span class="keyword">return</span> <span class="string">"<span class="subst">\(objString)</span> <span class="subst">\(ptr)</span>: <span class="subst">\(bytes)</span>"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如下有一个类，它有一个弱引用的属性<code>target</code>，同时，创建两个<code>dummy</code>属性，当<code>dump</code>内存内容时可以更清晰的识别：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeakReferer</span> </span>&#123;</div><div class="line">        <span class="keyword">var</span> dummy1 = <span class="number">0x1234321012343210</span></div><div class="line">        <span class="keyword">weak</span> <span class="keyword">var</span> target: <span class="type">WeakTarget</span>?</div><div class="line">        <span class="keyword">var</span> dummy2: <span class="type">UInt</span> = <span class="number">0xabcdefabcdefabcd</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>接下来，创建一个该对象的实例，并<code>dump</code>出内存的内容：</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let referer = WeakReferer()</div><div class="line">let refererDump = dumperFunc(<span class="name">referer</span>)</div><div class="line">print(<span class="name">refererDump</span>())</div></pre></td></tr></table></figure>
<p>结果为：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SwiftLearn<span class="selector-class">.WeakReferer</span> <span class="number">0</span>x000060000004eb50: <span class="number">000000010</span>ebb0c50 <span class="number">0000000200000004</span> <span class="number">1234321012343210</span> <span class="number">0000000000000000</span> abcdefabcdefabcd</div></pre></td></tr></table></figure>
<p>我们可以看到，<code>dummy1</code>位于第4块，<code>dummy2</code>位于第6块，弱引用位于他们中间，正如我们期待的，其内容为0.</p>
<p>现在我们给它赋一个值看看，我将通过一个<code>do</code>块来控制<code>target</code>的生命周期：</p>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 因为<span class="keyword">target</span>是NSObject对象，所以需要改一下WeakReferer的<span class="keyword">target</span>属性的类型</div><div class="line"></div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">        let <span class="keyword">target</span> = NSObject()</div><div class="line">        referer.<span class="keyword">target</span> = <span class="keyword">target</span></div><div class="line">        <span class="built_in">print</span>(<span class="keyword">target</span>)</div><div class="line">        <span class="built_in">print</span>(refererDump())</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>打印结果为：</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;NSObject: <span class="number">0</span>x7fda<span class="number">6a21c6a0</span>&gt;</div><div class="line">    WeakReferer <span class="number">0</span>x00007fda6a000ad0: <span class="number">00000001050</span>a44a0 <span class="number">0000000200000004</span> <span class="number">1234321012343210</span> <span class="number">00007</span>fda<span class="number">6a21c6a0</span> abcdefabcdefabcd</div></pre></td></tr></table></figure>
<p>正如我们所看到的，<code>target</code>对象的指针直接存放在弱引用中。接下来，我们在<code>do</code>块结束之后再打印一下看看<code>target</code>释放后的情况：</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(<span class="name">refererDump</span>())</div></pre></td></tr></table></figure>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">WeakReferer <span class="number">0</span>x00007ffe<span class="number">32300060</span>: <span class="number">000000010</span>cfb44a0 <span class="number">0000000200000004</span> <span class="number">1234321012343210</span> <span class="number">0000000000000000</span> abcdefabcdefabcd</div></pre></td></tr></table></figure>
<p>被赋值为了<code>nil</code>.</p>
<p>接下来，我们再测试一下将<code>target</code>赋值为一个纯<code>Swift</code>对象，看是不是和<code>Objective-C</code>的<code>NSObject</code>一样，如下为纯<code>Swift``target</code>：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeakTarget</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>
<p>再试一下，看看结果怎样：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">let referer = WeakReferer()</div><div class="line">let refererDump = dumperFunc(referer)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(refererDump()</span></span>)</div><div class="line">do &#123;</div><div class="line">  let target = WeakTarget()</div><div class="line">  referer<span class="selector-class">.target</span> = target</div><div class="line">  print(refererDump())</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(refererDump()</span></span>)</div></pre></td></tr></table></figure>
<p><code>target</code>开始为<code>nil</code>，然后赋给它一个值：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SwiftLearn<span class="selector-class">.WeakReferer</span> <span class="number">0</span>x00006000002423a0: <span class="number">000000010538</span>bc50 <span class="number">0000000200000004</span> <span class="number">1234321012343210</span> <span class="number">0000000000000000</span> abcdefabcdefabcd</div><div class="line">SwiftLearn<span class="selector-class">.WeakReferer</span> <span class="number">0</span>x00006000002423a0: <span class="number">000000010538</span>bc50 <span class="number">0000000200000004</span> <span class="number">1234321012343210</span> <span class="number">000060800002</span>a9c2 abcdefabcdefabcd</div></pre></td></tr></table></figure>
<p>接下来，当<code>target</code>离开作用域，我们看看弱引用是否被赋<code>nil</code>：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SwiftLearn<span class="selector-class">.WeakReferer</span> <span class="number">0</span>x00006000002423a0: <span class="number">000000010538</span>bc50 <span class="number">0000000200000004</span> <span class="number">1234321012343210</span> <span class="number">000060800002</span>a9c2 abcdefabcdefabcd</div></pre></td></tr></table></figure>
<p>咦，怎么没被赋<code>nil</code>，难道是<code>target</code>没有被释放，产生了内存泄露？我们给<code>target</code>对象加上析构函数看看：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeakTarget</span> </span>&#123;</div><div class="line">        <span class="keyword">deinit</span> &#123; <span class="built_in">print</span>(<span class="string">"WeakTarget deinit"</span>) &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>运行之前的代码，看看结果：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SwiftLearn<span class="selector-class">.WeakReferer</span> <span class="number">0</span>x00006000002423a0: <span class="number">000000010538</span>bc50 <span class="number">0000000200000004</span> <span class="number">1234321012343210</span> <span class="number">0000000000000000</span> abcdefabcdefabcd</div><div class="line">SwiftLearn<span class="selector-class">.WeakReferer</span> <span class="number">0</span>x00006000002423a0: <span class="number">000000010538</span>bc50 <span class="number">0000000200000004</span> <span class="number">1234321012343210</span> <span class="number">000060800002</span>a9c2 abcdefabcdefabcd</div><div class="line">WeakTarget deinit</div><div class="line">SwiftLearn<span class="selector-class">.WeakReferer</span> <span class="number">0</span>x00006000002423a0: <span class="number">000000010538</span>bc50 <span class="number">0000000200000004</span> <span class="number">1234321012343210</span> <span class="number">000060800002</span>a9c2 abcdefabcdefabcd</div></pre></td></tr></table></figure>
<p>析构函数被调用了，但是弱引用并没有被赋<code>nil</code>，这跟我们印象中的<code>weak</code>运行过程有出入，我们接着访问一下该值，看是否会产生<code>crash</code>：</p>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">let referer = WeakReferer()</div><div class="line">    let refererDump = dumperFunc(referer)</div><div class="line">    <span class="built_in">print</span>(refererDump())</div><div class="line">    <span class="keyword">do</span> &#123;</div><div class="line">        let <span class="keyword">target</span> = WeakTarget()</div><div class="line">        referer.<span class="keyword">target</span> = <span class="keyword">target</span></div><div class="line">        <span class="built_in">print</span>(refererDump())</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">print</span>(refererDump())</div><div class="line">    <span class="built_in">print</span>(referer.<span class="keyword">target</span>)</div></pre></td></tr></table></figure>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">WeakReferer <span class="number">0x00007ff7aa20d</span>060: <span class="number">00000001047</span>a04a0 <span class="number">0000000200000004</span> <span class="number">1234321012343210</span> <span class="number">0000000000000000</span> abcdefabcdefabcd</div><div class="line">WeakReferer <span class="number">0x00007ff7aa20d</span>060: <span class="number">00000001047</span>a04a0 <span class="number">0000000200000004</span> <span class="number">1234321012343210</span> <span class="number">00007f</span>f7aa2157f0 abcdefabcdefabcd</div><div class="line">WeakTarget deinit</div><div class="line">WeakReferer <span class="number">0x00007ff7aa20d</span>060: <span class="number">00000001047</span>a04a0 <span class="number">0000000200000004</span> <span class="number">1234321012343210</span> <span class="number">00007f</span>f7aa2157f0 abcdefabcdefabcd</div><div class="line"><span class="literal">nil</span></div></pre></td></tr></table></figure>
<p>并没有产生<code>crash</code>，打印结果为<code>nil</code>。<br>让我们再仔细的分析一下，首先我们先给<code>WeakTarget</code>对象加上一个<code>dummy</code>属性，<code>dump</code>的时候能更方便的查看内存内容：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeakTarget</span> </span>&#123;</div><div class="line">        <span class="keyword">var</span> dummy = <span class="number">0x0123456789abcdef</span></div><div class="line"></div><div class="line">        <span class="keyword">deinit</span> &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"Weak target deinit"</span>)</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来，我们将使用新的代码执行相同的过程并<code>dump</code>出每一步的对象内容：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">let referer = WeakReferer()</div><div class="line">let refererDump = dumperFunc(referer)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(refererDump()</span></span>)</div><div class="line">let targetDump: (Void) -&gt; String</div><div class="line">do &#123;</div><div class="line">  let target = WeakTarget()</div><div class="line">  targetDump = dumperFunc(target)</div><div class="line">  print(targetDump())</div><div class="line">  </div><div class="line">  referer<span class="selector-class">.target</span> = target</div><div class="line">  </div><div class="line">  print(refererDump())</div><div class="line">  print(targetDump())</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(refererDump()</span></span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(targetDump()</span></span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(referer.target)</span></span></div><div class="line"><span class="function"><span class="title">print</span><span class="params">(refererDump()</span></span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(targetDump()</span></span>)</div></pre></td></tr></table></figure>
<p>我们一个一个看一下输出的内容。一开始，<code>target</code>属性为<code>nil</code>:</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SwiftLearn.WeakReferer <span class="number">0</span>x0000<span class="number">608000243450</span>: <span class="number">000000010</span>cec4c58 <span class="number">0000000200000004</span> <span class="number">1234321012343210</span> <span class="number">0000000000000000</span> abcdefabcdefabcd</div></pre></td></tr></table></figure>
<p>给<code>target</code>属性设置一个对象实例，<code>target</code>对象实例的内容为：</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SwiftLearn.WeakTarget <span class="number">0</span>x000060<span class="number">80000357e0</span>: <span class="number">000000010</span>cec4d48 <span class="number">0000000200000004</span> <span class="number">0123456789</span>abcdef</div></pre></td></tr></table></figure>
<p>将对象实例赋给<code>target</code>属性，我们能够看到<code>weak</code>属性已经被赋值了，赋的值为<code>target</code>对象地址+2字节，既对于<code>weak</code>指针，它并不直接指向对象的地址，而是指向对象的<code>side table</code>（下文会讲到<code>side table</code>的概念），<code>unowned``strong</code>引用会直接指向对象：</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SwiftLearn.WeakReferer <span class="number">0</span>x0000<span class="number">608000243450</span>: <span class="number">000000010</span>cec4c58 <span class="number">0000000200000004</span> <span class="number">1234321012343210</span> <span class="number">00006080000357</span>e2 abcdefabcdefabcd</div></pre></td></tr></table></figure>
<p><code>target</code>对象的内容块中有一个字段自增了2：</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SwiftLearn.WeakTarget <span class="number">0</span>x000060<span class="number">80000357e0</span>: <span class="number">000000010</span>cec4d48 <span class="number">0000000400000004</span> <span class="number">0123456789</span>abcdef</div></pre></td></tr></table></figure>
<p><code>target</code>被析构：</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">WeakTarget deinit</span></div></pre></td></tr></table></figure>
<p>我们看到引用的对象依然保持着<code>target</code>的指针：</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SwiftLearn.WeakReferer <span class="number">0</span>x0000<span class="number">608000243450</span>: <span class="number">000000010</span>cec4c58 <span class="number">0000000200000004</span> <span class="number">1234321012343210</span> <span class="number">00006080000357</span>e2 abcdefabcdefabcd</div></pre></td></tr></table></figure>
<p>看上去好像<code>target</code>依然还存活着，我们看到<code>target</code>对象的有一个字段减了2：</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SwiftLearn.WeakTarget <span class="number">0</span>x000060<span class="number">80000357e0</span>: <span class="number">000000010</span>cec4d48 <span class="number">0000000200000002</span> <span class="number">0123456789</span>abcdef</div></pre></td></tr></table></figure>
<p>访问一下<code>target</code>属性，此时会产生<code>nil</code>，尽管内容中的指针并没有被赋<code>nil</code>:</p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="literal">nil</span></div></pre></td></tr></table></figure>
<p>我们再打印一下<code>referer</code>对象的内容，发现访问完<code>target</code>属性后，<code>target</code>字段被修改了，赋为了<code>nil</code>：</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SwiftLearn.WeakReferer <span class="number">0</span>x0000<span class="number">608000243450</span>: <span class="number">000000010</span>cec4c58 <span class="number">0000000200000004</span> <span class="number">1234321012343210</span> <span class="number">0000000000000000</span> abcdefabcdefabcd</div></pre></td></tr></table></figure>
<p><code>target</code>对象现在完全被清除了：</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SwiftLearn.WeakTarget <span class="number">0</span>x000060<span class="number">80000357e0</span>: <span class="number">000000010</span>cec3370 <span class="number">0000000200000008</span> <span class="number">000000010</span>cebe200</div></pre></td></tr></table></figure>
<p>从上面的运行过程，我们发现某些字段会被增/减，我们进行一些测试，来看一下有没有规律：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> target = <span class="type">WeakTarget</span>()</div><div class="line"><span class="keyword">let</span> targetDump = dumperFunc(target)</div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">  <span class="built_in">print</span>(targetDump())</div><div class="line">  <span class="keyword">weak</span> <span class="keyword">var</span> a = target</div><div class="line">  <span class="built_in">print</span>(targetDump())</div><div class="line">  <span class="keyword">weak</span> <span class="keyword">var</span> b = target</div><div class="line">  <span class="built_in">print</span>(targetDump())</div><div class="line">  <span class="keyword">weak</span> <span class="keyword">var</span> <span class="built_in">c</span> = target</div><div class="line">  <span class="built_in">print</span>(targetDump())</div><div class="line">  <span class="keyword">weak</span> <span class="keyword">var</span> d = target</div><div class="line">  <span class="built_in">print</span>(targetDump())</div><div class="line">  <span class="keyword">weak</span> <span class="keyword">var</span> e = target</div><div class="line">  <span class="built_in">print</span>(targetDump())</div><div class="line">  </div><div class="line">  <span class="keyword">var</span> f = target</div><div class="line">  <span class="built_in">print</span>(targetDump())</div><div class="line">  <span class="keyword">var</span> g = target</div><div class="line">  <span class="built_in">print</span>(targetDump())</div><div class="line">  <span class="keyword">var</span> h = target</div><div class="line">  <span class="built_in">print</span>(targetDump())</div><div class="line">  <span class="keyword">var</span> i = target</div><div class="line">  <span class="built_in">print</span>(targetDump())</div><div class="line">  <span class="keyword">var</span> j = target</div><div class="line">  <span class="built_in">print</span>(targetDump())</div><div class="line">  <span class="keyword">var</span> k = target</div><div class="line">  <span class="built_in">print</span>(targetDump())</div><div class="line">&#125;</div><div class="line"><span class="built_in">print</span>(targetDump())</div></pre></td></tr></table></figure>
<p>打印结果为：</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">SwiftLearn.WeakTarget <span class="number">0</span>x000060<span class="number">80000395a0</span>: <span class="number">000000010</span>e8aad40 <span class="number">0000000200000004</span> <span class="number">0123456789</span>abcdef</div><div class="line">SwiftLearn.WeakTarget <span class="number">0</span>x000060<span class="number">80000395a0</span>: <span class="number">000000010</span>e8aad40 <span class="number">0000000400000004</span> <span class="number">0123456789</span>abcdef</div><div class="line">SwiftLearn.WeakTarget <span class="number">0</span>x000060<span class="number">80000395a0</span>: <span class="number">000000010</span>e8aad40 <span class="number">0000000600000004</span> <span class="number">0123456789</span>abcdef</div><div class="line">SwiftLearn.WeakTarget <span class="number">0</span>x000060<span class="number">80000395a0</span>: <span class="number">000000010</span>e8aad40 <span class="number">0000000800000004</span> <span class="number">0123456789</span>abcdef</div><div class="line">SwiftLearn.WeakTarget <span class="number">0</span>x000060<span class="number">80000395a0</span>: <span class="number">000000010</span>e8aad40 <span class="number">0000000</span>a<span class="number">00000004</span> <span class="number">0123456789</span>abcdef</div><div class="line">SwiftLearn.WeakTarget <span class="number">0</span>x000060<span class="number">80000395a0</span>: <span class="number">000000010</span>e8aad40 <span class="number">0000000</span>c<span class="number">00000004</span> <span class="number">0123456789</span>abcdef</div><div class="line">SwiftLearn.WeakTarget <span class="number">0</span>x000060<span class="number">80000395a0</span>: <span class="number">000000010</span>e8aad40 <span class="number">0000000</span>c<span class="number">00000008</span> <span class="number">0123456789</span>abcdef</div><div class="line">SwiftLearn.WeakTarget <span class="number">0</span>x000060<span class="number">80000395a0</span>: <span class="number">000000010</span>e8aad40 <span class="number">0000000</span>c0000000c <span class="number">0123456789</span>abcdef</div><div class="line">SwiftLearn.WeakTarget <span class="number">0</span>x000060<span class="number">80000395a0</span>: <span class="number">000000010</span>e8aad40 <span class="number">0000000</span>c<span class="number">00000010</span> <span class="number">0123456789</span>abcdef</div><div class="line">SwiftLearn.WeakTarget <span class="number">0</span>x000060<span class="number">80000395a0</span>: <span class="number">000000010</span>e8aad40 <span class="number">0000000</span>c<span class="number">00000014</span> <span class="number">0123456789</span>abcdef</div><div class="line">SwiftLearn.WeakTarget <span class="number">0</span>x000060<span class="number">80000395a0</span>: <span class="number">000000010</span>e8aad40 <span class="number">0000000</span>c<span class="number">00000018</span> <span class="number">0123456789</span>abcdef</div><div class="line">SwiftLearn.WeakTarget <span class="number">0</span>x000060<span class="number">80000395a0</span>: <span class="number">000000010</span>e8aad40 <span class="number">0000000</span>c0000001c <span class="number">0123456789</span>abcdef</div><div class="line">SwiftLearn.WeakTarget <span class="number">0</span>x000060<span class="number">80000395a0</span>: <span class="number">000000010</span>e8aad40 <span class="number">0000000200000004</span> <span class="number">0123456789</span>abcdef</div><div class="line">WeakTarget deinit</div></pre></td></tr></table></figure>
<p>从结果，我们能够看到，对于每一个<code>weak</code>引用，第2个块中的第一个数会自增2；而每一个<code>strong</code>引用，第二个数会自增4.</p>
<p>总结一下：</p>
<ul>
<li>弱指针看起来就是普通的指针。</li>
<li>当一个弱引用对象的<code>deinit</code>执行后，对象并没有被释放，且弱引用指针也没有被赋<code>nil</code>。</li>
<li>当弱引用执行完<code>deinit</code>后，访问弱引用对象，则对象指针会被赋<code>nil</code>,且目标对象被释放。</li>
<li>弱引用对象对于每一个弱引用会包含一个引用计数（<code>unowned</code>计数和<code>weak</code>计数为同一个），且与强引用计数分开统计。 </li>
</ul>
<h2 id="Swift代码"><a href="#Swift代码" class="headerlink" title="Swift代码"></a>Swift代码</h2><hr>
<p>接下来，我们看一下<code>Swift</code>实现的源代码。<br><code>Swift</code>标准库表示一个在堆上的对象的结构体为：</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// The Swift3 heap-object header.</span></div><div class="line"><span class="keyword">struct</span> HeapObject &#123;</div><div class="line">  <span class="comment">/// This is always a valid pointer to a metadata object.</span></div><div class="line">  HeapMetadata <span class="keyword">const</span> *metadata;</div><div class="line"></div><div class="line">  SWIFT_HEAPOBJECT_NON_OBJC_MEMBERS;</div><div class="line">  <span class="comment">// <span class="doctag">FIXME:</span> allocate two words of metadata on 32-bit platforms</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></div><div class="line">  HeapObject() = <span class="built_in">default</span>;</div><div class="line"></div><div class="line">  <span class="comment">// Initialize a HeapObject header as appropriate for a newly-allocated object.</span></div><div class="line">  <span class="keyword">constexpr</span> HeapObject(HeapMetadata <span class="keyword">const</span> *newMetadata) </div><div class="line">    : metadata(newMetadata)</div><div class="line">    , refCounts(InlineRefCounts::Initialized)</div><div class="line">  &#123; &#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><code>Swift</code>的<code>metadata</code>字段等同于<code>Objective-C</code>的<code>isa</code>字段，事实上，他们是兼容的。接着，使用了一个宏来定义字段，该字段用来管理引用计数：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">///Swift默认为InlineRefCounts，当有弱引用指向该对象时，InlineRefCounts会变为SideTableRefCounts</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SWIFT_HEAPOBJECT_NON_OBJC_MEMBERS       \</span></div><div class="line">  InlineRefCounts refCounts</div></pre></td></tr></table></figure>
<p>Swift增加引用计数的方法如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Increment the reference count.</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">increment</span><span class="params">(<span class="keyword">uint32_t</span> inc = <span class="number">1</span>)</span> </span>&#123;</div><div class="line">  <span class="keyword">auto</span> oldbits = refCounts.load(SWIFT_MEMORY_ORDER_CONSUME);</div><div class="line">  RefCountBits newbits;</div><div class="line">  <span class="keyword">do</span> &#123;</div><div class="line">    newbits = oldbits;</div><div class="line">    <span class="keyword">bool</span> fast = newbits.incrementStrongExtraRefCount(inc);</div><div class="line">    <span class="keyword">if</span> (!fast)</div><div class="line">      <span class="keyword">return</span> incrementSlow(oldbits, inc);</div><div class="line">  &#125; <span class="keyword">while</span> (!refCounts.compare_exchange_weak(oldbits, newbits,</div><div class="line">                                            <span class="built_in">std</span>::memory_order_relaxed));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于引用计数的管理有两种类型<code>InlineRefCounts</code>、<code>SideTableRefCounts</code>，当对象只包含<code>strong</code>或<code>unowned</code>引用时，使用<code>InlineRefCounts</code>进行计数管理，如果对象拥有了<code>weak</code>引用，则会使用<code>SideTableRefCounts</code>来管理计数。所以如上增加引用计数的函数，会考虑两种情况，<code>fast</code>对应<code>InlineRefCounts</code>，<code>slow</code>对应<br><code>SideTableRefCounts</code>，为了避免竞态条件，使用了<code>compare_exchange_weak</code>来进行赋值。</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class">HeapObject </span>&#123;</div><div class="line">  isa</div><div class="line">  <span class="class">InlineRefCounts </span>&#123;</div><div class="line">    atomic<span class="params">&lt;InlineRefCountBits&gt;</span> &#123;</div><div class="line">      strong RC + unowned RC + flags</div><div class="line">      OR</div><div class="line">      HeapObjectSideTableEntry*</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class">HeapObjectSideTableEntry </span>&#123;</div><div class="line">  <span class="class">SideTableRefCounts </span>&#123;</div><div class="line">    object pointer</div><div class="line">    atomic<span class="params">&lt;SideTableRefCountBits&gt;</span> &#123;</div><div class="line">      strong RC + unowned RC + weak RC + flags</div><div class="line">    &#125;</div><div class="line">  &#125;   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来，看一下<code>weak</code>引用自减计数的函数操作过程，函数内调用<code>decrementWeakShouldCleanUp</code>来进行位数的操作，其返回一个<code>bool</code>值，既当<code>weak</code>、<code>strong</code>、<code>unowned</code>计数都变为0时，<code>bool</code>值返回<code>true</code>，说明可以收回内存了，既调用<code>delete</code>释放内存。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">decrementWeak</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="comment">// <span class="doctag">FIXME:</span> assertions</span></div><div class="line">  <span class="comment">// <span class="doctag">FIXME:</span> optimize barriers</span></div><div class="line">  <span class="keyword">bool</span> cleanup = refCounts.decrementWeakShouldCleanUp();</div><div class="line">  <span class="keyword">if</span> (!cleanup)</div><div class="line">    <span class="keyword">return</span>;</div><div class="line"></div><div class="line">  <span class="comment">// Weak ref count is now zero. Delete the side table entry.</span></div><div class="line">  <span class="comment">// FREED -&gt; DEAD</span></div><div class="line">  assert(refCounts.getUnownedCount() == <span class="number">0</span>);</div><div class="line">  <span class="keyword">delete</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此时，我们应该就比较清楚了，即使<code>strong</code>或<code>unowned</code>的计数为0，如果还存在<code>weak</code>弱引用，<br>那么对象也不会被释放。</p>
<p>接下来，我们可以看一下加载弱引用的过程，<code>Swift</code>通过<code>HeapObject *swift::swift_weakTakeStrong(WeakReference *ref)</code>函数来实现，该函数通过间接调用，最终调用<code>nativeTakeStrongFromBits</code>函数，该函数内部首先会调用<code>getNativeOrNull</code>方法，该方法会从对象的<code>side table</code>中查询对象的计数，当没有<code>strong</code>引用时，说明该对象已经处于<code>DEINITING</code>状态，函数会返回<code>nullptr</code>，否则将调用<code>tryRetain</code>函数来尝试<code>strong</code>对象。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function">HeapObject *<span class="title">nativeTakeStrongFromBits</span><span class="params">(WeakReferenceBits bits)</span> </span>&#123;</div><div class="line">  <span class="keyword">auto</span> side = bits.getNativeOrNull();</div><div class="line">  <span class="keyword">if</span> (side) &#123;</div><div class="line">    side-&gt;decrementWeak();</div><div class="line">    <span class="keyword">return</span> side-&gt;tryRetain();</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当对象实例的<code>deinit()</code>方法被调用时，内部会调用<code>swift_deallocObject</code>函数，而它会通过调用<code>canBeFreedNow</code>函数来判断是否需要释放内存，既满足没有<code>side table</code>，<code>unowned</code>引用为1，<code>strong</code>引用计数为0。</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">bool </span>canBeFreedNow() const &#123;</div><div class="line">auto <span class="keyword">bits </span>= refCounts.load(<span class="keyword">SWIFT_MEMORY_ORDER_CONSUME);</span></div><div class="line">return (!<span class="keyword">bits.hasSideTable() </span>&amp;&amp;</div><div class="line">          <span class="keyword">bits.getIsDeiniting() </span>&amp;&amp;</div><div class="line">          <span class="keyword">bits.getStrongExtraRefCount() </span>== <span class="number">0</span> &amp;&amp;</div><div class="line">          <span class="keyword">bits.getUnownedRefCount() </span>== <span class="number">1</span>)<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>综上，如果还存在<code>weak</code><br>弱引用，那么肯定还有<code>side table</code>表，即使没有<code>strong</code>引用，也不会被释放。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><hr>
<ol>
<li>弱引用指向对象实例的<code>side table</code>地址。</li>
<li>与<code>Objective-C</code>管理引用计数的方式不同，<code>Swift</code>的弱引用计数与<code>strong</code>计数一起管理。</li>
<li><code>Swift</code>针对对象的析构和对象的释放进行了解耦，一个对象被析构后，会释放它的外部资源，但是有可能不会释放对象本身的内存。</li>
<li>当<code>Swift</code>对象的<code>strong</code>引用计数变为0但是<code>weak</code>计数大于0时，对象会被析构但是不会被释放内存。</li>
<li>当加载一个弱引用时，运行时会检查<code>target</code>的状态<br>，如果<code>target</code>已经是僵尸对象，那么会赋空<code>weak</code>引用，<code>weak</code>计数减一，并返回<code>nil</code>,这个过程是安全的，当<code>weak</code>引用计数变为0时，僵尸对象内存将被释放。</li>
</ol>
<p>最后总结一下<code>Swift</code>与<code>Objective-C</code>的区别：</p>
<ul>
<li><code>Swift</code>不需要维护<code>weak</code>列表，这可以简化代码和提升性能。</li>
<li>对于<code>Swift</code>的<code>weak</code>引用，实例对象会在<code>strong</code>引用计数变为0时，内存依然保留，直到所有的<code>weak</code>引用离开作用域。不过这个影响是很小的，因为虽然对象分配的内存依然保留，但是它所有的外部资源（如<code>Array</code>、<code>Dictionary</code>属性）会在<code>strong</code>引用计数变为0时被释放。</li>
<li>由于<code>Swift</code>的<code>weak</code>创建后，对象的引用计数管理会从<code>InlineRefCounts</code>替换为<code>SideTableRefCounts</code>，这也会带来一定的开销，所以如果可以，尽量使用<code>unowned</code>,<code>unowned</code>有点类似于<code>Objective-C</code>的<code>__unsafe_unretained</code>，如果<code>unowned</code>指向僵尸对象后再访问，会产生未定义行为。</li>
</ul>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><hr>
<ol>
<li><a href="https://github.com/apple/swift/blob/7913e9821b814956d243e4e03cfe9ddc0e325bc2/stdlib/public/SwiftShims/HeapObject.h" target="_blank" rel="external">https://github.com/apple/swift/blob/7913e9821b814956d243e4e03cfe9ddc0e325bc2/stdlib/public/SwiftShims/HeapObject.h</a></li>
<li><a href="https://github.com/apple/swift/blob/860252fab41392b7de3218e58f7542cb1dc1ce16/stdlib/public/runtime/WeakReference.h" target="_blank" rel="external">https://github.com/apple/swift/blob/860252fab41392b7de3218e58f7542cb1dc1ce16/stdlib/public/runtime/WeakReference.h</a></li>
<li><a href="https://github.com/apple/swift/blob/b7d78853112c1279fc7bc5b85853779040f13703/stdlib/public/SwiftShims/RefCount.h" target="_blank" rel="external">https://github.com/apple/swift/blob/b7d78853112c1279fc7bc5b85853779040f13703/stdlib/public/SwiftShims/RefCount.h</a></li>
<li><a href="https://github.com/apple/swift/blob/b7d78853112c1279fc7bc5b85853779040f13703/stdlib/public/SwiftShims/RefCount.h#L123-#L187" target="_blank" rel="external">Swift对象生命周期状态机</a></li>
<li><a href="https://www.mikeash.com/pyblog/friday-qa-2015-12-11-swift-weak-references.html" target="_blank" rel="external">https://www.mikeash.com/pyblog/friday-qa-2015-12-11-swift-weak-references.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[GCD队列管理之YYDispatchQueuePool]]></title>
      <url>https://zhongwuzw.github.io/2017/06/05/GCD%E9%98%9F%E5%88%97%E7%AE%A1%E7%90%86%E4%B9%8BYYDispatchQueuePool/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p><code>iOS</code>中，我们经常使用<code>GCD</code>来进行并发操作，我们并不需要关心线程的管理，<code>Dispatch Queue</code>会自动帮我们处理线程的创建和释放，在极大的简化并发操作的同时，某些情况下，<code>Dispatch Queue</code>的滥用可能会导致应用挂起，如向并发队列中添加阻塞的<code>Block</code>，阻塞的<code>Block</code>会导致系统创建更多的线程来处理任务，而<code>GCD</code>线程池的最大线程数为64个，所以一旦达到最大值，应用将挂起。<br>接下来，我将列出一些解决方案，来更好的使用<code>Dispatch Queue</code>。</p>
<h2 id="YYDispatchQueue"><a href="#YYDispatchQueue" class="headerlink" title="YYDispatchQueue"></a>YYDispatchQueue</h2><hr>
<p><a href="https://github.com/ibireme/YYDispatchQueuePool" target="_blank" rel="external">YYDispatchQueue</a>的主要思想是使用串行队列来替换并发队列，可以为指定的<code>NSQualityOfService</code>创建一个队列池，由<code>YYDispatchQueuePool</code>对象来进行管理，每一种<code>NSQualityOfService</code>最多可以创建32个串行队列，通过<code>- (dispatch_queue_t)queue;</code>方法来获取可用队列，其采用<code>Round Robin</code>轮询算法。</p>
<p><img src="http://oc54pu02q.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-06-05%20%E4%B8%8B%E5%8D%8811.28.12.png" alt=""></p>
<p>除了可以创建队列池来管理并发外，还可以通过<code>C</code>的全局函数（<code>dispatch_queue_t YYDispatchQueueGetForQOS(NSQualityOfService qos)</code>）来获取特定的<code>NSQualityOfService</code>串行队列，队列由全局的队列池来管理，每一种<code>NSQualityOfService</code>的串行队列数与核数相同，这样可以尽可能的减少线程之间的上下文切换。</p>
<a id="more"></a>
<p><code>YYDispatchQueuePool</code>对象使用<code>YYDispatchContext</code> <code>struct</code>来管理队列池，代码目前还存在内存泄露的问题，因为<code>struct</code>是在堆上分配的内存，最后使用<code>YYDispatchContextRelease</code>释放<code>context</code>时只释放了结构体成员的内存空间，而没有释放结构体自己申请的空间，解决方法如下注释，加上<code>free(context)</code>即可。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name;</div><div class="line">    <span class="keyword">void</span> **queues;</div><div class="line">    <span class="keyword">uint32_t</span> queueCount;</div><div class="line">    <span class="keyword">int32_t</span> counter;</div><div class="line">&#125; YYDispatchContext;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">YYDispatchContextRelease</span><span class="params">(YYDispatchContext *context)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!context) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span> (context-&gt;queues) &#123;</div><div class="line">        <span class="keyword">for</span> (NSUInteger i = <span class="number">0</span>; i &lt; context-&gt;queueCount; i++) &#123;</div><div class="line">            <span class="keyword">void</span> *queuePointer = context-&gt;queues[i];</div><div class="line">            <span class="keyword">dispatch_queue_t</span> <span class="built_in">queue</span> = (<span class="number">__b</span>ridge_transfer <span class="keyword">dispatch_queue_t</span>)(queuePointer);</div><div class="line">            <span class="keyword">const</span> <span class="keyword">char</span> *name = dispatch_queue_get_label(<span class="built_in">queue</span>);</div><div class="line">            <span class="keyword">if</span> (name) <span class="built_in">strlen</span>(name); <span class="comment">// avoid compiler warning</span></div><div class="line">            <span class="built_in">queue</span> = nil;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">free</span>(context-&gt;queues);</div><div class="line">        context-&gt;queues = <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (context-&gt;name) <span class="built_in">free</span>((<span class="keyword">void</span> *)context-&gt;name);</div><div class="line">    <span class="comment">//内存泄露，需添加  free(context);</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="NSOperationQueue"><a href="#NSOperationQueue" class="headerlink" title="NSOperationQueue"></a>NSOperationQueue</h2><hr>
<p>使用<code>NSOperationQueue</code>，设置<code>maxConcurrentOperationCount</code>来控制并发量。</p>
<h2 id="Dispatch-Semaphores"><a href="#Dispatch-Semaphores" class="headerlink" title="Dispatch Semaphores"></a>Dispatch Semaphores</h2><hr>
<p>使用<code>Dispatch Queue</code>时，可以用信号量来控制并发的数量，<code>GCD</code>提供信号量的支持，<code>dispatch_semaphore_t</code>用来表示信号量。在往队列添加任务之前，可以使用<code>dispatch_semaphore_wait</code>来获取信号量，成功获取后即可往队列中添加任务，当任务完成时，使用<code>dispatch_semaphore_signal</code>来释放信号量。</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 示例代码需要封装一下，不要直接在主线程或次级线程中直接调用dispatch_semaphore_wait，可能会引发UI挂起</span></div><div class="line"><span class="params">...</span></div><div class="line">dispatch_semaphore_t concurrencyLimitingSemaphore = dispatch_semaphore_create(limit);</div><div class="line"><span class="params">...</span></div><div class="line"></div><div class="line">dispatch_semaphore_wait(concurrencyLimitingSemaphore, DISPATCH_TIME_FOREVER);</div><div class="line">dispatch_async(someConcurrentQueue, ^&#123;</div><div class="line">    <span class="comment">/* work goes here */</span></div><div class="line">    dispatch_semaphore_signal(concurrencyLimitingSemaphore);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><hr>
<ol>
<li><a href="https://stackoverflow.com/questions/7213845/number-of-threads-created-by-gcd" target="_blank" rel="external">https://stackoverflow.com/questions/7213845/number-of-threads-created-by-gcd</a></li>
<li><a href="https://github.com/ibireme/YYDispatchQueuePool" target="_blank" rel="external">https://github.com/ibireme/YYDispatchQueuePool</a></li>
<li><a href="https://developer.apple.com/library/content/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html#//apple_ref/doc/uid/TP40008091-CH102-SW24" target="_blank" rel="external">https://developer.apple.com/library/content/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html#//apple_ref/doc/uid/TP40008091-CH102-SW24</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS浏览器-WebBrowser]]></title>
      <url>https://zhongwuzw.github.io/2017/05/26/iOS%E6%B5%8F%E8%A7%88%E5%99%A8-WebBrowser/</url>
      <content type="html"><![CDATA[<p>一款用于网页浏览的APP（Web Browser For iOS)。<a href="https://github.com/zhongwuzw/WebBrowser" target="_blank" rel="external">Github地址</a></p>
<h2 id="Features-功能"><a href="#Features-功能" class="headerlink" title="Features - 功能"></a>Features - 功能</h2><ol>
<li>多Tab页浏览(multi-tab browsing)</li>
<li>冷启动恢复浏览记录，包括当前页及前进后退页面(session restore, includes current page and backforward list)</li>
<li>书签、历史记录管理(bookmark、history manage)</li>
<li>页内查找(find in page)</li>
<li>点击标题栏进行页面访问或搜索(tap the title bar to  input url for surf or key to search)</li>
<li>自动监控剪切板<code>URL</code>，可在新窗口中打开</li>
</ol>
<h2 id="Usage-用法"><a href="#Usage-用法" class="headerlink" title="Usage - 用法"></a>Usage - 用法</h2><ol>
<li><code>clone</code> or download zip file.</li>
<li>Run command <code>carthage update --platform iOS</code></li>
<li>Just run WebBrowser.xcodeproj</li>
</ol>
<h2 id="Requirements-依赖"><a href="#Requirements-依赖" class="headerlink" title="Requirements - 依赖"></a>Requirements - 依赖</h2><ul>
<li>iOS 8.0 or higher</li>
<li>ARC</li>
<li><a href="https://github.com/Carthage/Carthage" target="_blank" rel="external">Carthage</a></li>
</ul>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><h4 id="1-Home-Page-主页-："><a href="#1-Home-Page-主页-：" class="headerlink" title="1. Home Page (主页)："></a>1. Home Page (主页)：</h4><p align="center"><br>  <img src="https://raw.githubusercontent.com/zhongwuzw/WebBrowser/master/images/home_scroll.gif" alt="home page"><br></p>


<h4 id="2-Multi-tab-多窗口-："><a href="#2-Multi-tab-多窗口-：" class="headerlink" title="2. Multi-tab (多窗口)："></a>2. Multi-tab (多窗口)：</h4><p align="center"><br>  <img src="https://raw.githubusercontent.com/zhongwuzw/WebBrowser/master/images/home_tab_switch.gif" alt="tab"><br></p>

<p align="center"><br>  <img src="https://raw.githubusercontent.com/zhongwuzw/WebBrowser/master/images/tab_manage.gif" alt="tab"><br></p>

<p align="center"><br>  <img src="https://raw.githubusercontent.com/zhongwuzw/WebBrowser/master/images/multi_window_switch.gif" alt="tab"><br></p>

<h4 id="3-Search-搜索-："><a href="#3-Search-搜索-：" class="headerlink" title="3. Search (搜索)："></a>3. Search (搜索)：</h4><p align="center"><br>  <img src="https://raw.githubusercontent.com/zhongwuzw/WebBrowser/master/images/home_search.gif" alt="search"><br></p>

<h4 id="4-No-Image-Mode-无图模式"><a href="#4-No-Image-Mode-无图模式" class="headerlink" title="4. No Image Mode (无图模式)"></a>4. No Image Mode (无图模式)</h4><p align="center"><br>  <img src="https://raw.githubusercontent.com/zhongwuzw/WebBrowser/master/images/no-image-mode.gif" alt="no image mode"><br></p>

<h4 id="5-History-历史"><a href="#5-History-历史" class="headerlink" title="5. History (历史)"></a>5. History (历史)</h4><ol>
<li>Long Press to select options. (长按记录可弹出选项按钮)</li>
<li>Tap to open history in current window.(点击记录会在当前窗口打开历史页面)<p align="center"><br><img src="https://raw.githubusercontent.com/zhongwuzw/WebBrowser/master/images/history.gif" alt="history"><br></p>

</li>
</ol>
<h4 id="6-Favorite-收藏"><a href="#6-Favorite-收藏" class="headerlink" title="6. Favorite (收藏)"></a>6. Favorite (收藏)</h4><h5 id="In-non-editing-mode-在非编辑模式下操作"><a href="#In-non-editing-mode-在非编辑模式下操作" class="headerlink" title="In non-editing mode (在非编辑模式下操作)"></a>In non-editing mode (在非编辑模式下操作)</h5><ol>
<li><p>Long press on directory to edit directory name in non-editing mode.(长按目录来编辑目录名字)</p>
<p align="center"><br><img src="https://raw.githubusercontent.com/zhongwuzw/WebBrowser/master/images/bookmark_edit_long_section.gif" alt="favorite"><br></p>
</li>
<li><p>Long press on bookmark item to edit bookmark’s url, name, directory in non-editing mode.(长按书签项来编辑书签的地址、名字、以及所在目录)</p>
<p align="center"><br><img src="https://raw.githubusercontent.com/zhongwuzw/WebBrowser/master/images/bookmark_long_edit_item.gif" alt="favorite"><br></p>

</li>
</ol>
<h5 id="In-editing-mode-在编辑模式下"><a href="#In-editing-mode-在编辑模式下" class="headerlink" title="In editing mode (在编辑模式下)"></a>In editing mode (在编辑模式下)</h5><ol>
<li><p>reorder, delete directory in editing mode.(删除、排序目录)</p>
<p align="center"><br><img src="https://raw.githubusercontent.com/zhongwuzw/WebBrowser/master/images/bookmark_edit_section.gif" alt="favorite"><br></p>
</li>
<li><p>click “新文件夹” button to add new directory in editing mode.(点击”新文件夹”按钮来创建新的目录)</p>
<p align="center"><br><img src="https://raw.githubusercontent.com/zhongwuzw/WebBrowser/master/images/bookmark_add_section.gif" alt="favorite"><br></p>
</li>
<li><p>reorder, delete bookmark in editing mode.(删除、排序书签)</p>
<p align="center"><br><img src="https://raw.githubusercontent.com/zhongwuzw/WebBrowser/master/images/bookmark_edit_item.gif" alt="favorite"><br></p>
</li>
<li><p>add new bookmark.(添加新书签)</p>
<p align="center"><br><img src="https://raw.githubusercontent.com/zhongwuzw/WebBrowser/master/images/bookmark_add.gif" alt="favorite"><br></p>

</li>
</ol>
<h4 id="7-find-in-page-页内查找"><a href="#7-find-in-page-页内查找" class="headerlink" title="7. find in page (页内查找)"></a>7. find in page (页内查找)</h4><p align="center"><br>  <img src="https://raw.githubusercontent.com/zhongwuzw/WebBrowser/master/images/findinpage.gif" alt="find in page"><br></p>

<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>The MIT License (MIT)</p>
<p>Copyright (c) 2017 Zhong Wu</p>
<p>Permission is hereby granted, free of charge, to any person obtaining a copy<br>of this software and associated documentation files (the “Software”), to deal<br>in the Software without restriction, including without limitation the rights<br>to use, copy, modify, merge, publish, distribute, sublicense, and/or sell<br>copies of the Software, and to permit persons to whom the Software is<br>furnished to do so, subject to the following conditions:</p>
<p>The above copyright notice and this permission notice shall be included in all<br>copies or substantial portions of the Software.</p>
<p>THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR<br>IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,<br>FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE<br>AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER<br>LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,<br>OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE<br>SOFTWARE.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[WWDC-Session406-优化App启动时间]]></title>
      <url>https://zhongwuzw.github.io/2017/05/01/WWDC-Session406-%E4%BC%98%E5%8C%96App%E5%90%AF%E5%8A%A8%E6%97%B6%E9%97%B4/</url>
      <content type="html"><![CDATA[<h2 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h2><hr>
<h3 id="Mach-O"><a href="#Mach-O" class="headerlink" title="Mach-O"></a>Mach-O</h3><h4 id="Mach-O相关术语"><a href="#Mach-O相关术语" class="headerlink" title="Mach-O相关术语"></a>Mach-O相关术语</h4><p><code>Mach-O</code>为<code>Mach Object</code>文件格式的缩写，它是一种用于可执行文件，目标代码，动态库，内核存储的文件格式。它包括多种文件类型：</p>
<ul>
<li><code>Executable</code>(可执行文件)：App的主二进制文件</li>
<li><code>Dylib</code>：动态库（如<code>DSO</code>、<code>DLL</code>)</li>
<li><code>Bundle</code>：不能被链接的动态库，只能通过<code>dlopen()</code>，用于<code>Mac OS</code>。</li>
</ul>
<p><code>Image</code>：可以是可执行文件、动态库或者<code>bundle</code>。<br><code>Framework</code>：动态库，包含资源和头文件。</p>
<h4 id="Mach-O-Image文件"><a href="#Mach-O-Image文件" class="headerlink" title="Mach-O Image文件"></a>Mach-O Image文件</h4><p>一个<code>Mach-O</code>文件由3部分组成：<code>Header</code>、<code>Load commands</code>、<code>Raw segment data</code>。<code>Header</code>描述了文件的目标架构等信息，如x86-64,PPC；<code>Load commands</code>列出了文件的逻辑结构及文件在虚拟内存中的布局;<code>Raw segment data</code>包含了在<code>Load commands</code>中指出的<code>segment</code>(<code>段</code>)。在<code>Mach-O</code>文件中，我们把<code>Header</code>、<code>Load commands</code>放在了<code>__TEXT</code> <code>segment</code>(<code>段</code>)的开头，即第一个<code>segment</code>(<code>段</code>)的开头。每一个<code>段</code>由多个<code>page</code>(<code>页</code>)组成，<code>段</code>的大小为<code>页</code>大小的整数倍。如下图，<code>TEXT段</code>占3<code>页</code>，<code>DATA</code>、<code>LINKEDIT</code>分别占1<code>页</code>。<code>页</code>的大小取决于硬件，在<code>arm64</code>下，<code>页</code>大小为16K，其它则为4K。<br><img src="https://raw.githubusercontent.com/zhongwuzw/zhongwuzw.github.io.resource/master/images/blog/start_up_optimize_1.png" alt=""></p>
<p>我们还可以从<code>section</code>(节)的角度来理解<code>段</code>,编译器对<code>section</code>是透明的，<code>section</code>仅仅是一个<code>段</code>的子区间，它没有任何的大小约束，但是<code>section</code>之间不会产生重叠。<br><img src="https://raw.githubusercontent.com/zhongwuzw/zhongwuzw.github.io.resource/master/images/blog/start_up_optimize_2.png" alt=""></p>
<p>事实上，每一个二进制文件都包含<code>TEXT</code>、<code>DATA</code>、<code>LINKEDIT</code>这3个通用的<code>段</code>，<code>TEXT</code>位于文件的开始，它包括<code>Mach header</code>，机器指令，代码以及只读常量如C字符串，<code>DATA段</code>是可读写的，其包括所有的全局变量，静态变量等。<code>LINKEDIT</code>包含加载程序的<code>meta data</code>(元数据)，如符号，字符串，重定向表条目，供动态链接器使用。</p>
<a id="more"></a>
<h4 id="Mach-O-Universal-Files"><a href="#Mach-O-Universal-Files" class="headerlink" title="Mach-O Universal Files"></a>Mach-O Universal Files</h4><p>当我们在编译iOS应用时，会针对不同的设备架构编译出不同的Mach-O文件，如下图，产生64位（arm64）、32位（如armv7s)两种架构的<code>Mach-O</code>文件，之后将这两个文件合并成一个文件，这个文件就叫<code>Mach-O universal file</code>。该文件包含一个<code>Fat header</code>，包含所有架构的列表，且对应在文件中的偏移量。<code>header</code>占1<code>页</code>空间，下文，将会讲述为什么需要占1<code>页</code>空间，以及涉及到的虚拟内存的知识。<br><img src="https://raw.githubusercontent.com/zhongwuzw/zhongwuzw.github.io.resource/master/images/blog/start_up_optimize_3.png" alt=""></p>
<h3 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h3><p>每一个进程都是一个逻辑地址空间，逻辑地址会被映射到<code>RAM</code>的物理页中，当然，这个映射并不是一对一的，逻辑地址不需要在一开始就映射到物理内存，多个逻辑地址也可以映射到相同的物理RAM。<br>如果逻辑地址没有映射到物理RAM，当访问该逻辑地址时，会产生缺页中断，这时，内核会暂停执行该线程，去处理缺页中断；当多个进程，不同的逻辑地址，被映射到相同的物理页时，这些进程就可以共享相同的bit（位），做到进程间共享。<br>还有一个特点是文件映射，通过mmap函数，可以不用将整个文件加载到RAM中，而把文件的片段映射到进程的内存地址中，所以，在访问未映射的地址时，内核也将产生缺页中断。<br>综上，我们可以总结出，动态库或<code>Image</code>的<code>TEXT段</code>可以被映射到多个进程中，其是懒加载的（即使用<code>mmap</code>），共享的。<code>DATA段</code>是可读写的，所以采用了写时复制（COW，Copy-On-Write）的策略，当有进程对<code>DATA</code>进行写时，才真正进行复制的操作，内核会拷贝被修改页到另一个物理RAM并将映射重定向该位置，这时，该进程就拥有了该<code>页</code>的拷贝，该拷贝页被称为<code>dirty page</code>，<code>dirty page</code>包含了进程的特定信息;内核可以重新生成的<code>page</code>称为<code>clean page</code>，当需要访问该页时，可以从磁盘重新读出，显然<code>dirty page</code>代价比<code>clean page</code>大。<br>接下来，将举一个例子来讲述一下Mach-O和虚拟内存之间的映射。如示例，有一个Mach-O文件，我们将其映射到内存中，而不是将其全部读入内存，如果全部读入内存，需占用8<code>页</code>，而使用映射，其中的<code>ZeroFill</code>将不需要占用空间，原因是大多数的全局变量初始化为0，所以可以对此进行优化，将所有为零的全局变量移到末尾，且不占用磁盘空间，当第一次访问ZeroFill<code>页</code>时，直接赋空，所以，其并不需要进行读操作。dyld一开始会读<code>Mach header</code>，由于其没有映射到物理页，内核将产生缺页中断，VM会读取文件的Mach-O文件的第一页到物理页中，并设置映射，这时，dyld就能开始读取<code>Mach header</code>，读取完<code>Mach header</code>后，<code>Mach header</code>会声称有一些信息保存在<code>LINKEDIT</code>中，需要读取，这时，dyld会跳到<code>Process 1</code>的空间底部，进行<code>LINKEDIT</code>的读取，此时，由于内存中没有，内核会进行和之前读取<code>Mach header</code>时一样的操作，产生缺页中断，读取到物理内存并完成映射，处理完<code>LINKEDIT</code>后，<code>LINKEDIT</code>会告诉dyld，其需要对<code>DATA页</code>进行<code>fix-up</code>（调整）以便让该动态库可运行，此时，内核又会进行之前的操作，不过这次有一些不同，因为该动态库会对<code>DATA</code>进行修改，所以，此时会进行写时复制的操作，该<code>页</code>将变为<code>dirty page</code>，此时，内存中就存在两<code>页clean page</code>和一<code>页dirty page</code>。<br>此时，如果又有<code>Process 2</code>加载相同的动态库，此时，在<code>Process 2</code>进程中，dyld也会进行相同的步骤。<br>首先，它会进行<code>Mach header</code>的读取，由于该<code>页</code>已经在RAM中了，所以内核只是简单的将其映射重定向到该<code>页</code>，不需要进行<code>IO</code>，<code>LINKEDIT</code>的读取也是如此，此时到了<code>DATA页</code>，内核会查询RAM中是否存在该<code>DATA页</code>，且是<code>clean page</code>，如果找到，则重用，否则，重新进行读取操作，在该例中，<code>DATA页</code>是<code>dirty page</code>，所以需要再申请一个新的物理<code>页</code>来进行映射，<code>Process 2</code>需修改<code>DATA页</code>，所以<code>DATA页</code>同样标识为<code>dirty page</code>。<br>最后，由于<code>LINKEDIT页</code>只有在dyld进行处理时需要，所以，一旦dyld完成处理，这些<code>LINKEDIT页</code>占用的空间就可以被收回。这样，这个例子，最终我们仅仅拥有2个<code>dirty page</code>，1个<code>clean</code>，共享的<code>page</code>（<code>LINKEDIT页</code>空间被收回）。</p>
<p><img src="https://raw.githubusercontent.com/zhongwuzw/zhongwuzw.github.io.resource/master/images/blog/start_up_optimize_4.png" alt=""></p>
<h3 id="exec-函数-main-被调用之前做了什么"><a href="#exec-函数-main-被调用之前做了什么" class="headerlink" title="exec()函数 - [main()被调用之前做了什么]"></a>exec()函数 - [main()被调用之前做了什么]</h3><p><code>exec</code>是一个系统调用，内核会清理地址空间，将需要运行的可执行文件映射到空间中，且是一个随机地址，接下来，从该地址到0x000000，将被标记为不可读、写和可执行，该区域的大小将不小于4KB（对于32位进程）或4GB（对于64位进程）。<br><img src="https://raw.githubusercontent.com/zhongwuzw/zhongwuzw.github.io.resource/master/images/blog/start_up_optimize_5.png" alt=""><br>现代程序中，我们经常会使用共享库，如Unix中so，所以，当内核完成进程的映射后，将会把dyld映射到另一个随机的地址，并让dyld来完成进程的启动。<br><img src="https://raw.githubusercontent.com/zhongwuzw/zhongwuzw.github.io.resource/master/images/blog/start_up_optimize_6.png" alt=""><br>此时，dyld运行在进程中，并负责加载依赖的所有动态库，准备好并运行。<br>在整个dyld处理的过程中，需要如下图所示的几步，首先，dyld加载所有依赖的动态库（通过读取主可执行文件的<code>header</code>来获得依赖库列表），在加载时，存在某个动态库依赖其他动态库的情况，这个过程是递归执行的。通常，进程会加载100到400个动态库，不过我们几乎不用考虑性能的问题，因为这些库很多都是系统库，内核已经提前加载缓存了。<br><img src="https://raw.githubusercontent.com/zhongwuzw/zhongwuzw.github.io.resource/master/images/blog/start_up_optimize_7.png" alt=""><br>接下来是<code>rebasing</code>和<code>binding</code>，两者的区别为<code>rebasing</code>是当指针指向自己的<code>image</code>而做出调整（调整起来很简单，加一个offset就可以），<code>binding</code>是指针指向其他的<code>image</code>而做出调整。调整都是在<code>DATA页</code>中进行。<br>有人会问，为什么会需要进行调整呢，主要考虑的因素是安全，不能直接修改指令，所以当一个动态库需要调用其它的动态库时，需要在其中加一个间接层，在<code>DATA段</code>中来创建一个指针指向调用的地址，这就涉及到指针的调整，dyld就负责这些操作。<br>Objective-C的类结构指针、方法指针等，也都是通过<code>rebasing</code>或<code>binding</code>来进行调整，由于Objective-C是动态语言，我们可以通过字符串来创建一个类实例，所以<code>Objective-C Runtime</code>需要维护一个包括所有类名的映射。<br>使用过C++的开发者应该知道，C++存在Fragile基类的问题，Objective-C则没有这个问题，因为在加载时，dyld会动态调整所有实例变量的偏移。<br>处理完前面的操作，如果有C++，这个时候dyld会调用初始化器；如果有Objective-C，类别会被添加到方法列表中，且会调用<code>+load</code>方法，当然，我们已经不推荐使用它了，而是使用<code>+initialize</code>方法。<br>最终，我们才调用<code>main()</code>。</p>
<h2 id="将理论应用到实际"><a href="#将理论应用到实际" class="headerlink" title="将理论应用到实际"></a>将理论应用到实际</h2><hr>
<ul>
<li>通过设置环境变量<code>DYLD_PRINT_STATISTICS</code>，可以打印出dyld加载相关信息，包括每部分消耗的时间。</li>
<li>前面提到，app平均会有100到400个动态库，但是很多库，系统都已经加载了，但是，有些动态库是无法被系统提前加载的，就是我们内嵌在app中的动态库，所以，加载这些动态库时会带来一些消耗，想要解决这个问题，我们可以将多个动态库合并，可以使用使用静态库；还可以使用延迟加载，既通过<code>dlopen</code>，不过需要注意的是，<code>dlopen</code>会带来性能和正确性问题，因为它虽然做到了延迟，但是之后需要更多的操作。</li>
<li>减少Objective-C类对象和实例变量的数量，因为，如之前所说，数量太多，会增加<code>rebasing</code>或<code>binding</code>的时间。</li>
<li>减少C++虚函数的使用，因为虚函数会创建虚表，其需要在<code>DATA</code>中创建结构且需要进行调整。</li>
<li>使用Swift，Swift做了很多优化，避免了很多操作。</li>
<li>推荐用<code>+initialize</code>来替换<code>+load</code>。</li>
<li>不要在初始化器中起线程。</li>
<li><code>Xcode9</code>后，可以通过<code>Instruments</code>来跟踪静态初始化器的时间。</li>
</ul>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><hr>
<p><a href="https://github.com/kpwn/iOSRE/blob/master/wiki/Mach-O.md" target="_blank" rel="external">Mach-O</a><br><a href="https://developer.apple.com/videos/play/wwdc2016/406/?time=690" target="_blank" rel="external">Optimizing App Startup Time</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[服务器之从裸机到可用]]></title>
      <url>https://zhongwuzw.github.io/2017/03/14/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%8B%E4%BB%8E%E8%A3%B8%E6%9C%BA%E5%88%B0%E5%8F%AF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p>对于服务器，程序员们还是很熟悉的，任何一个互联网产品，背后几乎都离不开服务器，所有的服务，背后都是通过服务器来提供的，接下来，我将列出从裸机到可用的基本步骤，示例的服务器为<code>HP ProLiant Gen9</code>，当然，其他的服务器如<code>IBM</code>等，基本步骤也都是类似的。</p>
<h2 id="配置管理口"><a href="#配置管理口" class="headerlink" title="配置管理口"></a>配置管理口</h2><hr>
<p>通常来说，这一步是都是要走的，通过配置管理口，可以远程管理服务器，不用去机房插显示器、键盘。<code>HP ProLiant Gen9</code>的管理口称为<code>iLO</code>口，开机初始化后进入系统配置，进行配置，一般来说，服务器都是使用静态IP，所以需要禁掉<code>DHCP</code>，并配置<code>IP</code>地址、网关、子网掩码。重启后生效，这样就能够进行远程控制了。</p>
<h2 id="做RAID"><a href="#做RAID" class="headerlink" title="做RAID"></a>做RAID</h2><hr>
<p><a href="https://en.wikipedia.org/wiki/RAID" target="_blank" rel="external">磁盘阵列</a>（Redundant Arrays of Independent Disks，RAID），是由独立磁盘构成的具有冗余能力的阵列，将数据切割成许多区段，分别放在各个硬盘上，同时有冗余，数据重构等安全服务。</p>
<p>做RAID有很多种方案，可以根据不同的需求，使用不同的方案，如RAID0（条带）、RAID1（镜像）、RAID5、RAID10、RAID50等（不同的方法，所要求的磁盘数也不一样），通常，对于存放数据的磁盘，会使用RAID10、RAID50。做完RAID后，就形成了逻辑分区。</p>
<p>当然，并不是说服务器一定要做RAID，不做RAID的服务器也能装系统。</p>
 <a id="more"></a>
<h2 id="装系统"><a href="#装系统" class="headerlink" title="装系统"></a>装系统</h2><hr>
<p>这一步，大家应该比较熟悉了，装系统，<code>Linux</code>、<code>CentOS</code>等，如果有<code>ISO</code>镜像，通过iLO管理口，挂载镜像，启动后，就能进行系统安装，系统安装的过程中，有一步操作是挂载点设置（系统会安装在之前配置好的一个逻辑分区中），一般来说，<code>Linux</code>系统最少有两个挂载点，分别是<code>/</code>根目录、<code>swap</code>交换分区，通常，也会挂载<code>/home</code>、<code>/usr</code>、<code>/var</code>、<code>/opt</code>等目录。</p>
<h2 id="挂载磁盘"><a href="#挂载磁盘" class="headerlink" title="挂载磁盘"></a>挂载磁盘</h2><hr>
<p>系统安装完后，对之前创建好的逻辑分区进行挂载，包括格式化、创建目录、挂载磁盘以及自动挂载配置。</p>
<h2 id="配置网口IP"><a href="#配置网口IP" class="headerlink" title="配置网口IP"></a>配置网口IP</h2><hr>
<p>整个安装过程，除了给<code>iLO</code>管理口配置<code>IP</code>地址，还要配置业务口，业务口一般使用光口（光纤传输），同样给其配置IP、网关、子网掩码等。</p>
<h2 id="完"><a href="#完" class="headerlink" title="完"></a>完</h2><hr>
<p>经过这几个步骤，系统就算完成了基本的搭建，当然，还有很多另外的操作，比如配置<code>yum</code>源、配置环境、系统优化等。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[AppDelegate解耦之JSDecoupledAppDelegate]]></title>
      <url>https://zhongwuzw.github.io/2017/02/09/AppDelegate%E8%A7%A3%E8%80%A6%E4%B9%8BJSDecoupledAppDelegate/</url>
      <content type="html"><![CDATA[<h2 id="AppDelegate解耦"><a href="#AppDelegate解耦" class="headerlink" title="AppDelegate解耦"></a>AppDelegate解耦</h2><hr>
<p>说到<code>AppDelegate</code>，大家想必都不陌生，它作为应用(<code>UIApplication</code>)的委托对象，在<code>UIApplicationMain</code>方法中被创建，当发生应用相关事件时，提供开发者响应的机会。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[]) &#123;</div><div class="line">    <span class="keyword">@autoreleasepool</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">UIApplicationMain</span>(argc, argv, <span class="literal">nil</span>, <span class="built_in">NSStringFromClass</span>([AppDelegate <span class="keyword">class</span>]));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>AppDelegate</code>是<code>UIResponder</code>的子类，应用将<code>AppDelegate</code>加入响应链中。<code>UIApplication</code>作为响应链中的最上层，当<code>UIApplication</code>任然无法处理特定事件时，会将事件转发给<code>AppDelegate</code>来处理。</p>
<p><img src="http://oc54pu02q.bkt.clouddn.com/iOS_and_OSX_responder_chain_2x.png" width="500" height="" alt="" align="center"></p>
<p>当然，<code>AppDelegate</code>的主要职责还是响应应用事件，它满足<code>UIApplicationDelegate</code>协议，<code>UIApplicationDelegate</code>协议包含大量的委托方法，包括处理应用状态、状态恢复、后台下载数据、通知、URL Route等很多方面，这就会导致，随着程序的开发，<code>AppDelegate</code>将变得越来越臃肿，为了解决该问题，就需要进行解耦。</p>
<a id="more"></a>
<h2 id="JSDecoupledAppDelegate"><a href="#JSDecoupledAppDelegate" class="headerlink" title="JSDecoupledAppDelegate"></a>JSDecoupledAppDelegate</h2><hr>
<p><a href="https://github.com/JaviSoto/JSDecoupledAppDelegate" target="_blank" rel="external">JSDecoupledAppDelegate</a>的目的就是进行<code>AppDelegate</code>的解耦，接下来，将讲述一下实现原理。</p>
<p>首先为了实现解耦，需要将<code>AppDelegate</code>替换为定义好的<code>JSDecoupledAppDelegate</code>类（该类为单例模式），其相当于一个<code>Proxy</code>代理类，负责管理分发到不同的协议对象。<code>JSDecoupledAppDelegate</code>将<code>UIApplicationDelegate</code>协议进行了分类拆分，生成如下的多个协议，针对每个协议，<code>JSDecoupledAppDelegate</code>都有一个满足该协议的属性，如<code>@property (strong, nonatomic, nullable) id&lt;JSApplicationStateDelegate&gt; appStateDelegate;</code>，<code>appStateDelegate</code>用来存储满足<code>JSApplicationStateDelegate</code>协议的对象，当该协议定义的方法被调用时，将转发给委托对象进行处理。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">protocol</span> JSApplicationStateDelegate;</div><div class="line">@<span class="keyword">protocol</span> JSApplicationDefaultOrientationDelegate;</div><div class="line">@<span class="keyword">protocol</span> JSApplicationBackgroundFetchDelegate;</div><div class="line">@<span class="keyword">protocol</span> JSApplicationRemoteNotificationsDelegate;</div><div class="line">@<span class="keyword">protocol</span> JSApplicationLocalNotificationsDelegate;</div><div class="line">@<span class="keyword">protocol</span> JSApplicationStateRestorationDelegate;</div><div class="line">@<span class="keyword">protocol</span> JSApplicationURLResourceOpeningDelegate;</div><div class="line">@<span class="keyword">protocol</span> JSApplicationShortcutItemDelegate;</div><div class="line">@<span class="keyword">protocol</span> JSApplicationHealthDelegate;</div><div class="line">@<span class="keyword">protocol</span> JSApplicationProtectedDataDelegate;</div><div class="line">@<span class="keyword">protocol</span> JSApplicationWatchInteractionDelegate;</div><div class="line">@<span class="keyword">protocol</span> JSApplicationExtensionDelegate;</div><div class="line">@<span class="keyword">protocol</span> JSApplicationActivityContinuationDelegate;</div></pre></td></tr></table></figure>
<p>比如，我们需要处理应用状态相关事件，新建一个处理对象，满足<code>JSApplicationStateDelegate</code>协议，在对象中定义<code>+load</code>方法，将<code>JSDecoupledAppDelegate</code>的<code>appStateDelegate</code>属性赋给自己，如下所示，再在对象中实现<code>JSApplicationStateDelegate</code>方法，这样，当应用状态相关事件产生时，该对象就能收到相关事件。</p>
<figure class="highlight inform7"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">+ (void)load</div><div class="line">&#123;</div><div class="line">    <span class="comment">[JSDecoupledAppDelegate sharedAppDelegate]</span>.appStateDelegate = <span class="comment">[<span class="comment">[self alloc]</span> init]</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样，就实现了<code>AppDelegate</code>的解耦，针对不同的应用事件类别，由不同的对象进行处理。</p>
<p>有的人就好奇了，<code>JSDecoupledAppDelegate</code>是怎么实现事件分发的呢？</p>
<p><code>JSDecoupledAppDelegate</code>重载了<code>- (BOOL)respondsToSelector:(SEL)aSelector</code>方法，为什么会选择重载这个方法呢，我们再来思考一下，平时我们实现<code>Delegate</code>委托方式时，当我们需调用委托对象的某个方法时，首先需要做的就是判断一下委托对象是否实现了该方法，即使用<code>respondsToSelector:</code>（如果不进行提前判断，当委托对象没有实现该方法时，将导致<code>Crash</code>），这也就不难解释为什么选择重载该方法了。</p>
<p>直接show code:</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)respondsToSelector:(SEL)aSelector</div><div class="line">&#123;</div><div class="line">    <span class="comment">//获取委托属性名，每个协议对应一个属性，如appStateDelegate</span></div><div class="line">    <span class="built_in">NSArray</span> *delegateProperties = JSApplicationDelegateProperties();</div><div class="line"></div><div class="line">    <span class="comment">// 1. 获取定义了aSelector的协议</span></div><div class="line">    __block <span class="built_in">BOOL</span> protocolFound = <span class="literal">NO</span>;</div><div class="line">    __block <span class="built_in">BOOL</span> delegateRespondsToSelector = <span class="literal">NO</span>;</div><div class="line"></div><div class="line">    [JSApplicationDelegateSubprotocols() enumerateObjectsUsingBlock:^(<span class="built_in">NSString</span> *protocolName, <span class="built_in">NSUInteger</span> idx, <span class="built_in">BOOL</span> *stop) &#123;</div><div class="line">        <span class="comment">//获取协议定义的方法</span></div><div class="line">        <span class="built_in">NSSet</span> *protocolMethods = JSSelectorListInProtocol(<span class="built_in">NSProtocolFromString</span>(protocolName));</div><div class="line"></div><div class="line">        <span class="keyword">const</span> <span class="built_in">BOOL</span> methodCorrespondsToThisProtocol = [protocolMethods containsObject:<span class="built_in">NSStringFromSelector</span>(aSelector)];</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (methodCorrespondsToThisProtocol)</div><div class="line">        &#123;</div><div class="line">            protocolFound = <span class="literal">YES</span>;</div><div class="line"></div><div class="line">            <span class="comment">// 2. 获取协议委托对象，如appStateDelegate属性</span></div><div class="line">            <span class="keyword">id</span> delegateObjectForProtocol = [<span class="keyword">self</span> valueForKey:delegateProperties[idx]];</div><div class="line">            </div><div class="line">            <span class="comment">//判断委托对象是否实现了该方法</span></div><div class="line">            delegateRespondsToSelector = [delegateObjectForProtocol respondsToSelector:aSelector];</div><div class="line"></div><div class="line">            *stop = <span class="literal">YES</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (protocolFound)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// 3. 返回委托对象是否能响应该方法</span></div><div class="line">        <span class="keyword">return</span> delegateRespondsToSelector;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// 4. 如不能响应，走缺省方法处理</span></div><div class="line">        <span class="keyword">return</span> [<span class="keyword">super</span> respondsToSelector:aSelector];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="终"><a href="#终" class="headerlink" title="终"></a>终</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Objective-C之performSelector编译器内存泄露警告]]></title>
      <url>https://zhongwuzw.github.io/2017/01/19/Objective-C%E4%B9%8BperformSelector%E7%BC%96%E8%AF%91%E5%99%A8%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E8%AD%A6%E5%91%8A/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<blockquote>
<p>performSelector may cause a leak because its selector is unknown</p>
</blockquote>
<p>在<code>ARC</code>环境下，我们使用<code>-(id)performSelector:</code>方法时，编译器会提示可能导致内存泄露的警告。大家如果一直使用<code>ARC</code>进行<code>iOS</code>开发，没有经历<code>MRC</code>时期的话，可能心里会有疑问，为什么<code>Apple</code>提供的<code>API</code>会报警告呢，又为什么会报内存泄露的警告？接下来，将详细讨论该问题。</p>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><hr>
<p>其实，产生该问题的原因是<code>ARC</code>,运行时系统需要知道调用方法的返回值类型，我们知道，方法的返回值包括：<code>void</code>,<code>int</code>,<code>NSString *</code>,<code>id</code>等，<code>ARC</code>通常可以通过定义实例方法对象的头中获取信息。</p>
<p><code>ARC</code>对于返回值有3种处理情况：</p>
<ol>
<li>忽略非对象类型（<code>void</code>,<code>int</code>等）</li>
<li>当新建对象值不再需要时<code>release</code>（如<code>init</code>,<code>copy</code>或带有<code>ns_returns_retained</code>属性的方法）</li>
<li>不做任何处理，且假设返回的对象值会在局部作用域内有效（在最里层的<code>autorelease pool</code>结束之前都有效)</li>
</ol>
<p>调用<code>-(id)performSelector:</code>，编译器会假设调用方法的返回值是一个对象，且不会对返回值进行<code>retain</code>/<code>release</code>，所以，如果你调用如上讨论的第2种情况下的方法，将导致内存泄露，因为，调用的方法会返回一个新的对象。</p>
<p>如果<code>#SEL</code>返回值类型为<code>void</code>或非对象类型，是可以安全的使用<code>-(id)performSelector:</code>的。</p>
<a id="more"></a>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><hr>
<ol>
<li><p>使用编译器指令移除警告。(注意，该方法治标不治本，对于上面讨论的内存泄露情况，仍然存在）</p>
<figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> clang diagnostic push</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> clang diagnostic ignored <span class="meta-string">"-Warc-performSelector-leaks"</span></span></div><div class="line">[self performSelector: NSSelectorFromString(@<span class="string">"someMethod"</span>) withObject: <span class="literal">nil</span>];</div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> clang diagnostic pop</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用<code>NSInvocation</code>封装方法调用。</p>
</li>
<li><p>对于返回值为<code>void</code>,<code>int</code>等值类型，可以使用<code>- performSelector:withObject:afterDelay:</code>来执行，由于它不会在当前<code>RunLoop</code>时调用，所以会立即返回，且在接下来的某个<code>RunLoop</code>中执行，也就没有了返回值。也可以使用运行时方法<code>objc_msgSend(self, NSSelectorFromString(@&quot;someMethod&quot;));</code>。</p>
</li>
</ol>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><hr>
<ol>
<li><code>Swift</code>已经废弃了<code>-(id)performSelector:</code>方法。</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SSO单点登录之CAS-Server]]></title>
      <url>https://zhongwuzw.github.io/2016/12/27/SSO%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E4%B9%8BCAS-Server/</url>
      <content type="html"><![CDATA[<h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h2><hr>
<ul>
<li><code>CAS Server 3.5.x.</code>，下文以<code>$CAS-SERVER</code>表示。</li>
<li><code>CAS Client 3.3.x.</code>，下文以<code>$CAS-CLIENT</code>表示。</li>
<li><code>Tomcat 7.x</code>，下文以<code>$CAS_TOMCAT_HOME</code>表示。</li>
<li><code>GateIn-3.8.1.Final-tomcat-7</code>，下文以<code>$GATEIN_HOME</code>表示。</li>
</ul>
<blockquote>
<p>最近公司需要对之前的多个Web应用系统进行整合，希望用户在登录某个应用系统时，能直接访问其他的Web应用系统，且不需要再次登录。既我们经常说的单点登录，最后，我选择了<a href="https://www.apereo.org/projects/cas/download-cas" target="_blank" rel="external"><code>CAS</code></a>，并将其整合进了<a href="http://gatein.jboss.org/" target="_blank" rel="external">GateIn portal</a>。接下来，将整理一下原理和整合步骤。<br>所有项目代码示例可在<a href="https://github.com/CAS-GateInPortal" target="_blank" rel="external">github</a>上下载。</p>
</blockquote>
<h2 id="CAS介绍"><a href="#CAS介绍" class="headerlink" title="CAS介绍"></a>CAS介绍</h2><hr>
<p><a href="https://www.apereo.org/projects/cas/download-cas" target="_blank" rel="external"><code>CAS</code></a>（Central Authentication Service）是<code>Yale</code>大学发起的一个开源项目，旨在为<code>Web</code>应用系统提供一种可靠的单点登录。单点登录，既在多个应用系统中，用户只需登录一次就可以访问所有相互信任的应用系统。<code>CAS Client</code>支持非常多的客户端，包括<code>JAVA、PHP、Ruby</code>等。</p>
<p>接下来，接介绍一下<code>CAS</code>系统。</p>
<h3 id="CAS-系统组成"><a href="#CAS-系统组成" class="headerlink" title="CAS 系统组成"></a>CAS 系统组成</h3><hr>
<p><code>CAS</code>系统架构由两部分组成，<code>CAS Server</code>、<code>CAS Clients</code>，两者可以通过多种协议进行通信。</p>
<a id="more"></a>
<h4 id="CAS-Server"><a href="#CAS-Server" class="headerlink" title="CAS Server"></a>CAS Server</h4><hr>
<p><code>CAS Server</code>是一个构建在<code>Spring Framework</code>上的<code>Java servlet</code>，通过分配和诊断<code>tickets</code>，负责认证用户以及授权。</p>
<h4 id="CAS-Clients"><a href="#CAS-Clients" class="headerlink" title="CAS Clients"></a>CAS Clients</h4><hr>
<p><code>CAS Clients</code>负责对用户的认证工作，<code>CAS Clients</code>负责处理对客户端受保护资源的访问请求，需要登录时，重定向到<code>CAS Server</code>。</p>
<p><code>CAS Clients</code>与受保护的客户端应用部署在一起，以<code>Filter</code>方式保护受保护的资源。</p>
<h3 id="CAS协议流程"><a href="#CAS协议流程" class="headerlink" title="CAS协议流程"></a>CAS协议流程</h3><hr>
<p>CAS协议流程如下图所示，展示了用户同时访问多个应用系统的流程。多个应用系统能实现单点登录的基本流程为，当用户首次访问需要登录才能访问的页面时，会自动重定向到<code>CAS Server</code>的登陆页面，成功认证完后，会在<code>CAS Server</code>的域中设置<code>CASTGC</code>的<code>Cookie</code>，最终登陆完成后，服务器会创建一个<code>session</code>会话，用于之后与应用系统的交互。当用户同时再登陆另外一个应用系统时，同样会跟之前一样，重定向到<code>CAS Server</code>的登陆页面，区别是此时已经有了<code>CAS Server</code>域中的<code>CASTGC</code>，重定向时会附带该<code>Cookie</code>，<code>CAS Server</code>验证之后返回一个<code>ticket</code>，之后浏览器重新请求原访问页面，并附带<code>ticket</code>参数，<code>CAS Server</code>诊断有效后，返回原应用系统的重定向，且设置该域的<code>session Cookie</code>，浏览器最后请求原页面，并附带<code>session Cookei</code>，应用系统诊断后返回请求内容。</p>
<p>需要注意的是，当成功登陆完某个系统后，如果继续再访问该系统的其他资源页面，是不需要再次与<code>CAS Server</code>进行交互的，应用系统将根据<code>session</code>直接进行诊断。</p>
<p><img src="http://oc54pu02q.bkt.clouddn.com/cas_flow_diagram.png" alt=""></p>
<h2 id="GateIn-Portal集成CAS-Server"><a href="#GateIn-Portal集成CAS-Server" class="headerlink" title="GateIn Portal集成CAS Server"></a>GateIn Portal集成CAS Server</h2><hr>
<h3 id="部署CAS"><a href="#部署CAS" class="headerlink" title="部署CAS"></a>部署CAS</h3><hr>
<ol>
<li><p>打开<code>$CAS_TOMCAT_HOME/webapps/$CAS-SERVER/WEB-INF/deployerConfigContext.xml</code>，替换：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;bean <span class="keyword">class</span>=<span class="string">"org.jasig.cas.authentication.handler.support.SimpleTestUsernamePasswordAuthenticationHandler"</span> /&gt;</div></pre></td></tr></table></figure>
<p>为如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.gatein.sso.cas.plugin.AuthenticationPlugin"</span>&gt;</div><div class="line">	   <span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"gateInProtocol"</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>http<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></div><div class="line">	   &lt;property name=<span class="string">"gateInHost"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">value</span>&gt;</span>localhost<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></div><div class="line">	   &lt;property name=<span class="string">"gateInPort"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">value</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></div><div class="line">	   &lt;property name=<span class="string">"gateInContext"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">value</span>&gt;</span>portal<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></div><div class="line">	   &lt;property name=<span class="string">"httpMethod"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">value</span>&gt;</span>POST<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></div><div class="line">&lt;<span class="regexp">/bean&gt;</span></div></pre></td></tr></table></figure>
<p> 如上所示，用来配置<code>GateIn Portal</code>的服务地址。</p>
</li>
<li><p>下载<code>GateIn SSO package</code>，<a href="https://repository.jboss.org/nexus/content/groups/public/org/gatein/sso/sso-packaging/1.4.1.Final/sso-packaging-1.4.1.Final.zip" target="_blank" rel="external">下载地址</a>，解压后，将其<code>cas/plugin/WEB-INF/lib</code>下的<code>jar</code>包拷贝到<code>$CAS_TOMCAT_HOME/webapps/$CAS-SERVER/WEB-INF/lib</code>目录。</p>
</li>
<li>默认，登出用户时<code>CAS Server</code>会展示一个<code>CAS</code>提供的登出页面，然后跳转回<code>Portal</code>页，如果想要保留原有<code>Portal</code>的登出，打开<code>$CAS_TOMCAT_HOME/webapps/$CAS-SERVER/WEB-INF/cas-servlet.xml</code>，添加<code>followServiceRedirects=&quot;true&quot;</code>参数：<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> &lt;bean id=<span class="string">"logoutController"</span>  class=<span class="string">"org.jasig.cas.web.LogoutController"</span></div><div class="line"><span class="selector-tag">p</span>:centralAuthenticationService-ref=<span class="string">"centralAuthenticationService"</span></div><div class="line"><span class="selector-tag">p</span>:logoutView=<span class="string">"casLogoutView"</span></div><div class="line"><span class="selector-tag">p</span>:warnCookieGenerator-ref=<span class="string">"warnCookieGenerator"</span></div><div class="line"><span class="selector-tag">p</span>:ticketGrantingTicketCookieGenerator-ref=<span class="string">"ticketGrantingTicketCookieGenerator"</span></div><div class="line"><span class="selector-tag">p</span>:followServiceRedirects=<span class="string">"true"</span>/&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="部署GateIn-Portal"><a href="#部署GateIn-Portal" class="headerlink" title="部署GateIn Portal"></a>部署GateIn Portal</h3><hr>
<ol>
<li><p>为了能让<code>Portal</code>使用<code>CAS Server</code>提供的单点登陆系统，首先配置<code>Portal</code>的<code>SSO</code>参数，在<code>$GATEIN_HOME/gatein/conf/configuration.properties</code>文件中，修改和添加如下内容：</p>
<figure class="highlight roboconf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">gatein.sso.enabled=true</div><div class="line">gatein.sso.callback.enabled=$&#123;<span class="attribute">gatein.sso.enabled&#125;</span></div><div class="line">gatein.sso.login.module.enabled=$&#123;gatein.sso.enabled&#125;</div><div class="line">gatein.sso.login.module.class=org.gatein.sso.agent.login.SSOLoginModule</div><div class="line">gatein.sso.server.url=http://localhost:8086/cas-server</div><div class="line">gatein<span class="variable">.sso</span><span class="variable">.portal</span><span class="variable">.url</span>=http://localhost:8080</div><div class="line">gatein<span class="variable">.sso</span><span class="variable">.filter</span><span class="variable">.logout</span><span class="variable">.class</span>=org<span class="variable">.gatein</span><span class="variable">.sso</span><span class="variable">.agent</span><span class="variable">.filter</span><span class="variable">.CASLogoutFilter</span></div><div class="line">gatein<span class="variable">.sso</span><span class="variable">.filter</span><span class="variable">.logout</span><span class="variable">.url</span>=$&#123;gatein<span class="variable">.sso</span><span class="variable">.server</span><span class="variable">.url</span>&#125;/logout</div><div class="line">gatein<span class="variable">.sso</span><span class="variable">.filter</span><span class="variable">.login</span><span class="variable">.sso</span><span class="variable">.url</span>=$&#123;gatein<span class="variable">.sso</span><span class="variable">.server</span><span class="variable">.url</span>&#125;/login?service=$&#123;gatein<span class="variable">.sso</span><span class="variable">.portal</span><span class="variable">.url</span>&#125;/@@portal<span class="variable">.container</span><span class="variable">.name</span>@@/initiatessologin</div></pre></td></tr></table></figure>
<p> 如上，为配置<code>CAS Server</code>的服务器信息等。</p>
</li>
<li><p>如果需要改变账户系统的存储方式， 比如改为<code>MySQL</code>数据库，还需要在<code>$GATEIN_HOME/gatein/conf/configuration.properties</code>文件中修改成如下所示，同时，下载<code>mysql-connect-java.jar``jar</code>包，放入<code>$GATEIN_HOME/lib</code>目录下。</p>
 <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">gatein<span class="selector-class">.idm</span><span class="selector-class">.datasource</span><span class="selector-class">.name</span>=jdbcidm</div><div class="line">gatein<span class="selector-class">.idm</span><span class="selector-class">.datasource</span><span class="selector-class">.driver</span>=com<span class="selector-class">.mysql</span><span class="selector-class">.jdbc</span><span class="selector-class">.Driver</span></div><div class="line">gatein<span class="selector-class">.idm</span><span class="selector-class">.datasource</span><span class="selector-class">.url</span>=jdbc:mysql:<span class="comment">//localhost:3306/jdbcidm_$&#123;name&#125;</span></div><div class="line">gatein<span class="selector-class">.idm</span><span class="selector-class">.datasource</span><span class="selector-class">.username</span>=root</div><div class="line">gatein<span class="selector-class">.idm</span><span class="selector-class">.datasource</span><span class="selector-class">.password</span>=<span class="number">123</span></div></pre></td></tr></table></figure>
<p> 在<code>$GATEIN_HOME/conf/server.xml</code>的<code>&lt;GlobalNamingResources&gt;&lt;/GlobalNamingResources&gt;</code>节点中声明绑定的数据源，添加如下，字段含义可参考<a href="https://www.exoplatform.com/docs/public/index.jsp?topic=%2FPLF35%2FADM.Configuration.Connect_To_A_Production_Database.html" target="_blank" rel="external">该文</a>，注意，数据库名必须为<code>jdbcidm_portal</code>，且需要提前手动创建，无法自动创建，但是<code>GateIn Portal</code>会自动创建用户相关表：</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Resource auth=<span class="string">"Container"</span> driverClassName=<span class="string">"com.mysql.jdbc.Driver"</span> <span class="built_in">log</span>Abandoned=<span class="string">"true"</span> maxActive=<span class="string">"20"</span> maxIdle=<span class="string">"10"</span> maxWait=<span class="string">"10000"</span> minEvictableIdleTimeMillis=<span class="string">"60000"</span> name=<span class="string">"exo-idm_portal"</span> password=<span class="string">"123"</span> removeAbandoned=<span class="string">"true"</span> removeAbandonedTimeout=<span class="string">"10"</span> <span class="built_in">type</span>=<span class="string">"javax.sql.DataSource"</span> url=<span class="string">"jdbc:mysql://localhost:3306/jdbcidm_portal"</span> username=<span class="string">"root"</span>/&gt;</div></pre></td></tr></table></figure>
<p> 在<code>GateIn Portal</code>与<code>CAS</code>整合后，账户系统将由<code>GateIn Portal</code>接管，也就是说，如果<code>GateIn Portal</code>服务没有开启，则<code>CAS Server</code>将无法进行认证。</p>
</li>
<li><p>在<code>$GATEIN_HOME/conf/server.xml</code>的<code>Host</code>元素下添加<code>ServletAccessValve</code>，如：</p>
 <figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;Host <span class="built_in">name</span>=<span class="string">"localhost"</span> appBase=<span class="string">"webapps"</span></div><div class="line">  unpackWARs=<span class="string">"true"</span> autoDeploy=<span class="string">"true"</span>&gt;</div><div class="line"> </div><div class="line">  &lt;Valve className=<span class="string">"org.gatein.sso.agent.tomcat.ServletAccessValve"</span> /&gt;</div><div class="line"> </div><div class="line">  &lt;!<span class="comment">-- SingleSignOn valve, share authentication between web applications</span></div><div class="line">  ...</div></pre></td></tr></table></figure>
<p> 其目的是开启<code>SSO</code>组件，将其加入<code>Catalina</code>容器的请求处理管道中，这样，<code>SSO</code>组件将有机会处理每一个<code>Request</code>请求。</p>
</li>
</ol>
<h2 id="修改portal项目根路径"><a href="#修改portal项目根路径" class="headerlink" title="修改portal项目根路径"></a>修改portal项目根路径</h2><hr>
<p><code>GateIn portal</code>项目的默认网址格式为：<code>{ip}:{port}/portal/*</code>，如果我们想把根路径的<code>portal</code>改成其他的，如<code>ots-portal</code>，并不能简单的像其他<code>Tomcat``webapp</code>一样，直接修改目录名即可，因为<code>portal</code>有多个应用依赖，且<code>portal</code>关键字还作为容器名等在整个生命周期中起作用，最终经过大量分析测试，实现了更名，接下来，将总结修改的配置文件：</p>
<ul>
<li><code>$GATEIN_HOME/conf/jaas.conf</code>：<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">  gatein-domain &#123;</div><div class="line">  <span class="keyword">org.exoplatform.web.login.FilterDisabledLoginModule </span>required</div><div class="line">    portalContainerName=ots-portal</div><div class="line">    realmName=gatein-domain<span class="comment">;</span></div><div class="line">  <span class="keyword">org.gatein.security.oauth.jaas.OAuthLoginModule </span>required</div><div class="line">    portalContainerName=ots-portal</div><div class="line">    realmName=gatein-domain<span class="comment">;</span></div><div class="line">  <span class="keyword">org.gatein.sso.integration.SSODelegateLoginModule </span>required</div><div class="line">    enabled=<span class="string">"#&#123;gatein.sso.login.module.enabled&#125;"</span></div><div class="line">    delegateClassName=<span class="string">"#&#123;gatein.sso.login.module.class&#125;"</span></div><div class="line">    portalContainerName=ots-portal</div><div class="line">    realmName=gatein-domain</div><div class="line">    password-stacking=useFirstPass<span class="comment">;</span></div><div class="line">  <span class="keyword">org.exoplatform.services.security.j2ee.TomcatLoginModule </span>required</div><div class="line">    portalContainerName=ots-portal</div><div class="line">    realmName=gatein-domain<span class="comment">;</span></div><div class="line">&#125;<span class="comment">;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><code>$GATEIN_HOME/gatein/conf/configuration.xml</code>：<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">object-param</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>portal<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">object</span> <span class="attr">type</span>=<span class="string">"org.exoplatform.container.definition.PortalContainerDefinition"</span>&gt;</span></div><div class="line">          <span class="comment">&lt;!-- The name of the portal container --&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">string</span>&gt;</span>ots-portal<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">field</span>&gt;</span></div><div class="line">          <span class="comment">&lt;!-- The name of the context name of the rest web application --&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"restContextName"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">string</span>&gt;</span>rest<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">field</span>&gt;</span></div><div class="line">          <span class="comment">&lt;!-- The name of the realm --&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"realmName"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">string</span>&gt;</span>gatein-domain<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">field</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">object</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">object-param</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><code>$GATEIN_HOME/webapps/ots-portal/WEB-INF/web.xml</code>：<figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;display-<span class="built_in">name</span>&gt;ots-portal&lt;/display-<span class="built_in">name</span>&gt;</div><div class="line">&lt;context-<span class="built_in">param</span>&gt;</div><div class="line">  &lt;<span class="built_in">param</span>-<span class="built_in">name</span>&gt;org.exoplatform.frameworks.jcr.command.web.fckeditor.digitalAssetsWorkspace&lt;/<span class="built_in">param</span>-<span class="built_in">name</span>&gt;</div><div class="line">  &lt;<span class="built_in">param</span>-value&gt;ots-portal&lt;/<span class="built_in">param</span>-value&gt;</div><div class="line">&lt;/context-<span class="built_in">param</span>&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><code>$GATEIN_HOME/webapps/ROOT/index.jsp</code>：<figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="xml"></span><span class="vbscript">&lt;%</span></div><div class="line"><span class="built_in">response</span>.setStatus(<span class="built_in">response</span>.SC_MOVED_TEMPORARILY);</div><div class="line"><span class="built_in">response</span>.setHeader(<span class="string">"Location"</span>, <span class="string">"/ots-portal"</span>);</div><div class="line">%&gt;<span class="xml"></span></div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>最后，当然同样需要将<code>portal</code>目录名改为<code>ots-portal</code>。</li>
</ul>
<p>如上修改之后，就可以通过网址<code>{ip}:{port}/ots-portal/*</code>来进行访问了。</p>
<h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><hr>
<p>更改根目录之后，其认证相关信息存储的库名将由<code>jdbcidm_portal</code>变为<code>jdbcidm_ots-portal</code>。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><hr>
<ul>
<li><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-cas/" target="_blank" rel="external">https://www.ibm.com/developerworks/cn/opensource/os-cn-cas/</a></li>
<li><a href="https://www.exoplatform.com/docs/public/index.jsp?topic=%2FPLF35%2FADM.Configuration.Connect_To_A_Production_Database.html" target="_blank" rel="external">https://www.exoplatform.com/docs/public/index.jsp?topic=%2FPLF35%2FADM.Configuration.Connect_To_A_Production_Database.html</a></li>
<li><a href="https://repository.jboss.org/nexus/content/groups/public/org/gatein/sso/sso-packaging/1.4.1.Final/sso-packaging-1.4.1.Final.zip" target="_blank" rel="external">https://repository.jboss.org/nexus/content/groups/public/org/gatein/sso/sso-packaging/1.4.1.Final/sso-packaging-1.4.1.Final.zip</a></li>
<li><a href="http://www.cnblogs.com/vhua/p/cas_1.html" target="_blank" rel="external">http://www.cnblogs.com/vhua/p/cas_1.html</a></li>
<li><a href="https://developer.jboss.org/wiki/ChangeGateInContextPath" target="_blank" rel="external">https://developer.jboss.org/wiki/ChangeGateInContextPath</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS设置shadow*带来的离屏渲染]]></title>
      <url>https://zhongwuzw.github.io/2016/12/22/iOS%E8%AE%BE%E7%BD%AEshadow-%E5%B8%A6%E6%9D%A5%E7%9A%84%E7%A6%BB%E5%B1%8F%E6%B8%B2%E6%9F%93/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p>在项目中，当我们想要设置<code>View</code>的阴影效果时，可以通过<code>shadow*</code>相关方法实现，如：</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">self.layer.<span class="keyword">shadowOffset </span>= CGSizeMake(<span class="number">4</span>, -<span class="number">2</span>)<span class="comment">;</span></div><div class="line">self.layer.<span class="keyword">shadowOpacity </span>= <span class="number">0</span>.<span class="number">5</span><span class="comment">;</span></div><div class="line">self.layer.<span class="keyword">shadowColor </span>= [[UIColor <span class="keyword">blackColor] </span>colorWithAlphaComponent:<span class="number">0</span>.<span class="number">5</span>].CGColor<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>实现效果如下：<br><img src="http://oc54pu02q.bkt.clouddn.com/shadow.png" width="500" height="" alt="" align="center"></p>
<p>如上实现方式，有些情况下，你并不会发现有什么问题，但是一旦将其用在如<code>UITableViewCell</code>、<code>UICollectionViewCell</code>等时，你会发现，滑动时会导致大量掉帧的情况，其主要原因为，<code>shadow*</code>方法的使用将导致<code>Core Animation</code>进行离屏渲染，为了确定这一点，可以通过<code>Instruments</code>工具，选择<code>Core Animation</code>模板，选择开启<code>Color Offscreen-Rendered Yellow</code> <code>Debug</code>选项，当我们滑动<code>CollectionView</code>时，其帧率如下，产生了大量掉帧的情况，且正如我们所料，使用<code>shadow*</code>方法的视图被标黄，既使用了离屏渲染。</p>
<p><img src="http://oc54pu02q.bkt.clouddn.com/bad-frame.png" width="500" height="" alt="" align="center"></p>
<p>帧率情况如上，可以看到丢帧率很高。</p>
<a id="more"></a>
<p><img src="http://oc54pu02q.bkt.clouddn.com/IMG_4639.PNG" width="500" height="" alt="" align="center"></p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><hr>
<p>有一种很简单的方式来解决该问题，既直接向<code>Core Animation</code>提供阴影形状，通过调用<code>setShadowPath</code>来提供一个<code>CGPath</code>给视图的<code>Layer</code>，（<code>CGPath</code>为任意你想生成的阴影的形状)，如：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[myView.layer setShadowPath:<span class="string">[[UIBezierPath </span></div><div class="line">    bezierPathWithRect:myView.bounds] CGPath]];</div></pre></td></tr></table></figure>
<p>再次运行<code>Instruments</code>的<code>Core Animation</code>模板，能够看到，基本没有掉帧，滑动很流畅，且没有使用离屏渲染。</p>
<p><img src="http://oc54pu02q.bkt.clouddn.com/good-frame.png" width="500" height="" alt="" align="center"></p>
<p><img src="http://oc54pu02q.bkt.clouddn.com/IMG_4638.PNG" width="500" height="" alt="" align="center"></p>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><hr>
<ul>
<li>当使用阴影的视图形状发生变化时，可以将阴影的设置代码放入<code>setFrame</code>、<code>layoutSubviews</code>等方法里。</li>
<li>当对视图的<code>bounds</code>进行动画时，默认其阴影是不会跟随进行动画的，但是可以通过如<code>CAKeyframeAnimation</code>来对其进行动画，因为我们已经知道了新旧两个<code>CGPath</code>。</li>
<li>能引发离屏渲染的情况除了设置<code>shadow</code>，还有很多，如<code>layer.mask</code>、<code>layer.shouldRasterize = YES</code>等，当然，除了离屏渲染，还有很多影响绘图性能的问题，如<code>Blending</code>、<code>Layout</code>，等。<br>详细情况可参考： <a href="http://stackoverflow.com/a/13649143/3552084" target="_blank" rel="external">http://stackoverflow.com/questions/13158796/what-triggers-offscreen-rendering-blending-and-layoutsubviews-in-ios</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[源码分析之Alamofire]]></title>
      <url>https://zhongwuzw.github.io/2016/12/14/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8BAlamofire/</url>
      <content type="html"><![CDATA[<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><hr>
<p><code>Alamofire</code>是对<code>URLSession</code>的封装，针对普通请求，上传、下载等操作，提供对应的<code>Request</code>，其对象关系如下：</p>
<p> <img src="http://oc54pu02q.bkt.clouddn.com/25E6C99A-FDF4-4314-A41A-03E746BBA401.png" width="500" height="254" alt="" align="center"></p>
<p>每一个<code>Request</code>关联一个<code>TaskDelegate</code>，<code>TaskDelegate</code>用来处理<code>URLSessionTask</code>使用过程中的网络回调，<code>TaskDelegate</code>有一个<code>queue</code>成员，用来执行<code>task</code>完成后的回调处理，<code>completionHandler</code>默认会在主线程回调。<code>Alamofire</code>有一个<code>SessionDelegate</code>，对<code>Session</code>的所有网络回调做处理，并调用每一个<code>task</code>的<code>TaskDelegate</code>，正因为<code>SessionDelegate</code>只有一个实例，所以会涉及到线程安全的问题，对某些关键属性需要做竟态处理，如管理<code>Request</code>的字典。委托处理流程如下图所示：</p>
<p> <img src="http://oc54pu02q.bkt.clouddn.com/05A842ED-9D20-47AA-8609-282B95A36E7B.png" width="500" height="254" alt="" align="center"></p>
<a id="more"></a>
<p><code>TaskDelegate</code>是一个基类，<code>Alamofire</code>针对<code>HTTP</code>普通请求、下载、上传提供了相应的子类来进行处理。</p>
<p><code>Alamofire</code>实现过程中使用了大量的协议、泛型，来实现通用性，代码非常优雅。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Swift之类型引用]]></title>
      <url>https://zhongwuzw.github.io/2016/12/11/Swift%E4%B9%8B%E7%B1%BB%E5%9E%8B%E5%BC%95%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="类型引用"><a href="#类型引用" class="headerlink" title="类型引用"></a>类型引用</h2><hr>
<p>在开发中，我们经常用到实例的类型，希望实例与其真正的对象类型关联，既面向对象中的多态性。接下来将通过一个例子来进行讨论，比如，定义一个<code>Dog</code>类，用来描述狗，如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">var</span> <span class="title">whatDogsSay</span> : <span class="title">String</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Woof"</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">bark</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="type">Dog</span>.whatDogsSay)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>Dog</code>类的<code>bark</code>为狗叫所定义的方法，实现中直接硬编码<code>Dog.whatDogsSay</code>，这种方法会很不灵活，尤其是其如果作为父类被子类时。</p>
<p>在<code>Swift</code>中，可以使用<code>type(of:)</code>方法来访问对象实际的类型，既会返回实例对象真正的类型，所以，可以对之前的<code>Dog</code>进行改进，如下：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">var</span> <span class="title">whatDogsSay</span> : <span class="type">String &#123;</span></span></div><div class="line">        <span class="keyword">return</span> <span class="string">"Woof"</span></div><div class="line">    &#125;</div><div class="line">    func bark() &#123;</div><div class="line">        print(type(of:self).whatDogsSay)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoisyDog</span> : <span class="type">Dog &#123;</span></span></div><div class="line">    <span class="keyword">override</span> <span class="class"><span class="keyword">class</span> <span class="title">var</span> <span class="title">whatDogsSay</span> : <span class="type">String &#123;</span></span></div><div class="line">        <span class="keyword">return</span> <span class="string">"Woof woof woof"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如上定义，结果如下：</p>
<figure class="highlight ceylon"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> nd = NoisyDog()</div><div class="line">nd.bark() <span class="comment">// Woof woof woof</span></div></pre></td></tr></table></figure>
<p>如果向<code>NoisyDog</code>实例发送<code>bark</code>消息，结果为”Woof woof woof”。这就是<code>type(of:)</code>方法的作用，他会指向实例真正的类型。<code>self</code>表示实例，类型为<code>NoisyDog</code>，所以<code>type(of:self)</code>返回<code>NoisyDog</code>类，所以会调用<code>NoisyDog</code>类的<code>whatDogsSay</code>类属性。</p>
<p>有时候，需要传递一个对象类型作为参数：</p>
<ul>
<li>声明对象的类型时，可以使用类型名加<code>.</code>再加关键字<code>Type</code>。</li>
<li><p>如果使用一个对象作为值时，比如，将类型赋值给一个变量或者作为参数值传递给函数时，可以使用类型名加<code>self</code>关键字，或者<code>type(of:)</code>方法。</p>
<a id="more"></a>
</li>
</ul>
<p>例如，有一个函数<code>dogTypeExpecter</code>，接收<code>Dog</code>类型作为参数：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">dogTypeExpecter</span><span class="params">(<span class="number">_</span> whattype:Dog.<span class="keyword">Type</span>)</span></span> &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用方式如下：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">dogTypeExpecter</span><span class="params">(Dog.self)</span></span></div></pre></td></tr></table></figure>
<p>或：</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">let d = Dog()</div><div class="line">dogTypeExpecter(<span class="name">type</span>(<span class="name">of</span><span class="symbol">:d</span>))</div><div class="line"></div><div class="line">dogTypeExpecter(<span class="name">NoisyDog</span>.self)</div><div class="line">let nd = NoisyDog()</div><div class="line">dogTypeExpecter(<span class="name">type</span>(<span class="name">of</span><span class="symbol">:nd</span>))</div></pre></td></tr></table></figure>
<p>这种情况经常出现在工厂方法中，既给定某个类型，创建该类型的实例，<code>Swift</code>中使用<code>init</code>来定义初始化器，如：</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> name : <span class="built_in">String</span></div><div class="line">    init(name:<span class="built_in">String</span>) &#123;</div><div class="line">        self.name = name</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoisyDog</span> : <span class="title">Dog</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如下为一个工厂方法来创建<code>Dog</code>或<code>NoisyDog</code>，通过参数来指明类型：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">dogMakerAndNamer</span><span class="params">(<span class="number">_</span> whattype:Dog.<span class="keyword">Type</span>)</span></span> -&gt; <span class="type">Dog</span> &#123;</div><div class="line">    <span class="keyword">let</span> d = whattype.<span class="keyword">init</span>(name:<span class="string">"Fido"</span>) <span class="comment">// compile error</span></div><div class="line">    <span class="keyword">return</span> d</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如上定义后，编译器会报错，原因是编译器无法确保<code>Dog</code>的每一个子类都会实现<code>init(name:)</code>初始化方法，所以，我们可以通过添加<code>required</code>关键字来强制<code>Dog</code>子类实现或继承该初始化方法。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> name : <span class="type">String</span></div><div class="line">    <span class="keyword">required</span> <span class="keyword">init</span>(name:<span class="type">String</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.name = name</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoisyDog</span> : <span class="title">Dog</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用结果：</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> d = dogMakerAndNamer(Dog.<span class="built_in">self</span>) <span class="comment">// d is a Dog named Fido</span></div><div class="line"><span class="keyword">let</span> d2 = dogMakerAndNamer(NoisyDog.<span class="built_in">self</span>) <span class="comment">// d2 is a NoisyDog named Fido</span></div></pre></td></tr></table></figure>
<p>在类方法中，<code>self</code>代表类，在实例方法中，<code>self</code>表示类实例，在工厂方法中，我们在返回类型中使用了<code>Self</code>关键字，其具有动态性，代表返回的真正类型，其也可以用在实例方法的声明中。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> name : <span class="type">String</span></div><div class="line">    <span class="keyword">required</span> <span class="keyword">init</span>(name:<span class="type">String</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.name = name</div><div class="line">    &#125;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">makeAndName</span>() -&gt; <span class="title">Self</span> </span>&#123;</div><div class="line">        <span class="keyword">let</span> d = <span class="keyword">self</span>.<span class="keyword">init</span>(name:<span class="string">"Fido"</span>)</div><div class="line">        <span class="keyword">return</span> d</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoisyDog</span> : <span class="title">Dog</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><hr>
<p><code>type(of:)</code>：返回对象实例所指向的真正对象类型。<br><code>.Type</code>：在类型声明时使用，比如，在函数参数声明时，期望参数为<code>Dog</code>类型或其子类类型，可以写成<code>Dog.Type</code>。<br><code>.self</code>：代表一个类型，如，函数参数需要<code>Dog.Type</code>类型时，可以传递<code>Dog.self</code>。<br><code>Self</code>：在方法声明时，在返回类型中使用<code>Self</code>关键字，具有动态性。</p>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><hr>
<p>在<code>Swift</code>中，静态变量、静态方法可以使用<code>static</code>、<code>class</code>两种关键字，但是需要注意的是，<code>static</code>声明的无法重载，但是<code>class</code>关键字可以，不过<code>class</code>只能使用在类中，不能用在结构体、枚举等中。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[解决HTTPS混合HTTP的问题]]></title>
      <url>https://zhongwuzw.github.io/2016/12/02/%E8%A7%A3%E5%86%B3https%E6%B7%B7%E5%90%88http%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h2 id="HTTPS页面混合不安全的HTTP请求"><a href="#HTTPS页面混合不安全的HTTP请求" class="headerlink" title="HTTPS页面混合不安全的HTTP请求"></a>HTTPS页面混合不安全的HTTP请求</h2><hr>
<p>在启用<code>HTTPS</code>页面时，如果出现<code>HTTP</code>请求，那么浏览器会报错，如下：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Mixed <span class="string">Content:</span> The page at ‘<span class="string">https:</span><span class="comment">//www.taobao.com/‘ was loaded over HTTPS, but requested an insecure image ‘http://g.alicdn.com/s.gif’. This content should also be served over HTTPS.</span></div></pre></td></tr></table></figure>
<p>既浏览器会<code>Block</code>掉不安全的<code>HTTP</code>请求，所以解决方法有三种：</p>
<ol>
<li>最简单的，将<code>HTTP</code>替换为<code>HTTPS</code>。</li>
<li>去掉<code>URL</code>中的<code>http://</code>或<code>https://</code>，将其替换为<code>//</code>，这样，浏览器就可以根据当前页面的请求方式来动态切换了。</li>
<li>如果涉及到第三方的资源，无法直接修改源代码，如腾讯公益404的<code>JavaScript</code>代码如下，<code>document.write</code>函数写入两个<code>JavaScript</code>文件，而这两个文件中包含了<code>HTTP</code>的请求。这个时候，我们可以在<code>&lt;head&gt;</code>中添加<code>&lt;meta http-equiv=&quot;Content-Security-Policy&quot; content=&quot;upgrade-insecure-requests&quot;&gt;</code>,浏览器会在加载<code>HTTP</code>资源时自动替换成<code>HTTPS</code>请求。</li>
</ol>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> _base = '<span class="comment">//qzone.qq.com/gy/404/';</span></div><div class="line">document.write('&lt;scri' + <span class="symbol">'pt</span> <span class="class"><span class="keyword">type</span></span>=<span class="string">"text/javascript"</span> src=<span class="string">"' + _base + 'data.js"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/sc' + <span class="symbol">'ript</span>&gt;');</div><div class="line">document.write('&lt;scri' + <span class="symbol">'pt</span> <span class="class"><span class="keyword">type</span></span>=<span class="string">"text/javascript"</span> src=<span class="string">"' + _base + 'page.js"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/sc' + <span class="symbol">'ript</span>&gt;');</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[crontab执行Shell脚本时的工作目录]]></title>
      <url>https://zhongwuzw.github.io/2016/11/28/crontab%E6%89%A7%E8%A1%8CShell%E8%84%9A%E6%9C%AC%E6%97%B6%E7%9A%84%E5%B7%A5%E4%BD%9C%E7%9B%AE%E5%BD%95/</url>
      <content type="html"><![CDATA[<h2 id="crontab执行Shell脚本时的工作目录"><a href="#crontab执行Shell脚本时的工作目录" class="headerlink" title="crontab执行Shell脚本时的工作目录"></a>crontab执行Shell脚本时的工作目录</h2><hr>
<p>由于工作需要，创建了一个<code>crontab</code>定时任务，用来在每天固定时间执行一个<code>Shell</code>脚本，在<code>Shell</code>脚本中，有对该脚本所在目录的相关文件进行操作的逻辑，在一开始实现时，对当前目录的文件操作时都是使用的相对目录，即<code>./*</code>。在终端直接<code>sh</code>执行时没有任何问题，正常结束，而一旦在<code>crontab</code>中定时执行时，就出现问题，如提示<code>file not found</code>等错误。</p>
<h2 id="解决工作目录问题"><a href="#解决工作目录问题" class="headerlink" title="解决工作目录问题"></a>解决工作目录问题</h2><hr>
<p>出现问题后，我在脚本中试着打印出<code>crontab</code>执行时的当前目录，如<code>curPath=$(pwd)</code>，执行后发现，打印出的结果为<code>$HOME</code>的目录，而非脚本所在的原始目录，这就造成了在脚本中使用相对路径时出现找不到的情况。</p>
<p>找到问题后，解决方法有两个：</p>
<ol>
<li>将相对路径替换为绝对路径。（ps：如脚本中包含某些<code>Shell</code>命令，且命令的某些参数为默认当前目录的，都需要显式的给出绝对路径）</li>
<li>在操作相对路径之前，使用<code>cd /....../</code>，在执行脚本时强制进入到该目录。</li>
</ol>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><hr>
<p>系统在执行定时任务时，是不会加载任何环境变量的，所以当脚本需要<code>Java</code>或其他环境变量时，可以通过在脚本中添加<code>source /etc/profile</code>命令来使配置生效。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[NSURLSession之使用Keep-Alive长连接]]></title>
      <url>https://zhongwuzw.github.io/2016/11/12/NSURLSession%E4%B9%8B%E4%BD%BF%E7%94%A8keep-alive%E9%95%BF%E8%BF%9E%E6%8E%A5/</url>
      <content type="html"><![CDATA[<h2 id="HTTP-Keep-Alive"><a href="#HTTP-Keep-Alive" class="headerlink" title="HTTP Keep-Alive"></a>HTTP Keep-Alive</h2><hr>
<p><code>HTTP</code>的<code>Keep-Alive</code>，是<code>HTTP 1.1</code>默认的功能（<code>HTTP 1.0</code>可以在请求头中设置<code>Keep-Alive</code>来显式开启），其表示持久连接，以前我们所使用的<code>HTTP</code>请求，当发出请求并接收完响应后，将关闭<code>TCP</code>连接，所以，如果我们短时间内进行大量的<code>HTTP</code>请求的话，会导致过多的<code>TCP</code>连接建立、关闭消耗.</p>
<h2 id="HTTP-Keep-Alive-vs-TCP-KeepAlive"><a href="#HTTP-Keep-Alive-vs-TCP-KeepAlive" class="headerlink" title="HTTP Keep-Alive vs TCP KeepAlive"></a>HTTP Keep-Alive vs TCP KeepAlive</h2><hr>
<p>注意，我们目前说的都是<code>HTTP</code>的<code>Keep-Alive</code>，其实，<code>TCP</code>也有<code>KeepAlive</code>的概念，它解决的主要问题是，当连接建立后，如果没有数据传输，或者隔一段时间才发送一次数据时，如何来确定<code>Client</code>是否在线，连接是否需要保持，<code>TCP</code>解决方法为，当超过一段时间后，<code>TCP</code>会自动发送一个数据为空的报文给<code>Client</code>，如果对方回应了，则连接继续保持，否则，在重试多次无果后将关闭连接。</p>
<h2 id="Pipeline"><a href="#Pipeline" class="headerlink" title="Pipeline"></a>Pipeline</h2><hr>
<p><code>HTTP 1.1</code>引入了<code>Pipeline</code>,其基于<code>Keep-Alive</code>，既利用一个连接做多次请求，当<code>Client</code>提交多个请求时，不需要等第一个请求的响应接收完就能发起第二个请求，既实现类似于流水作业的功能。目前主流服务器都支持<code>Keep-Alive</code>和<code>Pipeline</code>。</p>
<h2 id="使用NSURLSession开启Keep-Alive、Pipeline"><a href="#使用NSURLSession开启Keep-Alive、Pipeline" class="headerlink" title="使用NSURLSession开启Keep-Alive、Pipeline"></a>使用NSURLSession开启Keep-Alive、Pipeline</h2><hr>
<a id="more"></a>
<ul>
<li><p>开启<code>NSURLSession</code>配置<code>NSURLSessionConfiguration</code>的<code>HTTPShouldUsePipelining</code>属性为<code>YES</code>。</p>
</li>
<li><p>开启<code>NSMutableURLRequest</code>的<code>HTTPShouldUsePipelining</code>为<code>YES</code>。（<code>NSMutableURLRequest</code>可以继承<code>NSURLSessionConfiguration</code>的配置，所以如果<code>NSURLSession</code>配置了，则每个请求就不再需要单独配置可。）</p>
</li>
<li><p>确保发出的请求在同一个<code>NSURLSession</code>中，因为每一个<code>NSURLSession</code>使用单独的连接池，所以如果<code>NSURLSession</code>不同，那么就无法利用<code>Keep-Alive</code>、<code>Pipeline</code>了。</p>
</li>
<li><p>如果请求开启了认证，则相同的认证才能利用<code>Keep-Alive</code>、<code>Pipeline</code>。</p>
</li>
</ul>
<h2 id="附"><a href="#附" class="headerlink" title="附"></a>附</h2><hr>
<ul>
<li><p>使用<code>SDWebImage</code>库的类别<code>UIImageView+WebCache</code>加载图片时，默认使用的共享的<code>NSURLSession</code>，且开启了<code>HTTPShouldUsePipelining</code>。</p>
</li>
<li><p>使用<code>AFNetworking</code>库时，每个<code>AFHTTPSessionManager</code>都会创建一个单独的<code>NSURLSession</code>。</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hadoop相关总结]]></title>
      <url>https://zhongwuzw.github.io/2016/11/02/Hadoop%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><hr>
<ol>
<li><p>命令行执行<code>Job</code>任务时，出现如下问题，原因为<code>MacOS</code>系统的文件系统大小写不敏感，导致在<code>unjar</code>包时报错，有命名冲突。</p>
 <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Exception <span class="keyword">in</span> thread <span class="string">"main"</span> java<span class="selector-class">.io</span><span class="selector-class">.IOException</span>: Mkdirs failed to create /var/folders/zz/zyxvpxvq6csfxvn_n0000000000000/T/hadoop-unjar3745345762036287746/license</div><div class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.util</span><span class="selector-class">.RunJar</span><span class="selector-class">.ensureDirectory</span>(RunJar<span class="selector-class">.java</span>:<span class="number">128</span>)</div><div class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.util</span><span class="selector-class">.RunJar</span><span class="selector-class">.unJar</span>(RunJar<span class="selector-class">.java</span>:<span class="number">104</span>)</div><div class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.util</span><span class="selector-class">.RunJar</span><span class="selector-class">.unJar</span>(RunJar<span class="selector-class">.java</span>:<span class="number">81</span>)</div><div class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.util</span><span class="selector-class">.RunJar</span><span class="selector-class">.run</span>(RunJar<span class="selector-class">.java</span>:<span class="number">209</span>)</div><div class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.util</span><span class="selector-class">.RunJar</span><span class="selector-class">.main</span>(RunJar<span class="selector-class">.java</span>:<span class="number">136</span>)</div></pre></td></tr></table></figure>
<p> 解决方法为执行如下命令，删除<code>jar</code>文件中的这两个文件。</p>
 <figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">zip</span> -<span class="keyword">d</span> Documents/<span class="keyword">Test</span>.jar LICENSE</div><div class="line"><span class="keyword">zip</span> -<span class="keyword">d</span> Documents/<span class="keyword">Test</span>.jar META-<span class="keyword">INF</span>/LICENSE</div></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li>使用<code>Eclipse</code>导出可供<code>Hadoop</code>执行的<code>jar</code>包时，导出的类型应选择<code>Runnable JAR file</code>。</li>
</ol>
<ol>
<li><p>在集群上搭建<code>Hadoop</code>时，一切正常，为了<code>Debug</code>在本机搭建，使用<code>Pseudo-Distributed Mode</code>模式时，<code>node</code>的状态变为<code>unhealthy</code>，可以采取比较trick的方法来解决，既在<code>yarn-site.xml</code>中添加属性来扩大健康范围，如下：</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">    <span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>    </div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.disk-health-checker.min-healthy-disks<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.disk-health-checker.max-disk-utilization-per-disk-percentage<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>100.0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<a id="more"></a>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><hr>
<ol>
<li>使用<code>Hadoop</code>命令执行<code>Job</code>示例：<br> <code>hadoop jar Documents/Test.jar hdfs://localhost:9000/user/zhongwu/sample.txt hdfs://localhost:9000/user/zhongwu/output111</code></li>
</ol>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><hr>
<ol>
<li><p><code>MapReduce</code>作业成为<code>job</code>，有两类节点控制着作业执行过程：一个<code>jobtracker</code>及一系列<code>tasktracker</code>。<code>jobtracker</code>通过调度<code>tasktracker</code>上运行的任务来协调所有运行在系统上的作业。<code>tasktracker</code>在运行任务的同时将运行报告发送给<code>jobtracker</code>，<code>jobtracker</code>由此记录每项作业任务的整体进度情况。如果其中一个任务失败，<code>jobtracker</code>可以在另外一个<code>tasktracker</code>节点上重新调度该任务。</p>
</li>
<li><p><code>HDFS</code>集群有两类节点以管理者-工作者模式运行，即一个<code>namenode</code>(管理者)和多个<code>datanode</code>(工作者)。<code>namenode</code>管理文件系统的命名空间。它维护着文件系统树及整颗树内所有的文件和目录。这些信息以两个文件形式永久保存在本地磁盘上：命名空间镜像文件和编辑日志文件。<code>namenode</code>也记录着每个文件中各个块所在的数据节点信息，但它并不永久保存块的位置信息，因为这些信息会在系统启动时由数据节点重建。<code>namenode</code>只需要响应块位置的请求，无需响应数据请求，否则随着客户端数量的增长，<code>namenode</code>会很快成为瓶颈。</p>
</li>
</ol>
<h2 id="配置参考"><a href="#配置参考" class="headerlink" title="配置参考"></a>配置参考</h2><hr>
<p><code>hdfs-site.xml</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="php"><span class="meta">&lt;?</span>xml-stylesheet type=<span class="string">"text/xsl"</span> href=<span class="string">"configuration.xsl"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  Licensed under the Apache License, Version 2.0 (the "License");</div><div class="line">  you may not use this file except in compliance with the License.</div><div class="line">  You may obtain a copy of the License at</div><div class="line"></div><div class="line">    http://www.apache.org/licenses/LICENSE-2.0</div><div class="line"></div><div class="line">  Unless required by applicable law or agreed to in writing, software</div><div class="line">  distributed under the License is distributed on an "AS IS" BASIS,</div><div class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</div><div class="line">  See the License for the specific language governing permissions and</div><div class="line">  limitations under the License. See accompanying LICENSE file.</div><div class="line">--&gt;</div><div class="line"><span class="comment">&lt;!-- Put site-specific property overrides in this file. --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>tag</div><div class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/Cellar/hadoop/name1<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/Cellar/hadoop/data1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>mapred-site.xml</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="php"><span class="meta">&lt;?</span>xml-stylesheet type=<span class="string">"text/xsl"</span> href=<span class="string">"configuration.xsl"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  Licensed under the Apache License, Version 2.0 (the "License");</div><div class="line">  you may not use this file except in compliance with the License.</div><div class="line">  You may obtain a copy of the License at</div><div class="line"></div><div class="line">    http://www.apache.org/licenses/LICENSE-2.0</div><div class="line"></div><div class="line">  Unless required by applicable law or agreed to in writing, software</div><div class="line">  distributed under the License is distributed on an "AS IS" BASIS,</div><div class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</div><div class="line">  See the License for the specific language governing permissions and</div><div class="line">  limitations under the License. See accompanying LICENSE file.</div><div class="line">--&gt;</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Put site-specific property overrides in this file. --&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>mapred.child.java.opts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>-Xmx400m<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.permissions<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.input.fileinputformat.input.dir.recursive<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>127.0.0.1:10020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>127.0.0.1:19888<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>core-site.xml</code></p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span></div><div class="line"><span class="php"><span class="meta">&lt;?</span>xml-stylesheet type=<span class="string">"text/xsl"</span> href=<span class="string">"configuration.xsl"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  Licensed under the Apache License, Version 2.0 (the "License");</div><div class="line">  you may not use this file except in compliance with the License.</div><div class="line">  You may obtain a copy of the License at</div><div class="line"></div><div class="line">    http://www.apache.org/licenses/LICENSE-2.0</div><div class="line"></div><div class="line">  Unless required by applicable law or agreed to in writing, software</div><div class="line">  distributed under the License is distributed on an "AS IS" BASIS,</div><div class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</div><div class="line">  See the License for the specific language governing permissions and</div><div class="line">  limitations under the License. See accompanying LICENSE file.</div><div class="line">--&gt;</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Put site-specific property overrides in this file. --&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://127.0.0.1:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/Cellar/hadoop/tmp/hadoop-$<span class="template-variable">&#123;user.name&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>yarn-site.xml</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  Licensed under the Apache License, Version 2.0 (the "License");</div><div class="line">  you may not use this file except in compliance with the License.</div><div class="line">  You may obtain a copy of the License at</div><div class="line"></div><div class="line">    http://www.apache.org/licenses/LICENSE-2.0</div><div class="line"></div><div class="line">  Unless required by applicable law or agreed to in writing, software</div><div class="line">  distributed under the License is distributed on an "AS IS" BASIS,</div><div class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</div><div class="line">  See the License for the specific language governing permissions and</div><div class="line">  limitations under the License. See accompanying LICENSE file.</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>127.0.0.1:8032<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>127.0.0.1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.resource.memory-mb<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>8090<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>127.0.0.1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log.server.url<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>http://127.0.0.1:19888/jobhistory/logs/<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.disk-health-checker.min-healthy-disks<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.disk-health-checker.max-disk-utilization-per-disk-percentage<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>100.0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[UIWebView相关协议方法总结]]></title>
      <url>https://zhongwuzw.github.io/2016/10/20/UIWebView%E7%9B%B8%E5%85%B3%E5%8D%8F%E8%AE%AE%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="UIWebView-Private-Method"><a href="#UIWebView-Private-Method" class="headerlink" title="UIWebView Private Method"></a>UIWebView Private Method</h2><hr>
<ul>
<li>UIWebView dump method:<a href="https://github.com/nst/iOS-Runtime-Headers/blob/f7f2c13158ff4ecd15b92eefb5c5d365b126db05/Frameworks/UIKit.framework/UIWebView.h" target="_blank" rel="external">UIWebView.h</a></li>
<li>设置<code>UIWebView</code>在<code>WebThread</code>线程下进行渲染，不占用主线程，代码如下：<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[_webView <span class="string">performSelector:</span><span class="meta">@selector</span>(<span class="string">_setDrawInWebThread:</span>) <span class="string">withObject:</span><span class="meta">@YES</span>];</div><div class="line">[_webView <span class="string">performSelector:</span><span class="meta">@selector</span>(<span class="string">_setDrawsCheckeredPattern:</span>) <span class="string">withObject:</span><span class="meta">@YES</span>];</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="WebResourceLoadDelegate-Protocol"><a href="#WebResourceLoadDelegate-Protocol" class="headerlink" title="WebResourceLoadDelegate Protocol"></a>WebResourceLoadDelegate Protocol</h2><hr>
<ul>
<li><p><code>- (id)webView:(WebView *)sender identifierForInitialRequest:(NSURLRequest *)request fromDataSource:(WebDataSource *)dataSource</code></p>
<p>  该方法返回一个标识符对象，网页中的每一个资源都会调用该方法。资源包括网页中嵌入的图片、脚本、<code>CSS</code>、嵌入在<code>frame</code>中的页面。</p>
</li>
</ul>
<a id="more"></a>
<h2 id="UIWebViewDelegate-Protocol"><a href="#UIWebViewDelegate-Protocol" class="headerlink" title="UIWebViewDelegate Protocol"></a>UIWebViewDelegate Protocol</h2><hr>
<ul>
<li><p><code>- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType</code></p>
<p>  webView在加载一个frame之前会回调该方法，加载frame的情形包括加载新的页面、加载<code>iframe</code>的url时。<code>navigationType</code>变量是一个枚举值，标识用户的动作，如点击、提交表单、前进、重载、重新提交表单、以及其他，其他包括重定向等。（注意，调用该方法，并不代表会发生真正的服务器请求，比如<code>fragment</code>）</p>
</li>
<li><p><code>- (void)webViewDidFinishLoad:(UIWebView *)webView</code></p>
<p>  注意，该方法并不是表示webView完成了网页的加载，而是表示完成了一个frame的加载，所以可能会出现加载一个网页时被调用多次的情况。 </p>
</li>
<li><p><code>- (void)webViewDidStartLoad:(UIWebView *)webView</code></p>
<p>  当webView开始加载<code>frame</code>时调用，注意，该方法不管加载是否成功都会调用。</p>
</li>
</ul>
<h2 id="WebFrameLoadDelegate-Protocol"><a href="#WebFrameLoadDelegate-Protocol" class="headerlink" title="WebFrameLoadDelegate Protocol"></a>WebFrameLoadDelegate Protocol</h2><hr>
<ul>
<li><p><code>- (void)webView:(WebView *)sender didFinishLoadForFrame:(WebFrame *)frame</code></p>
<p>  当<code>frame</code>完成时调用，既<code>frame</code>的所有资源都已经加载完成。<code>WebFrame</code>封装了一个单独的<code>frame</code>元素，而一个完整的页面则由一个<code>WebFrame</code>的层级树组成，根<code>WebFrame</code>称为<code>main frame</code>，每一个<code>WebFrame</code>都对应一个<code>WebFrameView</code>，其用来显示<code>frame</code>的内容。</p>
</li>
</ul>
<ul>
<li><p><code>- (void)webView:(WebView *)sender didReceiveTitle:(NSString *)title forFrame:(WebFrame *)frame</code></p>
<p>  当<code>frame</code>获取到<code>title</code>时调用，该方法可能会被调用多次，想要及时更新标题的话可以实现该方法。</p>
</li>
</ul>
<h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><hr>
<ol>
<li>在请求资源数据时，由于是异步的，所以可能成功，也可能失败，因此<code>Data Sources</code>就分为<code>Provisional</code>和<code>Committed</code>。一开始，<code>data source</code>是<code>Provisional</code>的，因为还不知道页面是否会加载成功，只要有响应数据到来，<code>data source</code>就将变成<code>Committed</code>的。</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用PyMySQL处理大结果集的方法]]></title>
      <url>https://zhongwuzw.github.io/2016/10/13/%E4%BD%BF%E7%94%A8PyMySQL%E5%A4%84%E7%90%86%E5%A4%A7%E7%BB%93%E6%9E%9C%E9%9B%86%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="使用PyMySQL处理大结果集的方法"><a href="#使用PyMySQL处理大结果集的方法" class="headerlink" title="使用PyMySQL处理大结果集的方法"></a>使用PyMySQL处理大结果集的方法</h2><hr>
<p>最近公司项目需要向别的数据库中获取数据并同步到自己的数据库，由于是别人的库，所以没法直接使用<code>Master-Slave</code>同步，最终选择Python脚本来获取。</p>
<p>选择了<a href="https://github.com/PyMySQL/PyMySQL" target="_blank" rel="external">PyMySQL</a>客户端库，按照其官方教程，代码比较简单，类似如下：</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">import pymysql.cursors</div><div class="line"></div><div class="line"><span class="comment"># Connect to the database</span></div><div class="line">connection = pymysql.connect(host=<span class="string">'localhost'</span>,</div><div class="line">                             user=<span class="string">'user'</span>,</div><div class="line">                             password=<span class="string">'passwd'</span>,</div><div class="line">                             db=<span class="string">'db'</span>,</div><div class="line">                             charset=<span class="string">'utf8mb4'</span>,</div><div class="line">                             cursorclass=pymysql.cursors.DictCursor)</div><div class="line"></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">with</span> connection.cursor() <span class="keyword">as</span> cursor:</div><div class="line">        <span class="comment"># Read a single record</span></div><div class="line">        sql = <span class="string">"SELECT `id`, `password` FROM `users`"</span></div><div class="line">        cursor.execute(sql)</div><div class="line">        <span class="built_in">result</span> = cursor.fetchall()</div><div class="line">        print(<span class="built_in">result</span>)</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    connection.<span class="built_in">close</span>()</div></pre></td></tr></table></figure>
<p><code>PyMySQL</code>在获取数据时提供了<code>fetchone()</code>和<code>fetchall()</code>函数来获取结果集，后来调试的时候，发现，不管是哪种方法，都会一次将所有结果获取到，这在数据量很大时将会消耗大量内存，所以有考虑是否还有别的方法，比如<code>one-by-one</code>的迭代获取。</p>
<p>在查看<code>DictCursor</code>游标代码时，发现了<code>SSCursor</code>游标类，其注释如下，意在解决数据量大的问题，正合我意。</p>
<a id="more"></a>
<figure class="highlight mizar"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">class SSCursor(Cursor):</div><div class="line">    """</div><div class="line">    Unbuffered Cursor, mainly useful <span class="keyword">for</span> queries <span class="keyword">that</span> return a lot <span class="keyword">of</span> data,</div><div class="line">    <span class="keyword">or</span> <span class="keyword">for</span> connections to remote servers over a slow network.</div><div class="line"></div><div class="line">    Instead <span class="keyword">of</span> copying every row <span class="keyword">of</span> data into a buffer, this will fetch</div><div class="line">    rows <span class="keyword">as</span> needed. The upside <span class="keyword">of</span> this, <span class="keyword">is</span> the client uses much less memory,</div><div class="line">    <span class="keyword">and</span> rows are returned much faster when traveling over a slow network,</div><div class="line">    <span class="keyword">or</span> if the result <span class="keyword">set</span> <span class="keyword">is</span> very big.</div><div class="line"></div><div class="line">    There are limitations, though. The MySQL protocol doesn't support</div><div class="line">    returning the total number <span class="keyword">of</span> rows, so the only way to tell how many rows</div><div class="line">    there are <span class="keyword">is</span> to iterate over every row returned. Also, it currently isn't</div><div class="line">    possible to scroll backwards, <span class="keyword">as</span> only the current row <span class="keyword">is</span> held <span class="keyword">in</span> memory.</div><div class="line">    """</div></pre></td></tr></table></figure>
<p><code>DictCursor</code>游标类的方法返回都是一个迭代器，可以使用这个迭代器进行迭代获取，这样就不用一次将所有数据保存在内存中了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fetchall_unbuffered</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Fetch all, implemented as a generator, which isn't to standard,</div><div class="line">    however, it doesn't make sense to return everything in a list, as that</div><div class="line">    would use ridiculous memory for large result sets.</div><div class="line">    """</div><div class="line">    <span class="keyword">return</span> iter(self.fetchone, <span class="keyword">None</span>)</div></pre></td></tr></table></figure>
<p>使用方法如下：</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">import pymysql.cursors</div><div class="line">src_pc_database = pymysql.connect(host=<span class="string">'192.168.39.51'</span>, port=<span class="number">5151</span>, user=<span class="string">'*'</span>, password=<span class="string">'*'</span>,</div><div class="line">                               db=<span class="string">'testdataanalyse'</span>,</div><div class="line">                               charset=<span class="string">'utf8mb4'</span>, cursorclass=pymysql.cursors.SSDictCursor)</div><div class="line"></div><div class="line"><span class="keyword">with</span> src_pc_database.cursor() <span class="keyword">as</span> src_cursor:</div><div class="line">    sql = <span class="string">"select * from user"</span></div><div class="line">    src_cursor.execute(sql)</div><div class="line">    <span class="built_in">result</span> = src_cursor.fetchone()</div><div class="line">    </div><div class="line">    <span class="keyword">while</span> <span class="built_in">result</span> is <span class="keyword">not</span> None:</div><div class="line">        <span class="built_in">result</span> = src_cursor.fetchone()</div><div class="line"></div><div class="line">src_pc_database.<span class="built_in">close</span>()</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS相关tips]]></title>
      <url>https://zhongwuzw.github.io/2016/10/10/iOS%E7%9B%B8%E5%85%B3tips/</url>
      <content type="html"><![CDATA[<hr>
<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><hr>
<ul>
<li><p>iOS8.3之后，通过iTunes、iFunBox等工具已无法直接访问应用的沙盒，如果需要让自己的应用能够通过其访问，必须在应用的<code>info.plist</code>中添加<code>UIFileSharingEnabled</code>关键字，并赋值为<code>YES</code>，这样，就能访问其<code>Documents</code>目录了(注意，其它目录还是无法访问)。</p>
</li>
<li><p>使用<code>UIWebView</code>时，发现在首次加载网页时，加载时间异常的长，其原因是服务器需要花费一定的时间来解析请求来自于哪个平台，比如<code>PC</code>、<code>iPhone</code>、<code>iPad</code>等，以针对不同的平台响应不同的页面布局，解决该问题的方法为客户端直接请求特定版本的页面，且设置请求的<code>UA</code>(<code>User Agent</code>)，如下代码：</p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[NSUserDefaults standardUserDefaults] registerDefaults:@&#123;@<span class="string">"UserAgent"</span> : @<span class="string">"    Mozilla/5.0 (iPhone; CPU iPhone OS 10_0 like Mac OS X) AppleWebKit/602.1.38 (KHTML, like Gecko) Version/10.0 Mobile/14A300 Safari/602.1"</span>&#125;]<span class="comment">;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在使用<code>UIBarButtonItem</code>，并对其使用<code>UIImage</code>赋值时，iOS7之后会对<code>UIImage</code>设置<code>tintColor</code>，从而改变图片的原值色，如果需要保留图片原色，可以对<code>UIImage</code>进行如下代码设置：</p>
  <figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">UIImage *<span class="built_in">image</span> = [UIImage imageNamed:@<span class="string">"myImage.png"</span>];</div><div class="line"><span class="built_in">image</span> = [<span class="built_in">image</span> imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];</div></pre></td></tr></table></figure>
<a id="more"></a>
</li>
</ul>
<ul>
<li><p>iOS7之后，对于<code>UIViewController</code>的内容布局，默认会从屏幕顶部开始，这就会导致内容被状态栏所覆盖。<br> 如果<code>UIViewController</code>包含在<code>UINavigationController</code>下且<code>navigationBar</code>是可见的，那么可以使用如下代码来使内容布局不被状态栏覆盖：</p>
  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>.edgesForExtendedLayout = <span class="built_in">UIRectEdgeNone</span>;</div></pre></td></tr></table></figure>
<p>  如果<code>navigationBar</code>不可见，那么就只能调整<code>UIVew</code>的位置了，向下移20 points。</p>
</li>
<li><p><code>UIWebView</code>加载页面时底部出现黑条问题解决方法：设置<code>UIWebView</code>的<code>backgroundColor</code>为<code>clearColor</code>，<code>opaque</code>为<code>NO</code>即可。</p>
</li>
<li><p>当我们使用<a href="https://github.com/Carthage/Carthage" target="_blank" rel="external">Carthage</a>作为依赖管理器时，安装库时，经常会执行<code>carthage update</code>命令，此时，不同的库，可能会生成多个平台的<code>frameworks</code>，如<code>iOS</code>，<code>macOS</code>，<code>watchOS</code>，<code>tvOS</code>，所以，如果我们的项目只需要使用到<code>iOS</code>的<code>framework</code>，那么可以在执行<code>update</code>命令时加上参数，如<code>carthage update --platform iOS</code></p>
</li>
<li><p>当在<code>UIWebView</code>中播放<code>audio</code>时，默认在应用进入后台或锁定等情况时，<code>audio</code>会暂停。解决方法为：</p>
<ul>
<li><p>在<code>info.plist</code>中加入键值对如下：</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> <span class="tag">&lt;<span class="name">key</span>&gt;</span>UIBackgroundModes<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">array</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>audio<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">array</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>设置<code>Audio Session</code>的类别，默认类别为<code>AVAudioSessionCategorySoloAmbient</code>,将类别设置为<code>AVAudioSessionCategoryPlayback</code>，代码如下:</p>
 <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;AVFoundation/AVFoundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;AudioToolbox/AudioToolbox.h&gt;</span></span></div><div class="line">     </div><div class="line"><span class="built_in">AVAudioSession</span> *audioSession = [<span class="built_in">AVAudioSession</span>  sharedInstance];</div><div class="line">     </div><div class="line"><span class="built_in">NSError</span> *setCategoryError = <span class="literal">nil</span>;</div><div class="line"><span class="built_in">BOOL</span> success = [audioSession setCategory:<span class="built_in">AVAudioSessionCategoryPlayback</span> error:&amp;setCategoryError];</div><div class="line"><span class="keyword">if</span> (!success) &#123; <span class="comment">/* handle the error condition */</span> &#125;</div><div class="line"> </div><div class="line"><span class="built_in">NSError</span> *activationError = <span class="literal">nil</span>;</div><div class="line">success = [audioSession setActive:<span class="literal">YES</span> error:&amp;activationError];</div><div class="line"><span class="keyword">if</span> (!success) &#123; <span class="comment">/* handle the error condition */</span> &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<ul>
<li><p><em>非越狱</em>下获取设备安装的所有应用：</p>
  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Class c = <span class="built_in">NSClassFromString</span>(<span class="string">@"LSApplicationWorkspace"</span>);</div><div class="line"><span class="keyword">id</span> s = [(<span class="keyword">id</span>)c performSelector:<span class="built_in">NSSelectorFromString</span>(<span class="string">@"defaultWorkspace"</span>)];</div><div class="line">    </div><div class="line"><span class="built_in">NSArray</span> *arr = [s performSelector:<span class="built_in">NSSelectorFromString</span>(<span class="string">@"allInstalledApplications"</span>)];</div><div class="line">    </div><div class="line"><span class="keyword">for</span> (<span class="keyword">id</span> item <span class="keyword">in</span> arr) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,[item performSelector:<span class="built_in">NSSelectorFromString</span>(<span class="string">@"applicationIdentifier"</span>)]); </div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,[item performSelector:<span class="built_in">NSSelectorFromString</span>(<span class="string">@"bundleVersion"</span>)]);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,[item performSelector:<span class="built_in">NSSelectorFromString</span>(<span class="string">@"shortVersionString"</span>)]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>当使用<code>Core Foundation</code>时，当你是对象的拥有者时，需要调用<code>CFRelease</code>，这里需要注意的是，不能调用<code>CFRelease(NULL)</code>，会导致程序崩溃，所以，调用<code>CFRelease</code>前需先判断一下对象是否存在（当然，有些特定的release函数容许<code>NULL</code>参数，如<code>CGGradientRelease</code>)。</p>
</li>
<li><p><code>UITableViewCell</code>默认分割线会在左侧留出一定的间距，如果想调整分割线的左、右间距，可以通过调整<code>UITableView</code>的<code>separatorInset</code>属性。</p>
</li>
<li><p>当使用<code>WKWebView</code>的<code>WKScriptMessageHandler</code>时，<code>WKUserContentController</code>会<code>retain</code> <code>message handler</code>，所以，要注意避免循环引用。</p>
</li>
<li><p><code>CAAnimation</code>的<code>delegate</code>是强引用的，强引用的，强引用的。可以通过操作完成后移除动画或设置一个代理对象作为<code>delegate</code>。</p>
</li>
<li><p>当使用<code>UIView</code>、<code>CALayer</code>的<code>transform</code>时，会影响到<code>frame</code>属性，此时我们应该废弃掉<code>frame</code>，而是通过<code>bounds</code>和<code>position</code>、<code>center</code>来进行设置。</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[修改Nginx的网站根目录]]></title>
      <url>https://zhongwuzw.github.io/2016/09/24/%E8%B0%83%E6%95%B4Nginx%E7%9A%84%E7%BD%91%E7%AB%99%E6%A0%B9%E7%9B%AE%E5%BD%95/</url>
      <content type="html"><![CDATA[<h2 id="修改Nginx的网站根目录"><a href="#修改Nginx的网站根目录" class="headerlink" title="修改Nginx的网站根目录"></a>修改Nginx的网站根目录</h2><hr>
<p>Nginx的默认网站文件保存在<code>nginx</code>的<code>html</code>目录下，由于我开发时都把项目放在自己的<code>workspace</code>里，所以准备更改网站根目录，更改方法为修改<code>nginx.conf</code>配置文件的<code>root</code>指令，<code>root</code>指令可以放在<code>http</code>、<code>server</code>、<code>location</code>块中，我选择把<code>root</code>指令放在<code>server</code>块中，如下所示：</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class">http </span>&#123;</div><div class="line">    include       mime.types;</div><div class="line">    default_type  application/octet-stream;</div><div class="line"></div><div class="line">    <span class="meta">#access_log  logs/access.log  main;</span></div><div class="line"></div><div class="line">    sendfile        on;</div><div class="line">    <span class="meta">#tcp_nopush     on;</span></div><div class="line">    </div><div class="line">    keepalive_timeout  <span class="number">65</span>;</div><div class="line"></div><div class="line">    <span class="meta">#gzip  on;</span></div><div class="line"></div><div class="line">    <span class="class">server </span>&#123;</div><div class="line">        listen       <span class="number">80</span>;</div><div class="line">        server_name  localhost;</div><div class="line">        <span class="comment">//配置root指令</span></div><div class="line">        root /Users<span class="meta-keyword">/zhongwu/</span>Documents<span class="meta-keyword">/workspace/</span>web;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>配置完成后，执行<code>sudo ./nginx -s reload</code>命令，Nginx支持动态更新配置信息。</p>
<p>访问一下网页测一下，发现返回状态码403，既请求被服务器拒绝了，查看Nginx的<code>error.log</code>后，发现如下log，既Nginx没有打开该html文件的权限，所以得解决权限的问题。</p>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">2016</span>/<span class="number">09</span>/<span class="number">24</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">39</span> <span class="string">[error]</span> <span class="number">16397</span>#<span class="number">0</span>: *<span class="number">15</span> open() <span class="string">"/Users/zhongwu/Documents/workspace/web/lounge.html"</span> failed (<span class="number">13</span>: Permission denied), client: <span class="number">127.0.0.1</span>, server: localhost, request: <span class="string">"<span class="keyword">GET</span> /lounge.html HTTP/1.1"</span>, host: <span class="string">"127.0.0.1"</span></div></pre></td></tr></table></figure>
<p>首先我们来了解Nginx的用户权限，Nginx的<code>master</code>进程是<code>root</code>权限，而<code>worker</code>进程默认是<code>nobody</code>用户，用户组同为<code>nobody</code>，由于请求的处理是由<code>worker</code>进程处理的，所以，需要修改<code>worker</code>的用户，将其修改为我的<code>workspace</code>目录的用户，方法为直接修改Nginx配置文件，在<code>nginx.conf</code>配置文件中添加<code>user  zhongwu staff;//zhongwu是我的workspace用户，staff是用户组</code>。<br>再访问以下，成功。</p>
<h2 id="解决127-0-0-1能访问，而localhost不能访问"><a href="#解决127-0-0-1能访问，而localhost不能访问" class="headerlink" title="解决127.0.0.1能访问，而localhost不能访问"></a>解决127.0.0.1能访问，而localhost不能访问</h2><hr>
<p>项目出现127.0.0.1能访问，而localhost却访问不了的问题，定位，应该是<code>dns</code>域名解析的问题，查看<code>/etc/hosts</code>文件，发现有一条记录为：<code>::1 localhost</code>，<code>::1</code>是<code>ipv6</code>的表示方法，将其改为<code>ipv4</code>的，既将<code>::1</code>替换为<code>127.0.0.1</code>，因为Nginx默认并没有开启监听<code>ipv6</code>地址。</p>
<p>再次访问，localhost就能访问了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS获取通话记录]]></title>
      <url>https://zhongwuzw.github.io/2016/09/22/iOS%E8%8E%B7%E5%8F%96%E9%80%9A%E8%AF%9D%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p><code>iOS8.3</code>之后，存放通话日志的数据库的位置换成了<code>/private/var/mobile/Library/CallHistoryDB/</code>目录，数据库名为<code>CallHistory.storedata</code>，由于其采用了<code>Sqlite</code>的<code>wal</code>机制，所以还有两个文件，分别为<code>CallHistory.storedata-shm</code>、<code>CallHistory.storedata-wal</code>,一开始想得很简单，直接使用<code>Sqlite</code>打开该数据库，读取即可，后来发现使用<code>NSFileManager</code>并不能获取到该文件。接下来将详细列出解决思路。</p>
<h2 id="读取通话日志文件"><a href="#读取通话日志文件" class="headerlink" title="读取通话日志文件"></a>读取通话日志文件</h2><hr>
<p>直接使用<code>NSFileManager</code>不能获取到通话日志文件的原因很简单，因为App本身是在一个沙盒里面的，App只能访问自己的存储空间，系统有一套安全机制来对其进行限制。所以，首先得解决这个限制，解决方案是添加Entitlements授权，在Entitlements文件中添加如下代码：</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="params">&lt;key&gt;</span>com.apple.security.exception.files.absolute-path.read-write<span class="params">&lt;/key&gt;</span></div><div class="line"><span class="params">&lt;array&gt;</span></div><div class="line">	<span class="params">&lt;string&gt;</span><span class="meta-keyword">/private/</span>var<span class="meta-keyword">/mobile/</span>Library/CallHistoryDB/CallHistory.storedata-wal<span class="params">&lt;/string&gt;</span></div><div class="line">	<span class="params">&lt;string&gt;</span><span class="meta-keyword">/private/</span>var<span class="meta-keyword">/mobile/</span>Library/CallHistoryDB/CallHistory.storedata-shm<span class="params">&lt;/string&gt;</span></div><div class="line">	<span class="params">&lt;string&gt;</span><span class="meta-keyword">/private/</span>var<span class="meta-keyword">/mobile/</span>Library/CallHistoryDB/CallHistory.storedata<span class="params">&lt;/string&gt;</span></div><div class="line"><span class="params">&lt;/array&gt;</span></div></pre></td></tr></table></figure>
<p>这样，就能访问到通话日志文件。</p>
<h2 id="使用Sqlite读取数据库"><a href="#使用Sqlite读取数据库" class="headerlink" title="使用Sqlite读取数据库"></a>使用<code>Sqlite</code>读取数据库</h2><hr>
<p>使用<code>Sqlite</code>直接读取数据库内容时，发现，在调用<code>int errorCode = sqlite3_prepare_v2(database,[sqlStatement UTF8String],-1,&amp;compiledStatement, NULL);</code>时，出现错误，错误代码为<code>SQLITE_AUTH</code>，既没有权限，最后解决方案是，将3个文件内容读出，并保存到App自己的存储空间中，比如<code>Cache</code>目录中，再对保存到App存储目录中的数据库文件进行操作即可。</p>
<h2 id="解决wal模式问题"><a href="#解决wal模式问题" class="headerlink" title="解决wal模式问题"></a>解决<code>wal</code>模式问题</h2><hr>
<p>由于通话日志的数据库采用了新的事务设计<code>wal</code>（write-ahead logging），数据库修改后，首先会把修改内容写入日志（-wal），为了提高性能创建了一个内存索引（-shm），映射每一个page是否dirty，读取时先看需要的page是否在<code>wal</code>日志中，然后再读取，当达到一定条件后Sqlite会自动将数据flush到数据库文件，当然也可以手动flush，在打开数据库之后，调用<code>sqlite3_wal_checkpoint(database, NULL);</code>即可手动flush</p>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><hr>
<p>解决这几个问题后，就能成功读取通话日志了，其他的日志，如短信等等同理都可以读取到。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[epoll的两种工作模式]]></title>
      <url>https://zhongwuzw.github.io/2016/09/21/epoll%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p><code>epoll</code>是<code>Linux</code>下的一个多路复用API，当处理大并发的事件时，其性能远强于古老的<code>poll</code>和<code>select</code>。<code>epoll</code>可以工作在两种模式下，<code>LT</code>（水平触发）、<code>ET</code>（边缘触发），接下来将讨论这两种模式的区别。</p>
<h2 id="ET（边缘触发）和LT（水平触发）"><a href="#ET（边缘触发）和LT（水平触发）" class="headerlink" title="ET（边缘触发）和LT（水平触发）"></a><code>ET</code>（边缘触发）和<code>LT</code>（水平触发）</h2><hr>
<p>默认情况下，<code>epoll</code>采用<code>LT</code>模式工作，该模式支持阻塞和非阻塞套接字，如果想采用<code>ET</code>模式，可以使用<code>EPOLLET</code>参数。<code>ET</code>模式只支持非阻塞套接字，其效率要高于<code>LT</code>模式，两者的区别在于，当一个新的事件到来时，<code>LT</code>、<code>ET</code>模式下都可以通过<code>epoll_wait</code>方法来获取到这个事件，但是如果这次没有把这个事件对应的套接字缓冲区处理完，在这个套接字没有新的事件再次到来时，在<code>ET</code>模式下是无法再次从<code>epoll_wait</code>方法中获取到这个事件的；而<code>LT</code>模式则可以再次获取到，进而再次进行处理，其只要一个事件对应的套接字缓冲区还有数据，就总能从<code>epoll_wait</code>中获取到这个事件，因此，如果采用<code>ET</code>模式进行开发时，要特别注意，如果没有彻底的将缓冲区中的数据处理完，则会导致缓冲区中的用户请求得不到响应。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nginx的架构设计]]></title>
      <url>https://zhongwuzw.github.io/2016/09/18/Nginx%E7%9A%84%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</url>
      <content type="html"><![CDATA[<h2 id="Nginx架构概述"><a href="#Nginx架构概述" class="headerlink" title="Nginx架构概述"></a>Nginx架构概述</h2><hr>
<p>传统基于进程或线程的模型（<code>Apache</code>就采用这种模型）在处理并发连接时会为每一个连接建立一个单独的进程或线程，且在网络或者输入/输出操作时阻塞。这将导致内存和<code>CPU</code>的大量消耗，因为新起一个单独的进程或线程需要准备新的运行时环境，包括堆和栈内存的分配，以及新的执行上下文，当然，这些也会导致多余的<code>CPU</code>开销。最终，会由于过多的上下文切换而导致服务器性能变差。<br>反过来，我们来看Nginx的架构设计，总结起来，它是模块化的、基于事件驱动、异步、单线程且非阻塞。<br>Nginx大量使用多路复用和事件通知，Nginx会创建几个数量有限（比如<code>worker</code>的数量和<code>CPU</code>的核数相同）的<code>worker</code>进程，每个<code>worker</code>进程包含一个高效的Run-loop，来处理多个网络连接，每个<code>worker</code>进程每秒能处理成千的并发连接。</p>
<h3 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h3><p><code>worker</code>进程负责维护Run-loop，并且在请求处理的每个阶段执行相应模块代码，Nginx包括很多模块，如事件模块，状态处理模块，协议模块，负载均衡等。Nginx并不支持动态加载模块，模块只能在Nginx编译时进行添加进来。<br>在接收，处理和管理网络请求时，Nginx会根据操作系统的不同，采用特定的事件模型和磁盘<code>I/O</code>，以达到更高的性能，如<code>Linux</code>，<code>Solaris</code>以及基于<code>BSD</code>的操作系统，采用<code>epoll</code>，<code>kqueue</code>，<code>event ports</code>。<br>Nginx的架构图如下：<br><img src="http://oc54pu02q.bkt.clouddn.com/QQ20160918-0@2x.png" alt=""></p>
 <a id="more"></a>
<h3 id="Worker模型"><a href="#Worker模型" class="headerlink" title="Worker模型"></a>Worker模型</h3><p>前面提到，Nginx并不会为每一个连接新建一个进程来进行处理，相反，<code>worker</code>会从一个共享的监听套接字中获取新的请求，并在<code>worker</code>管理的Run-loop中处理请求。Nginx启动时，将创建初始的监听套接字，接下来，当<code>worker</code>处理<code>HTTP</code>请求和响应时，会持续的接收、读取、以及写入套接字。<br>Run-loop是<code>worker</code>的核心，它的主要思想是异步任务处理，实现方式包括模块化、事件通知、回调函数、定时器等。总的原则就是尽可能的非阻塞。<br>关于<code>worker</code>的数量问题，通常的建议是：</p>
<ul>
<li>CPU密集型：比如处理大量的TCP/IP，SSL，或压缩时，Nginx <code>worker</code>进程的数量应当和CPU核的数量一致。</li>
<li>磁盘I/O密集型：提供文件内容，或者大量的代理，这种情况下，<code>worker</code>进程的数量可以是CPU核数的1.5或2倍。</li>
</ul>
<h3 id="Nginx进程职责"><a href="#Nginx进程职责" class="headerlink" title="Nginx进程职责"></a>Nginx进程职责</h3><p>Nginx运行时会有多个进程，包括一个<code>master</code>进程和多个<code>worker</code>进程，除此之外，还包括一对特定作用的进程，<code>cache loader</code>进程和<code>cache manager</code>进程。所有的进程都是单线程（即只有一个主线程）的，且进程间通信主要使用共享内存的方式。<code>master</code>进程以<code>root</code>用户权限运行，其它进程则以非<code>root</code>方式运行。<br><code>master</code>进程主要负责如下的任务：</p>
<ul>
<li>读取和诊断配置文件</li>
<li>创建、绑定以及关闭套接字</li>
<li>启动、终止和管理<code>worker</code>进程</li>
<li>无须重启即可动态更新配置</li>
<li>平滑升级</li>
<li>重新打开log文件</li>
<li>编译内嵌的<code>Perl</code>脚本</li>
</ul>
<p><code>worker</code>进程接收、处理连接请求，提供反向代理和过滤以及其它的功能。<br><code>cache loader</code>进程负责检测磁盘的缓存，且向内存数据库提供缓存元数据，<code>cache loader</code>在Nginx准备启动时，以一定的目录结构，遍历缓存内容的元数据，更新共享内存中的相关条目，当准备完成后退出。<br><code>cache manager</code>进程主要负责缓存的过期管理和诊断。</p>
<h3 id="Nginx缓存简单介绍"><a href="#Nginx缓存简单介绍" class="headerlink" title="Nginx缓存简单介绍"></a>Nginx缓存简单介绍</h3><p>缓存的键和元数据存储在共享内存段中，<code>cache loader</code>、<code>cache manager</code>、<code>worker</code>进程可以对其进行访问。<br>将内容存入缓存的过程如下：<br>当Nginx从上游服务器读取响应时，响应内容首先会被写入到一个缓存文件中，当请求处理完成后，重命名缓存文件，并将它移到缓存的目录中。</p>
<h2 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h2><hr>
<p>Nginx的主配置文件名默认为<code>nginx.conf</code>，配置文件由<code>master</code>进程读取和诊断，读取完之后以一定的形式保存在内存中，当<code>worker</code>进程从<code>master</code>进程中<code>fork</code>时（<code>fork</code>之后，子进程是父进程的副本，子进程获得父进程数据空间、堆和栈的拷贝），<code>worker</code>进程就能够访问到这些配置数据。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS事件处理之Hit-Testing]]></title>
      <url>https://zhongwuzw.github.io/2016/09/12/iOS%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E4%B9%8BHit-Testing/</url>
      <content type="html"><![CDATA[<hr>
<p>iOS中，Hit-Testing主要用于决定哪个视图来首先处理Touch事件，确定完后，就会依据响应者链来进行事件的处理。接下来，我们将分析Hit-Testing的工作流程。</p>
<blockquote>
<p>由于不确定的原因，Hit-Testing测试会被执行多次，导致单个视图的<code>-(UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event</code>方法会被调用多次，由于是幂等的，所以结果不影响。</p>
</blockquote>
<p>Hit-Testing使用的搜索算法为<strong><em>逆前序深度遍历</em></strong>（逆前序遍历先访问根节点，然后进行从其索引最大的子视图到最小的子视图的遍历，既从右至左进行遍历）。当touch事件的points发生在多个视图的重叠部分时，根据算法将得到最右子树中的最深视图，而该视图就是位于界面最前端的视图。</p>
<p>下图展示了一个视图层级树以及对应在屏幕上的显示结果，树的分支顺序安排反应了子视图数组的顺序，比如<code>View A</code>的索引小于<code>View B</code>。<br><img src="http://oc54pu02q.bkt.clouddn.com/hit-test-view-hierarchy.png" alt=""></p>
 <a id="more"></a>
<p>由上图，<code>View A.2</code>和<code>View B.1</code>两个视图重叠了，但是因为<code>View B</code>和<code>View A</code>是兄弟视图，且<code>View B</code>的索引大于<code>View A</code>，因此，当用户的touch事件发生在<code>View A.2</code>和<code>View B.1</code>重叠的部分时，Hit-Testing将返回<code>View B.1</code>。</p>
<p>通过应用逆前序深度遍历算法，当找到第一个最深的后代视图满足后就会停止遍历。<br><img src="http://oc54pu02q.bkt.clouddn.com/hit-test-depth-first-traversal.png" alt=""></p>
<p>遍历算法是以向<code>UIWindow</code>发送<code>hitTest:withEvent</code>消息开始的，<code>UIWindow</code>是视图层级的根视图，<code>hitTest:withEvent</code>方法返回的值即是包含触摸点最前端的视图。<br>下图展示了Hit-Testing的逻辑：<br><img src="http://oc54pu02q.bkt.clouddn.com/hit-test-flowchart.png" alt=""><br>如下代码展示了原生<code>hitTest:withEvent:</code>方法可能的实现：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">UIView</span> *)hitTest:(<span class="built_in">CGPoint</span>)point withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">self</span>.isUserInteractionEnabled || <span class="keyword">self</span>.isHidden || <span class="keyword">self</span>.alpha &lt;= <span class="number">0.01</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span> pointInside:point withEvent:event]) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="built_in">UIView</span> *subview <span class="keyword">in</span> [<span class="keyword">self</span>.subviews reverseObjectEnumerator]) &#123;</div><div class="line">            <span class="built_in">CGPoint</span> convertedPoint = [subview convertPoint:point fromView:<span class="keyword">self</span>];</div><div class="line">            <span class="built_in">UIView</span> *hitTestView = [subview hitTest:convertedPoint withEvent:event];</div><div class="line">            <span class="keyword">if</span> (hitTestView) &#123;</div><div class="line">                <span class="keyword">return</span> hitTestView;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>hitTest:withEvent</code>方法首先检测视图是否允许接收touch事件，当如下条件满足时，既允许接收事件：</p>
<ul>
<li>视图没被隐藏：<br>  <code>self.hidden == NO</code></li>
<li>视图允许用户交互：<br>  <code>self.userInteractionEnabled = YES</code></li>
<li>视图的alpha值大于0.01：<br>  <code>self.alpha &gt; 0.01</code></li>
<li>touch事件的触摸点在视图的bounds内：<br>  <code>pointInside:withEvent: == YES</code></li>
</ul>
<p>当视图允许接收touch事件后，该方法将对其<code>subviews</code>子视图数组的每个视图，以逆序的方式，发送<code>hitTest:withEvent:</code>消息，直到返回非<code>nil</code>的值。当其子视图都返回<code>nil</code>或者没有子视图时，则返回视图本身。<br>如果视图不被允许接收touch事件，那么方法会返回<code>nil</code>，且不需要对视图的子树进行遍历。</p>
<h2 id="重载hitTest-withEvent-示例"><a href="#重载hitTest-withEvent-示例" class="headerlink" title="重载hitTest:withEvent:示例"></a>重载<code>hitTest:withEvent:</code>示例</h2><p>当默认的搜索算法不满足要求时，可以重载<code>hitTest:withEvent:</code>来自定义。</p>
<h3 id="增加视图的touch区域"><a href="#增加视图的touch区域" class="headerlink" title="增加视图的touch区域"></a>增加视图的touch区域</h3><p>当需要一个视图的touch区域大于它的bounds时，可以重载<code>hitTest:withEvent:</code>方法，比如，下面展示了一个20X20的视图<code>UIView</code>，该大小可能对于处理touch来说有点小，因此，可以通过重载<code>hitTest:withEvent:</code>方法来在每个方向上增加10points：<br><img src="http://oc54pu02q.bkt.clouddn.com/hit-test-increase-touch-area.png" alt=""></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">UIView</span> *)hitTest:(<span class="built_in">CGPoint</span>)point withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">self</span>.isUserInteractionEnabled || <span class="keyword">self</span>.isHidden || <span class="keyword">self</span>.alpha &lt;= <span class="number">0.01</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">CGRect</span> touchRect = <span class="built_in">CGRectInset</span>(<span class="keyword">self</span>.bounds, <span class="number">-10</span>, <span class="number">-10</span>);</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">CGRectContainsPoint</span>(touchRect, point)) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="built_in">UIView</span> *subview <span class="keyword">in</span> [<span class="keyword">self</span>.subviews reverseObjectEnumerator]) &#123;</div><div class="line">            <span class="built_in">CGPoint</span> convertedPoint = [subview convertPoint:point fromView:<span class="keyword">self</span>];</div><div class="line">            <span class="built_in">UIView</span> *hitTestView = [subview hitTest:convertedPoint withEvent:event];</div><div class="line">            <span class="keyword">if</span> (hitTestView) &#123;</div><div class="line">                <span class="keyword">return</span> hitTestView;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意，该实现能正确执行的前提是，希望响应touch事件的区域必须在其父视图的bounds范围内，或者重写父视图的<code>hitTest:withEvent:</code>方法来包含能响应touch的区域。</p>
</blockquote>
<h3 id="将touch事件传到其下面的视图，既透传"><a href="#将touch事件传到其下面的视图，既透传" class="headerlink" title="将touch事件传到其下面的视图，既透传"></a>将touch事件传到其下面的视图，既透传</h3><p>有时我们需要一个视图忽略touch事件并把他们传到其下面的视图，比如，当touch的pints在视图的子视图时，返回子视图，否则将事件透传到下面的视图，代码如下：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">UIView</span> *)hitTest:(<span class="built_in">CGPoint</span>)point withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</div><div class="line">    <span class="built_in">UIView</span> *hitTestView = [<span class="keyword">super</span> hitTest:point withEvent:event];</div><div class="line">    <span class="keyword">if</span> (hitTestView == <span class="keyword">self</span>) &#123;</div><div class="line">        hitTestView = <span class="literal">nil</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> hitTestView;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="将touch事件传给子视图"><a href="#将touch事件传给子视图" class="headerlink" title="将touch事件传给子视图"></a>将touch事件传给子视图</h3><p>父视图对所有touch事件进行重定向，传到子视图中，比如，一个图片旋转功能，由一个父视图和一个<code>UIScrollView</code>组成，且设置<code>UIScrollView</code>视图的<code>pagingEnabled</code>属性为<code>YES</code>，且设置父视图的<code>clipsToBounds</code>属性为NO。<br><img src="http://oc54pu02q.bkt.clouddn.com/hit-test-pass-touches-to-subviews.png" alt=""><br>为了让<code>UIScrollView</code>不仅能够响应其bounds范围内的事件，同样也能响应其父视图的bounds内的事件，可以重载父视图的<code>hitTest:withEvent:</code>方法，代码如下：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">UIView</span> *)hitTest:(<span class="built_in">CGPoint</span>)point withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</div><div class="line">    <span class="built_in">UIView</span> *hitTestView = [<span class="keyword">super</span> hitTest:point withEvent:event];</div><div class="line">    <span class="keyword">if</span> (hitTestView) &#123;</div><div class="line">        hitTestView = <span class="keyword">self</span>.scrollView;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> hitTestView;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="调整Touches传递路线"><a href="#调整Touches传递路线" class="headerlink" title="调整Touches传递路线"></a>调整<code>Touches</code>传递路线</h2><p>有时候我们希望视图在手势识别器识别前能够接收到<code>touch</code>事件，在找到解决方法之前，我们先来了解一下默认的行为。举一个简单的例子，当一个触摸发生时，<code>touch</code>对象将从<code>UIApplication</code>传递到<code>UIWindow</code>，然后，在将<code>touches</code>发送给发生触摸的视图（因为视图继承自<code>UIResponder</code>）本身前，<code>window</code>首先会将<code>touches</code>发送给发生触摸的视图（或其父视图）所关联的手势识别器。</p>
<p><img src="https://raw.githubusercontent.com/zhongwuzw/zhongwuzw.github.io.resource/master/images/default-delivery-path.png" alt=""></p>
<h3 id="手势识别器将优先识别Touch"><a href="#手势识别器将优先识别Touch" class="headerlink" title="手势识别器将优先识别Touch"></a>手势识别器将优先识别<code>Touch</code></h3><p><code>window</code>会延时将<code>touches</code>对象传递给视图，以便手势识别器能优先识别<code>touch</code>.在延时的过程中，如果手势识别器成功识别，那么<code>window</code>将不会再继续传递<code>touch</code>对象到视图，而且会取消之前已经发送给视图的<code>touch</code>对象。</p>
<p>比如，有一个手势识别器，用来识别两个手指的触摸，识别器会将触摸转换成两个独立的<code>touch</code>对象，当触摸发生时，<code>touch</code>对象会从<code>Application</code>传到<code>window</code>，接下来的流程，可以由如下表来表示。</p>
<p><img src="https://raw.githubusercontent.com/zhongwuzw/zhongwuzw.github.io.resource/master/images/sequence-of-messages-for-touches.png" alt=""></p>
<ol>
<li><code>window</code>会在<code>Began</code>阶段通过<code>UIGestureRecognizer</code>的<code>touchesBegan:withEvent:</code>方法向识别器发送两个<code>touch</code>对象，此时，手势识别器还没有成功识别，所以状态为<code>Possible</code>.<code>window</code>同时会发送相同的<code>touches</code>到识别器关联的视图。</li>
<li><code>window</code>在<code>Moved</code>阶段通过<code>UIGestureRecognizer</code>的<code>touchesMoved:withEvent:</code>方法向识别器发送两个<code>touch</code>对象，此时，手势识别器依然还没有成功识别，状态为<code>Possible</code>,<code>window</code>同时会发送相同的<code>touches</code>到识别器关联的视图。</li>
<li><code>window</code>在<code>Ended</code>阶段通过<code>UIGestureRecognizer</code>的<code>touchesEnded:withEvent:</code>方法向识别器发送一个<code>touch</code>对象，此时该<code>touch</code>对象还没有生成足够的信息提供给识别器，但是<code>window</code>将不会再向识别器关联的视图发送<code>touch</code>对象。</li>
<li><code>window</code>在<code>Ended</code>阶段发送另一个<code>touch</code>对象，手势识别器现在已经成功识别了触摸，所以其状态变为<code>Recognized</code>,在<code>action</code>消息（即识别器创建时的@selector方法）发送之前，视图会调用自己的<code>touchesCancelled:withEvent:</code>(注意，是视图本身的方法，不是<code>UIGestureRecognizer</code>的)方法来使之前在<code>Began</code>和<code>Moved</code>阶段发送的<code>touch</code>对象失效，<code>Ended</code>阶段的<code>touches</code>将被取消。</li>
</ol>
<p>现在，我们假设手势识别器在如上的最后一步没有成功识别，那么识别器会将其状态设为<code>UIGestureRecognizerStateFailed</code>，然后，<code>window</code>会在<code>Ended</code>状态向视图发送两个<code>touch</code>对象，并调用视图的<code>touchesEnded:withEvent:</code>消息。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS越狱相关基础知识]]></title>
      <url>https://zhongwuzw.github.io/2016/09/11/iOS%E8%B6%8A%E7%8B%B1%E7%9B%B8%E5%85%B3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      <content type="html"><![CDATA[<h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><hr>
<ul>
<li><code>dylib</code>的权限由它寄生的那个App决定，同一个<code>dylib</code>寄生在系统App和用户App里时的授权是不同的。</li>
<li>越狱之后，我们就可以拥有daemon的概念了，给用户提供各种“守护”。</li>
<li><a href="http://stevenygard.com/projects/class-dump/" target="_blank" rel="external">Class-dump</a>处理的对象是<code>Mach-O</code>格式的二进制文件，如<code>Framework</code>的库文件和App的可执行文件。</li>
<li>采用<code>arm64</code>架构的App不兼容<code>armv7/armv7s</code>架构。</li>
</ul>
<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><hr>
<ul>
<li>查看app文件的可执行文件(对于<code>App Store</code>上下载的App，经过了加密，所以需要先砸壳才能获取到)：<code>plutil -p Info.plist | grep CFBundleExecutable</code></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[源码分析之SDWebImage]]></title>
      <url>https://zhongwuzw.github.io/2016/09/08/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8BSDWebImage/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p>在iOS开发中，很多都使用到<a href="https://github.com/rs/SDWebImage" target="_blank" rel="external">SDWebImage</a>库，该库使用了外观模式，提供简洁的API，<code>UIButton</code>、<code>UIImageView</code>等类可以直接调用API进行网络图片的下载，接下来，就来分析一下<code>SDWebImage</code>的整个工作流程。</p>
<h2 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h2><hr>
<p>查看<code>SDWebImage</code>的整个项目结构，除去一些辅助的类，其结构大致如下图所示，<code>UIView+WebCacheOperation</code>类作为<code>UIView</code>的类别，提供基本的方法，如设置、取消、移除<code>Operation</code>操作，该<code>Operation</code>满足<code>&lt;SDWebImageOperation&gt;</code>协议，并通过关联引用来进行存储。<br><code>UIImageView+WebCache</code>、<code>SDWebImageManager</code>等类提供对外的接口。<br><code>SDWebImageManager</code>类将作为Manager来进行下载和缓存的管理，而真正负责下载的类为<code>SDWebImageDownloader</code>类，<code>SDWebImageDownloaderOperation</code>负责封装下载对象；管理缓存的类为<code>SDImageCache</code>。<br>好了，大致结构就是这样，接下来将通过一次调用来分析其内部的具体流程。</p>
<p><img src="http://oc54pu02q.bkt.clouddn.com/%E6%9C%AA%E5%91%BD%E5%90%8D%202.png" alt=""></p>
<a id="more"></a>
<h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><hr>
<p>接下来，以设置<code>UIImageView</code>类的图片为例，我们将使用<code>UIImageView+WebCache</code>提供的API，其接口方法非常简便，你可以什么都不用管，直接调用<code>- (void)sd_setImageWithURL:(NSURL *)url</code>方法就能进行图片的赋值，<code>SDWebImageCache</code>库将自动根据默认配置进行下载和缓存。<br><code>UIImageView+WebCache</code>类提供的下载接口如下，每个接口方法只是参宿的个数不一样，不管是使用其中的哪个方法，最终都会等同于调用最后一个方法，其中缺省的参数会使用默认值。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)<span class="string">sd_setImageWithURL:</span>(NSURL *)url;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)<span class="string">sd_setImageWithURL:</span>(NSURL *)url <span class="string">placeholderImage:</span>(UIImage *)placeholder;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)<span class="string">sd_setImageWithURL:</span>(NSURL *)url <span class="string">placeholderImage:</span>(UIImage *)placeholder <span class="string">options:</span>(SDWebImageOptions)options;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)<span class="string">sd_setImageWithURL:</span>(NSURL *)url <span class="string">completed:</span>(SDWebImageCompletionBlock)completedBlock;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)<span class="string">sd_setImageWithURL:</span>(NSURL *)url <span class="string">placeholderImage:</span>(UIImage *)placeholder <span class="string">completed:</span>(SDWebImageCompletionBlock)completedBlock;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)<span class="string">sd_setImageWithURL:</span>(NSURL *)url <span class="string">placeholderImage:</span>(UIImage *)placeholder <span class="string">options:</span>(SDWebImageOptions)options <span class="string">completed:</span>(SDWebImageCompletionBlock)completedBlock;</div><div class="line"></div><div class="line"><span class="comment">//最终都会通过我来调用</span></div><div class="line">- (<span class="keyword">void</span>)<span class="string">sd_setImageWithURL:</span>(NSURL *)url <span class="string">placeholderImage:</span>(UIImage *)placeholder <span class="string">options:</span>(SDWebImageOptions)options <span class="string">progress:</span>(SDWebImageDownloaderProgressBlock)progressBlock <span class="string">completed:</span>(SDWebImageCompletionBlock)completedBlock;</div></pre></td></tr></table></figure>
<p>接下来，我们就来看一下方法的处理流程，代码如下所示:</p>
<ol>
<li>代码1：用来取消之前的图片加载。</li>
<li>代码2：当选项不包含<code>SDWebImageDelayPlaceholder</code>时，设置占位图片。</li>
<li>代码3：调用<code>SDWebImageManager</code>单例类的方法来进行图片的下载和缓存管理，该方法返回满足<code>&lt;SDWebImageOperation&gt;</code>协议的对象，在该方法的<code>completed</code>参数中，我们进行一些基本的操作，如将图片赋给<code>ImageView</code>等。</li>
</ol>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)sd_setImageWithURL:(<span class="built_in">NSURL</span> *)url placeholderImage:(<span class="built_in">UIImage</span> *)placeholder options:(SDWebImageOptions)options progress:(SDWebImageDownloaderProgressBlock)progressBlock completed:(SDWebImageCompletionBlock)completedBlock &#123;</div><div class="line">    <span class="comment">//1</span></div><div class="line">    [<span class="keyword">self</span> sd_cancelCurrentImageLoad];</div><div class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, &amp;imageURLKey, url, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</div><div class="line"></div><div class="line">    <span class="comment">//2</span></div><div class="line">    <span class="keyword">if</span> (!(options &amp; SDWebImageDelayPlaceholder)) &#123;</div><div class="line">        dispatch_main_async_safe(^&#123;</div><div class="line">            <span class="keyword">self</span>.image = placeholder;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (url) &#123;</div><div class="line"></div><div class="line">        <span class="comment">// check if activityView is enabled or not</span></div><div class="line">        <span class="keyword">if</span> ([<span class="keyword">self</span> showActivityIndicatorView]) &#123;</div><div class="line">            [<span class="keyword">self</span> addActivityIndicator];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        __<span class="keyword">weak</span> __<span class="keyword">typeof</span>(<span class="keyword">self</span>)wself = <span class="keyword">self</span>;</div><div class="line">        <span class="comment">//3</span></div><div class="line">        <span class="keyword">id</span> &lt;SDWebImageOperation&gt; operation = [SDWebImageManager.sharedManager downloadImageWithURL:url options:options progress:progressBlock completed:^(<span class="built_in">UIImage</span> *image, <span class="built_in">NSError</span> *error, SDImageCacheType cacheType, <span class="built_in">BOOL</span> finished, <span class="built_in">NSURL</span> *imageURL) &#123;</div><div class="line">            [wself removeActivityIndicator];</div><div class="line">            <span class="keyword">if</span> (!wself) <span class="keyword">return</span>;</div><div class="line">            dispatch_main_sync_safe(^&#123;</div><div class="line">                <span class="keyword">if</span> (!wself) <span class="keyword">return</span>;</div><div class="line">                <span class="comment">//不自动进行图片的赋值</span></div><div class="line">                <span class="keyword">if</span> (image &amp;&amp; (options &amp; SDWebImageAvoidAutoSetImage) &amp;&amp; completedBlock)</div><div class="line">                &#123;</div><div class="line">                    completedBlock(image, error, cacheType, url);</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (image) &#123;</div><div class="line">                    wself.image = image;</div><div class="line">                    [wself setNeedsLayout];</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">if</span> ((options &amp; SDWebImageDelayPlaceholder)) &#123;</div><div class="line">                        wself.image = placeholder;</div><div class="line">                        [wself setNeedsLayout];</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (completedBlock &amp;&amp; finished) &#123;</div><div class="line">                    completedBlock(image, error, cacheType, url);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;];</div><div class="line">        <span class="comment">//将operation通过关联引用存储到字典对象中进行管理</span></div><div class="line">        [<span class="keyword">self</span> sd_setImageLoadOperation:operation forKey:<span class="string">@"UIImageViewImageLoad"</span>];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        dispatch_main_async_safe(^&#123;</div><div class="line">            [<span class="keyword">self</span> removeActivityIndicator];</div><div class="line">            <span class="keyword">if</span> (completedBlock) &#123;</div><div class="line">                <span class="built_in">NSError</span> *error = [<span class="built_in">NSError</span> errorWithDomain:SDWebImageErrorDomain code:<span class="number">-1</span> userInfo:@&#123;<span class="built_in">NSLocalizedDescriptionKey</span> : <span class="string">@"Trying to load a nil url"</span>&#125;];</div><div class="line">                completedBlock(<span class="literal">nil</span>, error, SDImageCacheTypeNone, url);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来，我们再接着往下走，分析一下上面代码中调用的<code>- (id &lt;SDWebImageOperation&gt;)downloadImageWithURL:(NSURL *)url
                                         options:(SDWebImageOptions)options
                                        progress:(SDWebImageDownloaderProgressBlock)progressBlock
                                       completed:(SDWebImageCompletionWithFinishedBlock)completedBlock</code>方法，代码如下，由于原代码代码量较多，所以裁剪了一些简单的处理代码。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">id</span> &lt;SDWebImageOperation&gt;)downloadImageWithURL:(<span class="built_in">NSURL</span> *)url</div><div class="line">                                         options:(SDWebImageOptions)options</div><div class="line">                                        progress:(SDWebImageDownloaderProgressBlock)progressBlock</div><div class="line">                                       completed:(SDWebImageCompletionWithFinishedBlock)completedBlock &#123;</div><div class="line">    __block SDWebImageCombinedOperation *operation = [SDWebImageCombinedOperation new];</div><div class="line">    __<span class="keyword">weak</span> SDWebImageCombinedOperation *weakOperation = operation;</div><div class="line"></div><div class="line">    <span class="built_in">BOOL</span> isFailedUrl = <span class="literal">NO</span>;</div><div class="line">    <span class="keyword">@synchronized</span> (<span class="keyword">self</span>.failedURLs) &#123;</div><div class="line">        isFailedUrl = [<span class="keyword">self</span>.failedURLs containsObject:url];</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//1</span></div><div class="line">    <span class="keyword">if</span> (url.absoluteString.length == <span class="number">0</span> || (!(options &amp; SDWebImageRetryFailed) &amp;&amp; isFailedUrl)) &#123;</div><div class="line">        dispatch_main_sync_safe(^&#123;</div><div class="line">            <span class="built_in">NSError</span> *error = [<span class="built_in">NSError</span> errorWithDomain:<span class="built_in">NSURLErrorDomain</span> code:<span class="built_in">NSURLErrorFileDoesNotExist</span> userInfo:<span class="literal">nil</span>];</div><div class="line">            completedBlock(<span class="literal">nil</span>, error, SDImageCacheTypeNone, <span class="literal">YES</span>, url);</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">return</span> operation;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">@synchronized</span> (<span class="keyword">self</span>.runningOperations) &#123;</div><div class="line">        [<span class="keyword">self</span>.runningOperations addObject:operation];</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">NSString</span> *key = [<span class="keyword">self</span> cacheKeyForURL:url];</div><div class="line"></div><div class="line">    <span class="comment">//2</span></div><div class="line">    operation.cacheOperation = [<span class="keyword">self</span>.imageCache queryDiskCacheForKey:key done:^(<span class="built_in">UIImage</span> *image, SDImageCacheType cacheType) &#123;</div><div class="line">        <span class="keyword">if</span> (operation.isCancelled) &#123;</div><div class="line">            <span class="keyword">@synchronized</span> (<span class="keyword">self</span>.runningOperations) &#123;</div><div class="line">                [<span class="keyword">self</span>.runningOperations removeObject:operation];</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//3</span></div><div class="line">        <span class="keyword">if</span> ((!image || options &amp; SDWebImageRefreshCached) &amp;&amp; (![<span class="keyword">self</span>.delegate respondsToSelector:<span class="keyword">@selector</span>(imageManager:shouldDownloadImageForURL:)] || [<span class="keyword">self</span>.delegate imageManager:<span class="keyword">self</span> shouldDownloadImageForURL:url])) &#123;</div><div class="line">            <span class="keyword">if</span> (image &amp;&amp; options &amp; SDWebImageRefreshCached) &#123;</div><div class="line">                dispatch_main_sync_safe(^&#123;</div><div class="line">                    <span class="comment">// If image was found in the cache but SDWebImageRefreshCached is provided, notify about the cached image</span></div><div class="line">                    <span class="comment">// AND try to re-download it in order to let a chance to NSURLCache to refresh it from server.</span></div><div class="line">                    completedBlock(image, <span class="literal">nil</span>, cacheType, <span class="literal">YES</span>, url);</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">//配置项的赋值</span></div><div class="line">            <span class="comment">// download if no image or requested to refresh anyway, and download allowed by delegate</span></div><div class="line">            SDWebImageDownloaderOptions downloaderOptions = <span class="number">0</span>;</div><div class="line">            <span class="keyword">if</span> (options &amp; SDWebImageLowPriority) downloaderOptions |= SDWebImageDownloaderLowPriority;</div><div class="line">            <span class="keyword">if</span> (options &amp; SDWebImageProgressiveDownload) downloaderOptions |= SDWebImageDownloaderProgressiveDownload;</div><div class="line">            <span class="keyword">if</span> (options &amp; SDWebImageRefreshCached) downloaderOptions |= SDWebImageDownloaderUseNSURLCache;</div><div class="line">            <span class="keyword">if</span> (options &amp; SDWebImageContinueInBackground) downloaderOptions |= SDWebImageDownloaderContinueInBackground;</div><div class="line">            <span class="keyword">if</span> (options &amp; SDWebImageHandleCookies) downloaderOptions |= SDWebImageDownloaderHandleCookies;</div><div class="line">            <span class="keyword">if</span> (options &amp; SDWebImageAllowInvalidSSLCertificates) downloaderOptions |= SDWebImageDownloaderAllowInvalidSSLCertificates;</div><div class="line">            <span class="keyword">if</span> (options &amp; SDWebImageHighPriority) downloaderOptions |= SDWebImageDownloaderHighPriority;</div><div class="line">            <span class="comment">//4</span></div><div class="line">            <span class="keyword">if</span> (image &amp;&amp; options &amp; SDWebImageRefreshCached) &#123;</div><div class="line">                <span class="comment">// force progressive off if image already cached but forced refreshing</span></div><div class="line">                downloaderOptions &amp;= ~SDWebImageDownloaderProgressiveDownload;</div><div class="line">                <span class="comment">// ignore image read from NSURLCache if image if cached but force refreshing</span></div><div class="line">                downloaderOptions |= SDWebImageDownloaderIgnoreCachedResponse;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="comment">//5</span></div><div class="line">            <span class="keyword">id</span> &lt;SDWebImageOperation&gt; subOperation = [<span class="keyword">self</span>.imageDownloader downloadImageWithURL:url options:downloaderOptions progress:progressBlock completed:^(<span class="built_in">UIImage</span> *downloadedImage, <span class="built_in">NSData</span> *data, <span class="built_in">NSError</span> *error, <span class="built_in">BOOL</span> finished) &#123;</div><div class="line">                __<span class="keyword">strong</span> __<span class="keyword">typeof</span>(weakOperation) strongOperation = weakOperation;</div><div class="line">                <span class="keyword">if</span> (!strongOperation || strongOperation.isCancelled) &#123;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">//6</span></div><div class="line">                    <span class="keyword">if</span> ((options &amp; SDWebImageRetryFailed)) &#123;</div><div class="line">                        <span class="keyword">@synchronized</span> (<span class="keyword">self</span>.failedURLs) &#123;</div><div class="line">                            [<span class="keyword">self</span>.failedURLs removeObject:url];</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    </div><div class="line">                    <span class="built_in">BOOL</span> cacheOnDisk = !(options &amp; SDWebImageCacheMemoryOnly);</div><div class="line"></div><div class="line">                    <span class="keyword">if</span> (options &amp; SDWebImageRefreshCached &amp;&amp; image &amp;&amp; !downloadedImage) &#123;</div><div class="line">                        <span class="comment">// Image refresh hit the NSURLCache cache, do not call the completion block</span></div><div class="line">                    &#125;</div><div class="line">                    <span class="comment">//7</span></div><div class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (downloadedImage &amp;&amp; (!downloadedImage.images || (options &amp; SDWebImageTransformAnimatedImage)) &amp;&amp; [<span class="keyword">self</span>.delegate respondsToSelector:<span class="keyword">@selector</span>(imageManager:transformDownloadedImage:withURL:)]) &#123;</div><div class="line">                        <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, <span class="number">0</span>), ^&#123;</div><div class="line">                            <span class="comment">//调用委托方法来获得transform后的图片</span></div><div class="line">                            <span class="built_in">UIImage</span> *transformedImage = [<span class="keyword">self</span>.delegate imageManager:<span class="keyword">self</span> transformDownloadedImage:downloadedImage withURL:url];</div><div class="line"></div><div class="line">                            <span class="keyword">if</span> (transformedImage &amp;&amp; finished) &#123;</div><div class="line">                                <span class="built_in">BOOL</span> imageWasTransformed = ![transformedImage isEqual:downloadedImage];</div><div class="line">                                <span class="comment">//进行图片的缓存</span></div><div class="line">                                [<span class="keyword">self</span>.imageCache storeImage:transformedImage recalculateFromImage:imageWasTransformed imageData:(imageWasTransformed ? <span class="literal">nil</span> : data) forKey:key toDisk:cacheOnDisk];</div><div class="line">                            &#125;</div><div class="line"></div><div class="line">                            dispatch_main_sync_safe(^&#123;</div><div class="line">                                <span class="keyword">if</span> (strongOperation &amp;&amp; !strongOperation.isCancelled) &#123;</div><div class="line">                                    completedBlock(transformedImage, <span class="literal">nil</span>, SDImageCacheTypeNone, finished, url);</div><div class="line">                                &#125;</div><div class="line">                            &#125;);</div><div class="line">                        &#125;);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="keyword">if</span> (downloadedImage &amp;&amp; finished) &#123;</div><div class="line">                            <span class="comment">//进行图片缓存</span></div><div class="line">                            [<span class="keyword">self</span>.imageCache storeImage:downloadedImage recalculateFromImage:<span class="literal">NO</span> imageData:data forKey:key toDisk:cacheOnDisk];</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        dispatch_main_sync_safe(^&#123;</div><div class="line">                            <span class="keyword">if</span> (strongOperation &amp;&amp; !strongOperation.isCancelled) &#123;</div><div class="line">                                completedBlock(downloadedImage, <span class="literal">nil</span>, SDImageCacheTypeNone, finished, url);</div><div class="line">                            &#125;</div><div class="line">                        &#125;);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (finished) &#123;</div><div class="line">                    <span class="keyword">@synchronized</span> (<span class="keyword">self</span>.runningOperations) &#123;</div><div class="line">                        <span class="keyword">if</span> (strongOperation) &#123;</div><div class="line">                            [<span class="keyword">self</span>.runningOperations removeObject:strongOperation];</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;];</div><div class="line">            <span class="comment">//取消的Block，当取消操作执行时调用</span></div><div class="line">            operation.cancelBlock = ^&#123;</div><div class="line">                [subOperation cancel];</div><div class="line">                </div><div class="line">                <span class="keyword">@synchronized</span> (<span class="keyword">self</span>.runningOperations) &#123;</div><div class="line">                    __<span class="keyword">strong</span> __<span class="keyword">typeof</span>(weakOperation) strongOperation = weakOperation;</div><div class="line">                    <span class="keyword">if</span> (strongOperation) &#123;</div><div class="line">                        [<span class="keyword">self</span>.runningOperations removeObject:strongOperation];</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//找到缓存图片时调用</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (image) &#123;</div><div class="line">            dispatch_main_sync_safe(^&#123;</div><div class="line">                __<span class="keyword">strong</span> __<span class="keyword">typeof</span>(weakOperation) strongOperation = weakOperation;</div><div class="line">                <span class="keyword">if</span> (strongOperation &amp;&amp; !strongOperation.isCancelled) &#123;</div><div class="line">                    completedBlock(image, <span class="literal">nil</span>, cacheType, <span class="literal">YES</span>, url);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">            <span class="comment">//移除操作对象</span></div><div class="line">            <span class="keyword">@synchronized</span> (<span class="keyword">self</span>.runningOperations) &#123;</div><div class="line">                [<span class="keyword">self</span>.runningOperations removeObject:operation];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line"></div><div class="line">    <span class="keyword">return</span> operation;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>代码1用来判断请求的URL是否包含在失败的URL列表中，如果包含，且请求没有设置重试选项，则直接返回，不再进行接下来的流程。</li>
<li>接下来，着重看一下代码2部分，该操作是给<code>operation</code>的<code>cacheOperation</code>属性赋值，调用<code>SDImageCache</code>类的<code>- (NSOperation *)queryDiskCacheForKey:(NSString *)key done:(SDWebImageQueryCompletedBlock)doneBlock</code>方法，该方法将查询是否在硬盘或者内存中已经存在该图片，查询完之后调用<code>done</code>完成块，接下来看一下<code>done</code>完成块中的操作。</li>
<li>代码3的<code>if</code>判断满足条件为：没有找到缓存的image，或者有需要刷新缓存<br>的选项且调用的委托方法返回<code>True</code>。</li>
<li>代码4：当image存在，且选项包含<code>SDWebImageRefreshCached</code>时，去掉下载选项中的<code>SDWebImageDownloaderProgressiveDownload</code>选项，既移除<code>progresive</code>功能，该功能可以在图片下载的过程中渐进式的展示图片；除此之外，再把<code>SDWebImageDownloaderIgnoreCachedResponse</code>选项加到下载选项中，该选项忽略<code>NSURLCache</code>的缓存（使用<code>SDWebImageCache</code>库作请求图片时默认是不使用<code>NSURLCache</code>缓存的），关于<code>NSURLCache</code>，可参考<a href="http://nshipster.cn/nsurlcache/" target="_blank" rel="external">NSURLCache</a></li>
<li>代码5：创建一个下载图片的操作，调用<code>SDWebImageDownloader</code>类的<code>- (id &lt;SDWebImageOperation&gt;)downloadImageWithURL:(NSURL *)url options:(SDWebImageDownloaderOptions)options progress:(SDWebImageDownloaderProgressBlock)progressBlock completed:(SDWebImageDownloaderCompletedBlock)completedBlock</code>方法，先来看一下<code>completed</code>完成块的操作，先假设下载操作完成。</li>
<li>代码6：如果下载选项包括错误重试时，将URL从错误URL列表中移除。</li>
<li>代码7：如果下载图片时有用到transform，将进入该if块，接着会调用委托来让我们进行相应的transform，之后将调用<code>SDImageCache</code>类来进行图片的缓存。</li>
</ol>
<h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>接下来，分析一下<code>SDImageCache</code>类的工作流程，<code>SDImageCache</code>类负责图片的缓存管理，缓存包括内存、硬盘两种缓存方式：</p>
<ul>
<li>内存缓存：使用<code>NSCache</code>类，通过监听内存警告的通知，在得到通知后移除<code>NSCache</code>类中保存的数据。</li>
<li>硬盘缓存：既将图片作为文件保存到硬盘上，关于图片过期的问题，<code>SDImageCache</code>类的处理方式是：监听App的状态，当进入后台运行时，将开启一个后台任务，对硬盘上保存的图片进行清理，这个过程包含两个操作（具体代码可参见<code>SDImageCache</code>类的<code>- (void)cleanDiskWithCompletionBlock:(SDWebImageNoParamsBlock)completionBlock</code>方法）：<ul>
<li>移除过期的文件。</li>
<li>当缓存的文件大小已经操作最大缓存大小时，将移除文件更新时间最老的图片文件，直到小于最大缓存为止。</li>
</ul>
</li>
</ul>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>图片的下载使用的<code>NSOperationQueue</code>来实现，它的好处就是可以cacel，且可以添加依赖，<code>SDWebImage</code>除了默认的<code>FIFO</code>先进先出策略外，还提供<code>LIFO</code>的策略，既后进先出，先执行后加入的下载操作，这个策略就是通过依赖来完成的。<br>下载操作被封装在<code>SDWebImageDownloaderOperation</code>对象中，<code>SDWebImageDownloaderOperation</code>继承自<code>NSOperation</code>类。<br>图片的下载使用的<code>NSURLSession</code>，通过实现<code>NSURLSession</code>相关的委托协议，来实现Progress的调用、协议认证等操作。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>SDWebImage</code>库整体结构还是很清晰的。对网络部分比较感兴趣的可以读一下源码。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS越狱设备添加Entitlements授权]]></title>
      <url>https://zhongwuzw.github.io/2016/09/05/iOS%E6%8E%88%E6%9D%83%E7%9B%B8%E5%85%B3/</url>
      <content type="html"><![CDATA[<h2 id="在iOS越狱设备上添加Entitlements授权"><a href="#在iOS越狱设备上添加Entitlements授权" class="headerlink" title="在iOS越狱设备上添加Entitlements授权"></a>在iOS越狱设备上添加Entitlements授权</h2><p>院里的一款用于网络测试的APP，在iOS8.3之前，可以通过引入CoreTelephony框架，调用其私有函数来获取信号强度，MCC、MNC等相关参数，但在iOS8.3之后，无法通过私有API进行获取，APP开发团队一直没解决，Boss找到我，让我研究一下，看有没有解决方案，遂开始研究。<br>首先，经过多方的调研，发现在iOS8.3 above的系统是有解决方案的，参见<a href="http://stackoverflow.com/questions/13399659/get-cellid-mcc-mnc-lac-and-network-in-ios-5-1" target="_blank" rel="external">Stackoverflow</a>，大概思路是需要添加<code>Entitlements</code>授权，既在entitlements文件中添加如下的key，但是由于Apple 的<code>CodeSign</code>的机制，导致无法添加私有的<code>Entitlements</code>授权，所以需要绕过Apple的签名机制。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.CommCenter.fine-grained<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">array</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>spi<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">array</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="绕过签名机制"><a href="#绕过签名机制" class="headerlink" title="绕过签名机制"></a>绕过签名机制</h2><p>一开始，使用ldid来进行签名，签名之后会导致app闪退，遂使用了另外一种方法，禁用codesign，采用伪证书的方式，接下来将详细列出步骤。</p>
<a id="more"></a>
<h2 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h2><ol>
<li>设备必须越狱，这是前提，且在Cydia中安装<code>AppSync Unified</code>插件（该插件需要添加软件源，地址为：<a href="http://cydia.angelxwind.net/" target="_blank" rel="external">http://cydia.angelxwind.net/</a>）。</li>
<li>Apple Developer的账号，免费的就行。</li>
<li><p>装完Xcode之后，执行如下命令，作用是禁用Xcode的CodeSign机制，然后允许进行AD_HOC签名。</p>
 <figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo defaults <span class="keyword">write</span> <span class="regexp">/Applications/</span>Xcode.app<span class="regexp">/Contents/</span>Developer<span class="regexp">/Platforms/i</span>PhoneOS.platform<span class="regexp">/Developer/</span>SDKs<span class="regexp">/iPhoneOS.sdk/</span>SDKSettings.plist DefaultProperties -dict-add CODE_SIGNING_REQUIRED -string NO</div><div class="line">sudo defaults <span class="keyword">write</span> <span class="regexp">/Applications/</span>Xcode.app<span class="regexp">/Contents/</span>Developer<span class="regexp">/Platforms/i</span>PhoneOS.platform<span class="regexp">/Developer/</span>SDKs<span class="regexp">/iPhoneOS.sdk/</span>SDKSettings.plist DefaultProperties -dict-add ENTITLEMENTS_REQUIRED -string NO</div><div class="line">sudo defaults <span class="keyword">write</span> <span class="regexp">/Applications/</span>Xcode.app<span class="regexp">/Contents/</span>Developer<span class="regexp">/Platforms/i</span>PhoneOS.platform<span class="regexp">/Developer/</span>SDKs<span class="regexp">/iPhoneOS.sdk/</span>SDKSettings.plist DefaultProperties -dict-add AD_HOC_CODE_SIGNING_ALLOWED -string YES</div><div class="line">sudo chmod <span class="number">644</span> <span class="regexp">/Applications/</span>Xcode.app<span class="regexp">/Contents/</span>Developer<span class="regexp">/Platforms/i</span>PhoneOS.platform<span class="regexp">/Developer/</span>SDKs<span class="regexp">/iPhoneOS.sdk/</span>SDKSettings.plist</div></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li>打开Xcode，进行完初始化之后，退出即可。</li>
<li>打开Mac上的钥匙串访问应用，点击菜单栏上的<code>钥匙串访问-证书助理-创建证书</code>，在弹出的框中的证书类型选择<code>代码签名</code>，并勾选<code>让我覆盖这些默认值</code>，然后一路往下走，完成后就创建了一个新的证书。</li>
<li><p>在开发的项目中添加<code>Entitlements</code>文件，代码如下，其中，key为<code>com.apple.CommCenter.fine-grained</code>的节点是我的项目需要添加的key，别的项目可忽略该键值，并添加自己需要的键值对：</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">	<span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="meta">&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">"1.0"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>get-task-allow<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">true</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>application-identifier<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">string</span>&gt;</span>$(AppIdentifierPrefix)$(CFBundleIdentifier)<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.CommCenter.fine-grained<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>spi<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在项目<code>Build Settings</code>设置的Code Signing部分，将<code>Code Signing Entitlements</code>设为Entilements文件名，然后将<code>Code Signing Identity</code>设为<code>Ad Hoc Code Sign</code>,如果项目包含多个target，则需要进行同样的设置。</p>
</li>
<li>完成。</li>
</ol>
<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><ul>
<li>ldid授权命令：<code>ldid -Sentitlements.xml OTS_SDK_3.1.app/OTS_SDK_3.1</code></li>
<li>ldid查看授权：<code>ldid -e OTS_SDK_3.1.app/OTS_SDK_3.1</code></li>
<li>codesign查看权限：<code>codesign -d --entitlements - Example.app</code></li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://stackoverflow.com/questions/13399659/get-cellid-mcc-mnc-lac-and-network-in-ios-5-1" target="_blank" rel="external">http://stackoverflow.com/questions/13399659/get-cellid-mcc-mnc-lac-and-network-in-ios-5-1</a></li>
<li><a href="http://iphonedevwiki.net/index.php/Ldid" target="_blank" rel="external">http://iphonedevwiki.net/index.php/Ldid</a></li>
<li><a href="http://stackoverflow.com/questions/14871748/how-do-i-change-my-ios-applications-entitlements/14885266#14885266" target="_blank" rel="external">http://stackoverflow.com/questions/14871748/how-do-i-change-my-ios-applications-entitlements/14885266#14885266</a></li>
<li><a href="https://angelxwind.net/?page/how2asu" target="_blank" rel="external">https://angelxwind.net/?page/how2asu</a></li>
<li><a href="https://cydia.angelxwind.net/?page/net.angelxwind.appsyncunified" target="_blank" rel="external">https://cydia.angelxwind.net/?page/net.angelxwind.appsyncunified</a></li>
<li><a href="http://stackoverflow.com/questions/12768109/how-to-use-ldid" target="_blank" rel="external">http://stackoverflow.com/questions/12768109/how-to-use-ldid</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[NSURLProtocol无法截获NSURLSession解决方案]]></title>
      <url>https://zhongwuzw.github.io/2016/08/31/NSURLProtocol%E6%97%A0%E6%B3%95%E6%88%AA%E8%8E%B7NSURLSession%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在做<a href="https://github.com/zhongwuzw/ZhihuDaily" target="_blank" rel="external">知乎日报</a>的项目时，在其设置界面中有一个选项，当开启时，可以在移动网络状况下不下载图片。这个需求的解决方案有两种，一种是在每一个使用网络图片的地方，在下载前进行判断，如果当前网络为移动蜂窝网络，且开启了<code>在移动网络状况下不下载图片</code>的选项时，放弃图片的下载；还有一种方案就是直接在<code>NSURLProtocol</code>中进行截获，在<code>+ (BOOL)canInitWithRequest:(NSURLRequest *)request</code>中进行判断，当<code>request.URL</code>请求为图片，并开启不下载图片选项，且当前为移动网络状况下，截获该请求。在<a href="https://github.com/zhongwuzw/ZhihuDaily" target="_blank" rel="external">知乎日报</a>项目中，我使用的第二种，既子类<code>NSURLProtocol</code>来实现请求拦截。</p>
<h2 id="NSURLProtocol实现图片下载拦截"><a href="#NSURLProtocol实现图片下载拦截" class="headerlink" title="NSURLProtocol实现图片下载拦截"></a>NSURLProtocol实现图片下载拦截</h2><p>一开始，觉得思路很简单，直接创建<code>PictureBlockURLProtocol</code>类，其是<code>NSURLProtocol</code>的子类,在<code>Implement</code>实现中定义如下：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取当前网络状态</span></div><div class="line">+ (<span class="built_in">BOOL</span>)isBlockPictureDownload&#123;</div><div class="line">    Reachability *reachability = ((AppDelegate *)[[<span class="built_in">UIApplication</span> sharedApplication] delegate]).reachability;</div><div class="line">    </div><div class="line">    NetworkStatus netStatus = [reachability currentReachabilityStatus];</div><div class="line">    </div><div class="line">    <span class="built_in">BOOL</span> isBlock = netStatus == ReachableViaWWAN?<span class="literal">YES</span> : <span class="literal">NO</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> isBlock;</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="built_in">BOOL</span>)canInitWithRequest:(<span class="built_in">NSURLRequest</span> *)request</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> ([<span class="built_in">NSURLProtocol</span> propertyForKey:HybridResourceProtocolKey inRequest:request]) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//满足条件时直接截获请求</span></div><div class="line">    <span class="keyword">if</span> ([[UserConfig sharedInstance] isBlockPicture] &amp;&amp; ([request.URL.pathExtension caseInsensitiveCompare:<span class="string">@"jpg"</span>] == <span class="built_in">NSOrderedSame</span> || [request.URL.pathExtension caseInsensitiveCompare:<span class="string">@"png"</span>] == <span class="built_in">NSOrderedSame</span>) &amp;&amp; [<span class="keyword">self</span> isBlockPictureDownload]) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="built_in">NSURLRequest</span> *)canonicalRequestForRequest:(<span class="built_in">NSURLRequest</span> *)request</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> request;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//没有实现内容，request会以请求超时的方式结束</span></div><div class="line">- (<span class="keyword">void</span>)startLoading&#123;&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)stopLoading&#123;&#125;</div></pre></td></tr></table></figure>
 <a id="more"></a>
<p> 定义完<code>PictureBlockURLProtocol</code>类后，在<code>AppDelegate</code>类的<code>- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions</code>方法中调用<code>[NSURLProtocol registerClass:[PictureBlockURLProtocol class]]</code>方法进行注册，运行一下，看看效果，发现，当使用AFNetwork、SDWebImageCache等第三方库的图片请求并没有被截获到，而<code>UIWebView</code>可以，这就奇怪了，不过一想，<code>UIWebView</code>使用的是<code>NSURLConnection</code>，而<code>AFNetWork</code>、<code>SDWebCache</code>等已经废弃使用<code>NSURLConnection</code>，转而使用<code>NSURLSession</code>，难道是由于这个问题造成的？</p>
<p> 在查看<code>NSURLSession</code>相关类的文档时（如下图），从文档可以看到，如果需要支持自定义的<code>NSURLProtocol</code>，需要将自定义的<code>NSURLProtocol</code>子类赋给<code>NSURLSessionConfiguration</code>的<code>protocolClasses</code>属性。所以，如果需要<code>NSURLProtocol</code>来截获<code>NSURLSession</code>发出的请求，需要每一个<code>NSURLSession</code>在创建时配置的<code>NSURLSessionConfiguration</code>类的<code>protocolClasses</code>属性附上自定义的<code>NSURLProtocol</code>。<br>  <img src="http://oc54pu02q.bkt.clouddn.com/QQ20160831-0@2x.png" width="500" height="" alt="" align="center"></p>
<p> <em>根据上图的文档，注意到，对于后台Sessions，是不支持自定义的<code>NSURLProtocol</code>的。</em></p>
<p> 通过查看AFNetwork、SDWebImageCache的源代码，其创建的Session时关联的<code>NSURLSessionConfiguration</code>为<code>defaultSessionConfiguration</code>。这样，解决方案就有两种，一种是直接改AFNetwork、SDWebImageCache等库的源代码，在其创建的<code>NSURLSessionConfiguration</code>实例中将自定义的<code>NSURLProtocol</code>赋给其<code>protocolClasses</code>属性；另一种方案，使用Method Swizzling方法，由于AFNetwork、SDWebImageCache在创建时使用的是<code>[NSURLSessionConfiguration defaultSessionConfiguration]</code>，所以可以替换<code>defaultSessionConfiguration</code>实现。首先，创建<code>NSURLSessionConfiguration</code>的类别，代码如下：</p>
 <figure class="highlight monkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">+ (NSURLSessionConfiguration *)zw_defaultSessionConfiguration&#123;</div><div class="line">    NSURLSessionConfiguration *configuration = [<span class="built_in">self</span> zw_defaultSessionConfiguration];</div><div class="line">    NSArray *protocolClasses = @[[PictureBlockURLProtocol <span class="class"><span class="keyword">class</span>]];</span></div><div class="line">    configuration.protocolClasses = protocolClasses;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> configuration;</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (void)load&#123;</div><div class="line">    <span class="function"><span class="keyword">Method</span> <span class="title">systemMethod</span> =</span> class_getClassMethod([NSURLSessionConfiguration <span class="class"><span class="keyword">class</span>], @<span class="title">selector</span>(<span class="title">defaultSessionConfiguration</span>));</span></div><div class="line">    <span class="function"><span class="keyword">Method</span> <span class="title">zwMethod</span> =</span> class_getClassMethod([<span class="built_in">self</span> <span class="class"><span class="keyword">class</span>], @<span class="title">selector</span>(<span class="title">zw_defaultSessionConfiguration</span>));</span></div><div class="line">    method_exchangeImplementations(systemMethod, zwMethod);</div><div class="line">    </div><div class="line">    [NSURLProtocol registerClass:[PictureBlockURLProtocol <span class="class"><span class="keyword">class</span>]];</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 如上代码所示，在创建的每一个<code>NSURLSessionConfiguration</code>实例中，添加自定义的<code>NSURLProtocol</code>类到其<code>protocolClasses</code>属性，运行后，发现问题解决了，可以截获<code>NSURLSession</code>发出的请求了。</p>
<p> Done！！！！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[WebP图片格式iOS实例]]></title>
      <url>https://zhongwuzw.github.io/2016/08/26/WebP%E5%9B%BE%E7%89%87%E6%A0%BC%E5%BC%8FiOS%E5%AE%9E%E4%BE%8B/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>俗话说，谷歌大法好，<code>WebP</code>是由谷歌公司推出的图片文件格式，支持有损、无损压缩。从<a href="https://developers.google.com/speed/webp/" target="_blank" rel="external">官方文档</a>，可以看到如下图所示的对比，大意就是压缩率比PNG、JPEG等高。腾讯也对<code>WebP</code>做了测试，测试链接请戳<a href="http://isux.tencent.com/introduction-of-webp.html" target="_blank" rel="external">这里</a>。现在，很多公司都已经开始使用<code>WebP</code>格式，国内如腾讯、淘宝、今日头条等等。</p>
<p> <img src="http://oc54pu02q.bkt.clouddn.com/QQ20160826-0@2x.png" width="500" height="" alt="" align="center"></p>
<h1 id="iOS-WebP-示例"><a href="#iOS-WebP-示例" class="headerlink" title="iOS WebP 示例"></a>iOS WebP 示例</h1><p>iOS原生肯定是不支持<code>WebP</code>格式的，接下来，将介绍三种方法来展示在iOS端如何支持<code>WebP</code>格式：</p>
<h2 id="编译源代码"><a href="#编译源代码" class="headerlink" title="编译源代码"></a>编译源代码</h2><p>从官网下载<code>WebP</code>库的源代码，下载地址请戳<a href="https://developers.google.com/speed/webp/download" target="_blank" rel="external">这里</a>，下载如下图所示的部分，下载后是一个<code>tar</code>文件，名字类似于<br> <img src="http://oc54pu02q.bkt.clouddn.com/QQ20160826-1@2x.png" width="500" height="" alt="" align="center"><br> <code>libwebp-0.5.1.tar</code>，创建一个<code>build</code>文件夹，将该压缩文件放到<code>build</code>目录，然后再创建一个<code>build.sh</code>的shell文件，该文件用来生成通用的<code>framework</code>，代码如下：</p>
 <a id="more"></a>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">#!/bin/sh</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># <span class="doctag">Note:</span> This build script assumes it can find the archive for libwebp </span></div><div class="line"><span class="comment"># in the current directory. You can download it from the following URL:</span></div><div class="line"><span class="comment">#  http://code.google.com/speed/webp/download.html</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># The resulting framework will can be found in the current directory </span></div><div class="line"><span class="comment"># with the name WebP.framework</span></div><div class="line"><span class="comment">#</span></div><div class="line"></div><div class="line">SDK=9.3	<span class="comment">#改成自己的SDK版本</span></div><div class="line">PLATFORMS=<span class="string">"iPhoneSimulator iPhoneSimulator-64 iPhoneOS-V7 iPhoneOS-V7s iPhoneOS-ARM64"</span></div><div class="line">DEVELOPER=`xcode-select -print-path`</div><div class="line">TOPDIR=`<span class="built_in">pwd</span>`</div><div class="line">BUILDDIR=<span class="string">"<span class="variable">$TOPDIR</span>/tmp"</span></div><div class="line">FINALDIR=<span class="string">"<span class="variable">$TOPDIR</span>/WebP.framework"</span></div><div class="line">LIBLIST=<span class="string">''</span></div><div class="line">DEVROOT=<span class="string">"<span class="variable">$&#123;DEVELOPER&#125;</span>/Toolchains/XcodeDefault.xctoolchain"</span></div><div class="line"></div><div class="line">mkdir -p <span class="variable">$BUILDDIR</span></div><div class="line">mkdir -p <span class="variable">$FINALDIR</span></div><div class="line">mkdir <span class="variable">$FINALDIR</span>/Headers/</div><div class="line"></div><div class="line"><span class="keyword">for</span> PLATFORM <span class="keyword">in</span> <span class="variable">$&#123;PLATFORMS&#125;</span></div><div class="line"><span class="keyword">do</span></div><div class="line">  <span class="keyword">if</span> [ <span class="string">"<span class="variable">$&#123;PLATFORM&#125;</span>"</span> == <span class="string">"iPhoneOS-V7"</span> ]</div><div class="line">  <span class="keyword">then</span></div><div class="line">    SDKPATH=<span class="string">"<span class="variable">$&#123;DEVELOPER&#125;</span>/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS9.3.sdk/"</span>	<span class="comment">#改成自己的SDK版本</span></div><div class="line">    ARCH=<span class="string">"armv7"</span></div><div class="line">    HOST=<span class="variable">$&#123;ARCH&#125;</span>-apple-darwin</div><div class="line">  <span class="keyword">elif</span> [ <span class="string">"<span class="variable">$&#123;PLATFORM&#125;</span>"</span> == <span class="string">"iPhoneOS-V7s"</span> ]</div><div class="line">  <span class="keyword">then</span></div><div class="line">    SDKPATH=<span class="string">"<span class="variable">$&#123;DEVELOPER&#125;</span>/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS9.3.sdk/"</span>	<span class="comment">#改成自己的SDK版本</span></div><div class="line">    ARCH=<span class="string">"armv7s"</span></div><div class="line">    HOST=<span class="variable">$&#123;ARCH&#125;</span>-apple-darwin</div><div class="line">  <span class="keyword">elif</span> [ <span class="string">"<span class="variable">$&#123;PLATFORM&#125;</span>"</span> == <span class="string">"iPhoneOS-ARM64"</span> ]</div><div class="line">  <span class="keyword">then</span></div><div class="line">    SDKPATH=<span class="string">"<span class="variable">$&#123;DEVELOPER&#125;</span>/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS9.3.sdk/"</span>	<span class="comment">#改成自己的SDK版本</span></div><div class="line">    ARCH=<span class="string">"arm64"</span></div><div class="line">    HOST=<span class="string">"aarch64-apple-darwin"</span></div><div class="line">  <span class="keyword">elif</span> [ <span class="string">"<span class="variable">$&#123;PLATFORM&#125;</span>"</span> == <span class="string">"iPhoneSimulator-64"</span> ]</div><div class="line">  <span class="keyword">then</span></div><div class="line">    SDKPATH=<span class="string">"<span class="variable">$&#123;DEVELOPER&#125;</span>/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator9.3.sdk/"</span>	<span class="comment">#改成自己的SDK版本</span></div><div class="line">    ARCH=<span class="string">"x86_64"</span></div><div class="line">    HOST=<span class="variable">$&#123;ARCH&#125;</span>-apple-darwin</div><div class="line">  <span class="keyword">else</span></div><div class="line">    SDKPATH=<span class="string">"<span class="variable">$&#123;DEVELOPER&#125;</span>/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator9.3.sdk/"</span>	<span class="comment">#改成自己的SDK版本</span></div><div class="line">    ARCH=<span class="string">"i386"</span></div><div class="line">    HOST=<span class="variable">$&#123;ARCH&#125;</span>-apple-darwin</div><div class="line">  <span class="keyword">fi</span></div><div class="line"></div><div class="line">  <span class="built_in">export</span> CC=<span class="variable">$&#123;DEVROOT&#125;</span>/usr/bin/cc</div><div class="line">  <span class="built_in">export</span> LD=<span class="variable">$&#123;DEVROOT&#125;</span>/usr/bin/ld</div><div class="line">  <span class="built_in">export</span> CPP=<span class="variable">$&#123;DEVROOT&#125;</span>/usr/bin/cpp</div><div class="line">  <span class="built_in">export</span> CXX=<span class="variable">$&#123;DEVROOT&#125;</span>/usr/bin/g++</div><div class="line">  <span class="built_in">export</span> AR=<span class="variable">$&#123;DEVROOT&#125;</span>/usr/bin/ar</div><div class="line">  <span class="built_in">export</span> AS=<span class="variable">$&#123;DEVROOT&#125;</span>/usr/bin/as</div><div class="line">  <span class="built_in">export</span> NM=<span class="variable">$&#123;DEVROOT&#125;</span>/usr/bin/nm</div><div class="line">  <span class="built_in">export</span> CXXCPP=<span class="variable">$&#123;DEVROOT&#125;</span>/usr/bin/cpp</div><div class="line">  <span class="built_in">export</span> RANLIB=<span class="variable">$&#123;DEVROOT&#125;</span>/usr/bin/ranlib</div><div class="line"></div><div class="line">  rm -rf libwebp-0.5.1	<span class="comment">#根据自己的libwebp版本</span></div><div class="line">  tar xzf libwebp-0.5.1.tar</div><div class="line">  <span class="built_in">cd</span> libwebp-0.5.1</div><div class="line"></div><div class="line">  sh autogen.sh</div><div class="line"></div><div class="line">  ROOTDIR=<span class="string">"/tmp/install.$$.<span class="variable">$&#123;ARCH&#125;</span>"</span></div><div class="line">  rm -rf <span class="string">"<span class="variable">$&#123;ROOTDIR&#125;</span>"</span></div><div class="line">  mkdir -p <span class="string">"<span class="variable">$&#123;ROOTDIR&#125;</span>"</span></div><div class="line"></div><div class="line">  <span class="built_in">export</span> LDFLAGS=<span class="string">"-arch <span class="variable">$&#123;ARCH&#125;</span> -miphoneos-version-min=7.0 -pipe -isysroot <span class="variable">$&#123;SDKPATH&#125;</span> -O3 -DNDEBUG"</span></div><div class="line">  <span class="built_in">export</span> CFLAGS=<span class="string">"-arch <span class="variable">$&#123;ARCH&#125;</span> -miphoneos-version-min=7.0 -pipe -isysroot <span class="variable">$&#123;SDKPATH&#125;</span> -O3 -DNDEBUG"</span></div><div class="line">  <span class="built_in">export</span> CXXFLAGS=<span class="string">"-arch <span class="variable">$&#123;ARCH&#125;</span> -miphoneos-version-min=7.0 -pipe -isysroot <span class="variable">$&#123;SDKPATH&#125;</span> -O3 -DNDEBUG"</span></div><div class="line"></div><div class="line">./configure --host=<span class="variable">$&#123;HOST&#125;</span> --prefix=<span class="variable">$&#123;ROOTDIR&#125;</span> --disable-shared --enable-static \</div><div class="line">            --enable-libwebpdecoder --enable-swap-16bit-csp --build=$(./config.guess)</div><div class="line">  make</div><div class="line">  make install</div><div class="line"></div><div class="line">  LIBLIST=<span class="string">"<span class="variable">$&#123;LIBLIST&#125;</span> <span class="variable">$&#123;ROOTDIR&#125;</span>/lib/libwebp.a"</span></div><div class="line">  cp -Rp <span class="variable">$&#123;ROOTDIR&#125;</span>/include/webp/* <span class="variable">$FINALDIR</span>/Headers/</div><div class="line"></div><div class="line">  <span class="built_in">cd</span> ..</div><div class="line"><span class="keyword">done</span></div><div class="line"></div><div class="line"><span class="variable">$&#123;DEVROOT&#125;</span>/usr/bin/lipo -create <span class="variable">$LIBLIST</span> -output <span class="variable">$FINALDIR</span>/WebP</div><div class="line"></div><div class="line">rm -rf libwebp-0.5.1</div><div class="line">rm -rf <span class="variable">$&#123;BUILDDIR&#125;</span></div></pre></td></tr></table></figure>
<p> 上面的代码需要注意的几个地方，就是<code>SDKPath</code>、<code>SDK</code>变量需改成自己Xcode的SDK的版本号，因为我这个实例用的是<code>libwebp-0.5.1</code>版本，如果用的是其他的版本，则需要把脚本中的所有<code>libwebp-0.5.1</code>替换成你自己的版本名。一切妥当后，执行<code>./build.sh</code>命令，最后会生成一个<code>WebP.framework</code>框架，将其添加到自己的项目中，然后在<code>Build Settings</code>的<code>Framework Search Paths</code>中添加<code>WebP.framework</code>框架所在的目录路径即可。</p>
<h2 id="直接使用官方编译好的framework"><a href="#直接使用官方编译好的framework" class="headerlink" title="直接使用官方编译好的framework"></a>直接使用官方编译好的<code>framework</code></h2><p> 直接使用官方编译好的<code>framework</code>，下载地址请戳<a href="https://developers.google.com/speed/webp/download" target="_blank" rel="external">这里</a>，下载如下如图所示的文件，下载完之后直接改名为<code>WebP.framework</code>，添加到项目中，同样，在<code>Build Settings</code>的<code>Framework Search Paths</code>中添加<code>WebP.framework</code>框架所在的目录路径即可。<br> <img src="http://oc54pu02q.bkt.clouddn.com/QQ20160826-2@2x.png" width="500" height="" alt="" align="center"></p>
<p> <em>项目示例请戳<a href="https://github.com/zhongwuzw/WebP-iOS-example" target="_blank" rel="external">这里</a>，欢迎Star。</em></p>
<h2 id="SDWebImage"><a href="#SDWebImage" class="headerlink" title="SDWebImage"></a>SDWebImage</h2><p><a href="https://github.com/rs/SDWebImage" target="_blank" rel="external">SDWebImage</a>支持<code>WebP</code>格式，但是默认不开启，需要添加SubSpecs，具体步骤参看<code>SDWebImage</code>官方说明。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Swift之通过减少动态派发来提升性能]]></title>
      <url>https://zhongwuzw.github.io/2016/08/24/Swift%E4%B9%8B%E9%80%9A%E8%BF%87%E5%87%8F%E5%B0%91%E5%8A%A8%E6%80%81%E6%B4%BE%E5%8F%91%E6%9D%A5%E6%8F%90%E5%8D%87%E6%80%A7%E8%83%BD/</url>
      <content type="html"><![CDATA[<p>Swift是OO（面向对象）的语言，所以少不了方法和属性的重载等特性，程序只能在运行时来确定具体的方法或属性来间接调用或间接访问，这就叫做动态派发。从性能上考虑，对于动态派发的方法，会有常量时间的运行时开销。接下来将介绍三种方法来移除这样的动态性，<code>final</code>，<code>private</code>，全模块优化（Whole Module Optimization），以此提升性能。</p>
<p>考虑下面的例子：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParticleModel</span> </span>&#123;</div><div class="line">	<span class="keyword">var</span> point = ( <span class="number">0.0</span>, <span class="number">0.0</span> )</div><div class="line">	<span class="keyword">var</span> velocity = <span class="number">100.0</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">func</span> <span class="title">updatePoint</span><span class="params">(newPoint: <span class="params">(Double, Double)</span></span></span>, newVelocity: <span class="type">Double</span>) &#123;</div><div class="line">		point = newPoint</div><div class="line">		velocity = newVelocity</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">func</span> <span class="title">update</span><span class="params">(newP: <span class="params">(Double, Double)</span></span></span>, newV: <span class="type">Double</span>) &#123;</div><div class="line">		updatePoint(newP, newVelocity: newV)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> p = <span class="type">ParticleModel</span>()</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">stride</span>(from: <span class="number">0.0</span>, through: <span class="number">360</span>, by: <span class="number">1.0</span>) &#123;</div><div class="line">	p.update((i * sin(i), i), newV:i*<span class="number">1000</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如上述代码所示，调用过程为：</p>
<ol>
<li>调用变量<code>p</code>的<code>update</code>方法。</li>
<li>调用<code>p</code>的<code>updatePoint</code>方法。</li>
<li>获取<code>p</code>的元组类型变量<code>point</code>。</li>
<li>获取<code>p</code>的属性velocity。</li>
</ol>
<p>由于<code>ParticleModel</code>可以被子类，所以其方法和属性就能被重载，这就不可避免的需要使用动态调用。</p>
<p>在Swift中，动态调用是通过在一个方法表中找到方法然后执行间接的调用（类似于C++的虚函数表），对于这种先查找再调用的过程，其效率是要低于方法的直接调用，而且间接调用会阻止许多编译器优化，这将加重间接调用的开销。接下来将列举一些技巧来禁用动态派发的行为，以达到提升性能的目的。</p>
<a id="more"></a>
<h2 id="当属性、方法、或类不需要被重载时，可在其声明的地方加上final关键字"><a href="#当属性、方法、或类不需要被重载时，可在其声明的地方加上final关键字" class="headerlink" title="当属性、方法、或类不需要被重载时，可在其声明的地方加上final关键字"></a>当属性、方法、或类不需要被重载时，可在其声明的地方加上<code>final</code>关键字</h2><p>在属性，方法或类声明时加上<code>final</code>关键字，表示其不能被重载，这将允许编译器安全的移除动态派发。如下代码所示，<code>point</code>和<code>velocity</code>将直接从对象的存储属性中加载，<code>updatePoint()</code>方法将被直接调用；另外，<code>update()</code>依然会通过动态派发的方式来调用，这样，<code>ParticleModel</code>的子类就可以重载<code>update()</code>来自定义实现。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParticleModel</span> </span>&#123;</div><div class="line">	<span class="keyword">final</span> <span class="keyword">var</span> point = ( x: <span class="number">0.0</span>, y: <span class="number">0.0</span> )</div><div class="line">	<span class="keyword">final</span> <span class="keyword">var</span> velocity = <span class="number">100.0</span></div><div class="line"></div><div class="line">	<span class="keyword">final</span> <span class="function"><span class="keyword">func</span> <span class="title">updatePoint</span><span class="params">(newPoint: <span class="params">(Double, Double)</span></span></span>, newVelocity: <span class="type">Double</span>) &#123;</div><div class="line">		point = newPoint</div><div class="line">		velocity = newVelocity</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">func</span> <span class="title">update</span><span class="params">(newP: <span class="params">(Double, Double)</span></span></span>, newV: <span class="type">Double</span>) &#123;</div><div class="line">		updatePoint(newP, newVelocity: newV)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>除了上面所示，在属性和方法声明前加<code>final</code>关键字，还可以直接在类上加<code>final</code>，表示该类将不能作为父类被子类化，隐含的表明该类的所有的方法和属性都是<code>final</code>的。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ParticleModel</span> </span>&#123;</div><div class="line">	<span class="keyword">var</span> point = ( x: <span class="number">0.0</span>, y: <span class="number">0.0</span> )</div><div class="line">	<span class="keyword">var</span> velocity = <span class="number">100.0</span></div><div class="line">	<span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="在属性、方法、或类声明前加private关键字，将限制其只能在同一个文件中被引用"><a href="#在属性、方法、或类声明前加private关键字，将限制其只能在同一个文件中被引用" class="headerlink" title="在属性、方法、或类声明前加private关键字，将限制其只能在同一个文件中被引用"></a>在属性、方法、或类声明前加<code>private</code>关键字，将限制其只能在同一个文件中被引用</h2><p>在声明前加<code>private</code>关键字，将限制其只能在当前文件中被引用，这将允许编译器在当前文件中找到所有潜在的重载声明，编译器会对这些<code>private</code>关键字的方法或属性进行优化，移除间接的方法调用以及属性访问。</p>
<p>假设在当前文件中没有类重载<code>ParticleModel</code>，那么编译器将移除所有带有<code>private</code>声明的动态派发调用。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParticleModel</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">var</span> point = ( x: <span class="number">0.0</span>, y: <span class="number">0.0</span> )</div><div class="line">	<span class="keyword">private</span> <span class="keyword">var</span> velocity = <span class="number">100.0</span></div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">updatePoint</span><span class="params">(newPoint: <span class="params">(Double, Double)</span></span></span>, newVelocity: <span class="type">Double</span>) &#123;</div><div class="line">		point = newPoint</div><div class="line">		velocity = newVelocity</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">func</span> <span class="title">update</span><span class="params">(newP: <span class="params">(Double, Double)</span></span></span>, newV: <span class="type">Double</span>) &#123;</div><div class="line">		updatePoint(newP, newVelocity: newV)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如上代码所示，<code>point</code>和<code>velocity</code>将直接访问，<code>updatePoint()</code>方法也将直接被调用，而<code>update()</code>方法由于没有加<code>private</code>关键字，依然是只能间接调用。<br>同样，<code>private</code>可以加在类的声明前，等同于类的所有方法和属性都将加上<code>private</code>关键字。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ParticleModel</span> </span>&#123;</div><div class="line">	<span class="keyword">var</span> point = ( x: <span class="number">0.0</span>, y: <span class="number">0.0</span> )</div><div class="line">	<span class="keyword">var</span> velocity = <span class="number">100.0</span></div><div class="line">	<span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="在使用internal的声明中通过使用Whole-Module-Optimization来隐式的推断出final"><a href="#在使用internal的声明中通过使用Whole-Module-Optimization来隐式的推断出final" class="headerlink" title="在使用internal的声明中通过使用Whole Module Optimization来隐式的推断出final"></a>在使用<code>internal</code>的声明中通过使用<code>Whole Module Optimization</code>来隐式的推断出<code>final</code></h2><p>默认的情况下，Xcode将单独编译源文件，这会限制编译器优化的程度，Xcode 7后，增加了<code>Whole Module Optimization</code>选项，它能允许编译器在同一个模块（Module）中分析所有的源文件来进行优化，可以在Xcode的<code>Building Settings</code>中开启该选项，如下图所示。<br> <img src="http://oc54pu02q.bkt.clouddn.com/QQ20160825-0@2x.png" width="500" height="" alt="" align="center"></p>
<p> 在开启<code>Whole Module Optimization</code>选项，且声明为<code>internal</code>(默认级别)的情况下，模块的所有文件将同时被编译，这将允许编译器对整个模块一起分析，并对<strong>没有被重载</strong>且声明为<code>internal</code>级别的类、方法或属性添加<code>final</code>关键字。<br> 如下代码所示，我们修改一下<code>ParticleModel</code>类，添加<code>public</code>关键字：</p>
 <figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParticleModel</span> </span>&#123;</div><div class="line">	<span class="keyword">var</span> point = ( x: <span class="number">0.0</span>, y: <span class="number">0.0</span> )</div><div class="line">	<span class="keyword">var</span> velocity = <span class="number">100.0</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">func</span> <span class="title">updatePoint</span><span class="params">(newPoint: <span class="params">(Double, Double)</span></span></span>, newVelocity: <span class="type">Double</span>) &#123;</div><div class="line">		point = newPoint</div><div class="line">		velocity = newVelocity</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">update</span><span class="params">(newP: <span class="params">(Double, Double)</span></span></span>, newV: <span class="type">Double</span>) &#123;</div><div class="line">		updatePoint(newP, newVelocity: newV)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> p = <span class="type">ParticleModel</span>()</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">stride</span>(from: <span class="number">0.0</span>, through: times, by: <span class="number">1.0</span>) &#123;</div><div class="line">	p.update((i * sin(i), i), newV:i*<span class="number">1000</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 如上代码，当开启<code>Whole Module Optimization</code>选项的情况下，编译器能在属性<code>point</code>,<code>velotity</code>，以及<code>updatePoint()</code>方法上推断出<code>final</code>，既相当于在<code>point</code>、<code>velocity</code>、<code>updatePoint()</code>声明前加上<code>final</code>关键字，而<code>update()</code>方法由于是<code>public</code>级别，所以无法推断出<code>final</code>关键字，其仍将是间接调用。</p>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ul>
<li>当使用<code>private</code>或<code>final</code>关键字，或者在开启<code>Whole Module Optimization</code>选项，声明为<code>internal</code>级别的<strong>没有被重载</strong>的方法下，将直接调用，在编译时确定。</li>
<li>运行时决定的动态派发的情形包括：<ul>
<li>继承自<code>NSObject</code>或者方法有@objc前缀。</li>
<li>使用Swift的方法表的方式，除去上述情况下，将采用这种方式。</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Swift中使用Objective-C的Runtime]]></title>
      <url>https://zhongwuzw.github.io/2016/08/23/Swift%E4%B8%AD%E4%BD%BF%E7%94%A8Objective-C%E7%9A%84Runtime/</url>
      <content type="html"><![CDATA[<h1 id="Swift调用Objective-C的Runtime"><a href="#Swift调用Objective-C的Runtime" class="headerlink" title="Swift调用Objective-C的Runtime"></a>Swift调用Objective-C的Runtime</h1><hr>
<p>首先，我们来测试一下使用Swift代码来调用Objective-C Runtime的方法，首先创建两个类，用来做对比，一个是纯的Swift类，另一个继承自NSObject：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//纯Swift类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SwiftClass</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> aBool = <span class="literal">true</span></div><div class="line">    <span class="keyword">var</span> aInt = <span class="number">3</span></div><div class="line">    <span class="keyword">var</span> aStrig = <span class="string">"sss"</span></div><div class="line">    <span class="keyword">var</span> aObject :<span class="type">AnyObject</span>?</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">swiftTest</span><span class="params">()</span></span> &#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//继承自NSObject的类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SwiftWithOCClass</span> :<span class="title">NSObject</span></span>&#123;</div><div class="line">    <span class="keyword">var</span> aBool = <span class="literal">true</span></div><div class="line">    <span class="keyword">var</span> aInt = <span class="number">3</span></div><div class="line">    <span class="keyword">var</span> aStrig = <span class="string">"sss"</span></div><div class="line">    <span class="keyword">var</span> aObject :<span class="type">AnyObject</span>?</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">swiftTest</span><span class="params">(aCharacter:Character)</span></span> &#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">justTest</span><span class="params">()</span></span> &#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>接下来，我们来创建一个方法，用来获取Class的方法和属性，代码如下：</p>
<figure class="highlight julia"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">func getMethodListAndProperties(cls:AnyClass) -&gt; <span class="built_in">Void</span> &#123;</div><div class="line">    var methodCount:<span class="built_in">UInt32</span> = <span class="number">0</span></div><div class="line">    <span class="keyword">let</span> methodList = class_copyMethodList(cls, &amp;methodCount)</div><div class="line">    </div><div class="line">    //打印方法</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0.</span>.&lt;<span class="built_in">Int</span>(methodCount) &#123;</div><div class="line">        <span class="keyword">let</span> method = methodList[i]</div><div class="line">        print(<span class="built_in">String</span>(<span class="built_in">UTF8String</span>:method_getTypeEncoding(method)))</div><div class="line">        print(<span class="built_in">String</span>(_sel:method_getName(method)))</div><div class="line">    &#125;</div><div class="line">    free(methodList)</div><div class="line">    </div><div class="line">    var propertiesCount:<span class="built_in">UInt32</span> = <span class="number">0</span></div><div class="line">    <span class="keyword">let</span> propertiesList = class_copyPropertyList(cls, &amp;propertiesCount)</div><div class="line">    </div><div class="line">    //打印属性</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0.</span>.&lt;<span class="built_in">Int</span>(propertiesCount) &#123;</div><div class="line">        <span class="keyword">let</span> property = propertiesList[i]</div><div class="line">        print(<span class="built_in">String</span>(<span class="built_in">UTF8String</span>:property_getName(property)))</div><div class="line">        print(<span class="built_in">String</span>(<span class="built_in">UTF8String</span>:property_getAttributes(property)))</div><div class="line">    &#125;</div><div class="line">    free(propertiesList)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当调用<code>getMethodListAndProperties(SwiftWithOCClass)</code>方法时，其打印结果如下：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//打印的方法</span></div><div class="line"><span class="function"><span class="title">Optional</span><span class="params">(<span class="string">"B16@0:8"</span>)</span></span></div><div class="line">aBool</div><div class="line"><span class="function"><span class="title">Optional</span><span class="params">(<span class="string">"v20@0:8B16"</span>)</span></span></div><div class="line">setABool:</div><div class="line"><span class="function"><span class="title">Optional</span><span class="params">(<span class="string">"q16@0:8"</span>)</span></span></div><div class="line">aInt</div><div class="line"><span class="function"><span class="title">Optional</span><span class="params">(<span class="string">"v24@0:8q16"</span>)</span></span></div><div class="line">setAInt:</div><div class="line"><span class="function"><span class="title">Optional</span><span class="params">(<span class="string">"@16@0:8"</span>)</span></span></div><div class="line">aStrig</div><div class="line"><span class="function"><span class="title">Optional</span><span class="params">(<span class="string">"v24@0:8@16"</span>)</span></span></div><div class="line">setAStrig:</div><div class="line"><span class="function"><span class="title">Optional</span><span class="params">(<span class="string">"@16@0:8"</span>)</span></span></div><div class="line">aObject</div><div class="line"><span class="function"><span class="title">Optional</span><span class="params">(<span class="string">"v24@0:8@16"</span>)</span></span></div><div class="line">setAObject:</div><div class="line"><span class="function"><span class="title">Optional</span><span class="params">(<span class="string">"v16@0:8"</span>)</span></span></div><div class="line">justTest</div><div class="line"><span class="function"><span class="title">Optional</span><span class="params">(<span class="string">"@?"</span>)</span></span></div><div class="line"><span class="selector-class">.cxx_destruct</span></div><div class="line"><span class="function"><span class="title">Optional</span><span class="params">(<span class="string">"@16@0:8"</span>)</span></span></div><div class="line">init</div><div class="line"></div><div class="line"><span class="comment">//打印的属性</span></div><div class="line"><span class="function"><span class="title">Optional</span><span class="params">(<span class="string">"aBool"</span>)</span></span></div><div class="line"><span class="function"><span class="title">Optional</span><span class="params">(<span class="string">"TB,N,VaBool"</span>)</span></span></div><div class="line"><span class="function"><span class="title">Optional</span><span class="params">(<span class="string">"aInt"</span>)</span></span></div><div class="line"><span class="function"><span class="title">Optional</span><span class="params">(<span class="string">"Tq,N,VaInt"</span>)</span></span></div><div class="line"><span class="function"><span class="title">Optional</span><span class="params">(<span class="string">"aStrig"</span>)</span></span></div><div class="line"><span class="function"><span class="title">Optional</span><span class="params">(<span class="string">"T@\"NSString\",N,C,VaStrig"</span>)</span></span></div><div class="line"><span class="function"><span class="title">Optional</span><span class="params">(<span class="string">"aObject"</span>)</span></span></div><div class="line"><span class="function"><span class="title">Optional</span><span class="params">(<span class="string">"T@,N,&amp;,VaObject"</span>)</span></span></div></pre></td></tr></table></figure>
<ul>
<li><p>当调用<code>getMethodListAndProperties(SwiftClass)</code>方法时，我们发现并没有打印结果，既没有获取到纯Swift类的属性和方法；而继承自<code>NSObject</code>的类SwiftWithOCClass则能够获取到属性和方法，翻阅官方文档（如下图），我们就能找到原因，通过继承<code>NSObject</code>，对象可以拥有运行时且可以被看成Objective-C对象。<br><img src="http://oc54pu02q.bkt.clouddn.com/QQ20160824-0@2x.png" width="500" height="" alt="" align="center"></p>
</li>
<li><p>我们不禁要问，对于纯Swift类，难道就没有办法使用Objective-C运行时了么？答案是否定的，我们可以使用<code>dynamic</code>修饰符，实验一下，在纯Swift类的属性aBool中加入<code>dynamic</code>修饰符，代码如下,我们发现，可以通过运行时找到aBool属性的两个访问器方法以及属性名。</p>
</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SwiftClass</span> </span>&#123;</div><div class="line">    <span class="keyword">dynamic</span> <span class="keyword">var</span> aBool = <span class="literal">true</span></div><div class="line">    <span class="keyword">var</span> aInt = <span class="number">3</span></div><div class="line">    <span class="keyword">var</span> aStrig = <span class="string">"sss"</span></div><div class="line">    <span class="keyword">var</span> aObject :<span class="type">AnyObject</span>?</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">swiftTest</span><span class="params">()</span></span> &#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//打印结果</span></div><div class="line"><span class="type">Optional</span>(<span class="string">"B16@0:8"</span>)</div><div class="line">aBool</div><div class="line"><span class="type">Optional</span>(<span class="string">"v20@0:8B16"</span>)</div><div class="line">setABool:</div><div class="line"><span class="type">Optional</span>(<span class="string">"aBool"</span>)</div><div class="line"><span class="type">Optional</span>(<span class="string">"TB,N,VaBool"</span>)</div></pre></td></tr></table></figure>
<ul>
<li>而当调用<code>getMethodListAndProperties(SwiftWithOCClass)</code>时，大多数方法都打印出来了，但有一个方法没获取到，为<code>func swiftTest(aCharacter:Character)</code>，原因是该方法的参数是Character类型，它是Swift特有的，无法转化(Bridge)为OC的类型，所以无法通过运行时获取到该方法。</li>
</ul>
<h1 id="load方法"><a href="#load方法" class="headerlink" title="load方法"></a>load方法</h1><hr>
<p>在使用Objective-C的Runtime时，经常会用到Method Swizzling技术，该技术通常在<code>load</code>方法中实现。而在Swift中不允许定义<code>load</code>方法，否则编译器会报错，所以，如果要实现Method Swizzling，有几种解决方案：</p>
<ul>
<li>在<code>initialize</code>中来实现，但是需要注意的是<code>initialize</code>可能会被调用多次，所以需要在<code>initialize</code>实现中做一些判断，比如判断是否是当前类，而不是子类，使用<code>dispatch_once</code>来进行操作。 </li>
<li>在App Delegate中实现Method Swizzling：在AppDelegate的<code>application(_:didFinishLaunchingWithOptions:)</code>方法中进行Method Swizzling。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>https://zhongwuzw.github.io/2016/08/23/hello-world/</url>
      <content type="html"><![CDATA[<p>Hello World，以前在学习以及项目开发中学到的很多知识点，都会记录在我的印象笔记中，作为整理学习，但是现在，我要开始把我的一些积累放到我的这个小博客上，有问题欢迎大家指正，也附上我的<a href="https://github.com/zhongwuzw" target="_blank" rel="external">Github</a>地址。ps:近期我会整理一下我的印象笔记，将一些知识点放到博客上来。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Swift的Designated和Convenience初始化器]]></title>
      <url>https://zhongwuzw.github.io/2016/08/19/Swift%E7%9A%84Designated%E5%92%8CConvenience%E5%88%9D%E5%A7%8B%E5%8C%96%E5%99%A8/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在Swift中，为了确保类的存储属性都能有一个初始值，提供了几种初始化的方法，接下来将讨论一下Desinated(指定)、Convenience（便捷）初始化器。</p>
<h1 id="Designated（指定）初始化器"><a href="#Designated（指定）初始化器" class="headerlink" title="Designated（指定）初始化器"></a>Designated（指定）初始化器</h1><ul>
<li><p>之前使用过Objective-C的应该比较了解指定初始化器，很多类都提供了指定初始化器，如UIViewController的为：<code>- (instancetype)initWithNibName:(NSString *)nibName bundle:(NSBundle *)nibBundle</code>,UIView的<code>- (instancetype)initWithFrame:(CGRect)aRect</code>，其作用是该类或者其子类在初始化的过程中都会调用指定初始化器。</p>
</li>
<li><p>当在类中定义指定初始化器时，该初始化器会初始化该类的所有存储属性，且当该类是有父类时，<strong>必须</strong>调用父类的<strong>指定</strong>初始化器，注意顺序，先初始化该类自己定义的存储属性，再使用super来调用父类的指定初始化器，跌倒过来编译器会报错。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RecipeIngredient</span>: <span class="title">Food</span> </span>&#123;</div><div class="line">   <span class="keyword">var</span> quantity: <span class="type">Int</span></div><div class="line">   <span class="comment">//指定初始化器</span></div><div class="line">   <span class="keyword">init</span>(name: <span class="type">String</span>, quantity: <span class="type">Int</span>) &#123;</div><div class="line">       <span class="keyword">self</span>.quantity = quantity</div><div class="line">       <span class="keyword">super</span>.<span class="keyword">init</span>(name: name) <span class="comment">//放在该类存储属性初始化之后</span></div><div class="line">   &#125;</div><div class="line">   <span class="keyword">override</span> <span class="keyword">convenience</span> <span class="keyword">init</span>(name: <span class="type">String</span>) &#123;</div><div class="line">       <span class="keyword">self</span>.<span class="keyword">init</span>(name: name, quantity: <span class="number">1</span>)</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>每一个类都必须至少有一个指定初始化器。</p>
</li>
</ul>
<a id="more"></a>
<h1 id="Convenience（便捷）初始化器"><a href="#Convenience（便捷）初始化器" class="headerlink" title="Convenience（便捷）初始化器"></a>Convenience（便捷）初始化器</h1><ul>
<li><p>便捷初始化器需要带一个convenience修饰符，如下代码,在便捷初始化器的定义中，<strong>必须先调用其他的初始化器之后，再赋类的存储属性值</strong>。</p>
  <figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">convenience</span> <span class="selector-tag">init</span>(parameters) &#123;</div><div class="line">    statements</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>便捷初始化器如果重载了父类的指定初始化器，则必须使用override修饰符。</p>
</li>
<li><p>如果子类提供了其父类的<strong>所有</strong>（注意：必须是所有的）指定初始化器的实现，实现有两种，一种是子类的存储属性都提供了默认值，且没有定义指定初始化器，则会自动集成父类的指定初始化器；另一种是在子类中重新定义，子类中重新定义的方法可以是便捷初始化器，既子类中的便捷初始化器可以重载父类的指定初始化器。这样子类就会自动继承父类的便捷初始化器。</p>
</li>
<li><p>在Extensions中只能添加便捷初始化器。</p>
</li>
</ul>
<h1 id="指定初始化器和便捷初始化器之间的关系"><a href="#指定初始化器和便捷初始化器之间的关系" class="headerlink" title="指定初始化器和便捷初始化器之间的关系"></a>指定初始化器和便捷初始化器之间的关系</h1><p>指定初始化器和便捷初始化器之间的3个法则：</p>
<ol>
<li>指定初始化器必须调用其<strong><em>直接</em></strong>父类的指定初始化器。</li>
<li>便捷初始化器必须调用该类中其他的初始化器，其初始化器的类型不限。</li>
<li>在便捷初始化器的调用链中最后必须调用一个指定初始化器。</li>
</ol>
<p>最后，直接上官方文档的图示就会对上面的3个规则有比较清晰的认识：<br> <img src="http://oc54pu02q.bkt.clouddn.com/QQ20160819-0@2x.png" width="500" height="254" alt="" align="center"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[知乎日报iOS]]></title>
      <url>https://zhongwuzw.github.io/2016/08/18/%E7%9F%A5%E4%B9%8E%E6%97%A5%E6%8A%A5iOS/</url>
      <content type="html"><![CDATA[<p><strong>Disclaimer - 声明</strong><br><em>Zhihu</em> is a trademark of <em>Zhihu. Inc</em>. This app is not created nor endorsed by Zhihu Inc. All the information and content accessible through Zhihu Daily Purify are subject to Zhihu’s copyright and terms of use. This is a free app and does not charge for anything. All content are available for free from <a href="http://www.zhihu.com" target="_blank" rel="external">Zhihu</a>.</p>
<p>『知乎』是 <em>知乎. Inc</em> 的注册商标。本软件与其代码非由知乎创作或维护。软件中所包含的信息与内容皆违反版权与知乎用户协议。它是一个免费软件，使用它不收取您任何费用。其中的所有内容均可在<a href="http://www.zhihu.com" target="_blank" rel="external">知乎</a>获取。</p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近工作工作不是很忙，所以准备开发项目练练手，之前发现了这个<em><a href="https://github.com/izzyleung/ZhihuDailyPurify/" target="_blank" rel="external">知乎日报API</a></em>,其提供了知乎日报的API地址，所以决定开发知乎日报。先上<em><a href="https://github.com/zhongwuzw/ZhihuDaily" target="_blank" rel="external">Github地址</a></em>，欢迎<em>Star、Issues、Pull Request</em>。</p>
<h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><h2 id="1-应用主页部分："><a href="#1-应用主页部分：" class="headerlink" title="1.应用主页部分："></a>1.应用主页部分：</h2><p><img src="https://raw.githubusercontent.com/zhongwuzw/ZhihuDaily/master/images/demo1.gif" alt=""><br><a id="more"></a></p>
<ul>
<li>主页中最上方的滚动条实现思路：该无限滚动条有很多实现方式，包括使用UIScrollView，添加3个子视图用于管理，每次滑动后都进行3个子视图内容的重新赋值。之前，我采用过这种思路，所以又想了另外一种方法，直接使用UICollectionView来实现，在第一个和最后一个数据源中添加最后一个、第一个数据，在scrollViewDidScroll中处理到达左右两边后的跳转即可，代码如下：</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)scrollViewDidScroll:(<span class="built_in">UIScrollView</span> *)scrollView&#123;</div><div class="line">	[<span class="keyword">self</span> scrollCollectionViewToCorrectIndexPath];</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(<span class="keyword">void</span>)scrollCollectionViewToCorrectIndexPath&#123;</div><div class="line">	<span class="keyword">float</span> contentOffsetWhenFullyScrolledRight = <span class="keyword">self</span>.frame.size.width * ([<span class="keyword">self</span>.dataArray count] <span class="number">-1</span>);</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">self</span>.collectionView.contentOffset.x == contentOffsetWhenFullyScrolledRight) 	&#123;</div><div class="line">        <span class="built_in">NSIndexPath</span> *newIndexPath = [<span class="built_in">NSIndexPath</span> indexPathForItem:<span class="number">1</span> inSection:<span class="number">0</span>];</div><div class="line">        </div><div class="line">        [<span class="keyword">self</span>.collectionView scrollToItemAtIndexPath:newIndexPath atScrollPosition:<span class="built_in">UICollectionViewScrollPositionLeft</span> animated:<span class="literal">NO</span>];</div><div class="line">        </div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">self</span>.collectionView.contentOffset.x == <span class="number">0</span>)  &#123;</div><div class="line">        <span class="built_in">NSIndexPath</span> *newIndexPath = [<span class="built_in">NSIndexPath</span> indexPathForItem:([<span class="keyword">self</span>.dataArray count] <span class="number">-2</span>) inSection:<span class="number">0</span>];</div><div class="line">        </div><div class="line">        [<span class="keyword">self</span>.collectionView scrollToItemAtIndexPath:newIndexPath atScrollPosition:<span class="built_in">UICollectionViewScrollPositionLeft</span> animated:<span class="literal">NO</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>由于主页上方的无限滚动条是有UICollectionView来实现的，所以为了实现主页新闻页滑动时的动态放缩，直接在setFrame中invalidate collectionView的layout即可(一开始使用AutoLayout来调整，后来发现当快速滑动时会出现短时间错位的问题，所以只得使用setFrame)：</li>
</ul>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">-</span>(void)<span class="selector-tag">setFrame</span><span class="selector-pseudo">:(CGRect)frame</span>&#123;</div><div class="line">    <span class="selector-tag">if</span> (self.height != frame.size.height) &#123;</div><div class="line">        <span class="selector-attr">[self.collectionView.collectionViewLayout invalidateLayout]</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="selector-attr">[super setFrame:frame]</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>项目中多个页面实现了点击状态栏页面滑动到顶部的功能，实现方法无非就是先获取到点击状态栏时的事件，由于AppDelegate继承自UIResponder，所以能够响应事件，作为响应者链最顶层（响应者链如下图所示）的响应者，当前面的Responder无法处理事件而向上传递时，最后会到达AppDelegate，所以统一在AppDelegate中处理状态栏的点击，直接重写<code>- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event</code>方法，代码示例如下：</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event&#123;</div><div class="line">    [<span class="keyword">super</span> touchesBegan:touches withEvent:event];</div><div class="line">    </div><div class="line">    <span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *events = [event allTouches];</div><div class="line">    <span class="built_in">UITouch</span> *touch = [events anyObject];</div><div class="line">    <span class="built_in">CGPoint</span> location = [touch locationInView:<span class="keyword">self</span>.window];</div><div class="line">    <span class="built_in">CGRect</span> statusBarFrame = [<span class="built_in">UIApplication</span> sharedApplication].statusBarFrame;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (<span class="built_in">CGRectContainsPoint</span>(statusBarFrame, location)) &#123;</div><div class="line">        [[<span class="built_in">NSNotificationCenter</span> defaultCenter] postNotificationName:STATUS_BAR_TAP_NOTIFICATION object:<span class="literal">nil</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://oc54pu02q.bkt.clouddn.com/responder_chain.png" alt="image"></p>
<ul>
<li>在使用Notification时需要注意的就是Observer对象一定要在自己被销毁之前remove掉Observer。还有一个注意的点就是Observer在接收到Notification执行时的线程与发出Notification的线程是一致的，所以如果存在子线程发Notification的情况，在Observer处理时不要直接操作UI。</li>
</ul>
<h2 id="2-新闻详细页部分："><a href="#2-新闻详细页部分：" class="headerlink" title="2.新闻详细页部分："></a>2.新闻详细页部分：</h2><p><img src="https://raw.githubusercontent.com/zhongwuzw/ZhihuDaily/master/images/demo2.gif" alt=""><br><img src="https://raw.githubusercontent.com/zhongwuzw/ZhihuDaily/master/images/demo3.gif" alt=""></p>
<ul>
<li>新闻主页和详细页部分使用了一个单例Manager来进行数据的管理，使用外观模式，Manager提供简洁的接口，如下代码：</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">HomePageDataManager</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableArray</span>&lt;NewsListResponseModel *&gt; *homePageArray;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSArray</span>&lt;TopNewsResponseModel *&gt; *topNewsArray;</div><div class="line"></div><div class="line">SYNTHESIZE_SINGLETON_FOR_CLASS_HEADER(HomePageDataManager)</div><div class="line">- (<span class="built_in">NSURLSessionDataTask</span> *)getLatestNewsWithSuccess:(HttpClientSuccessBlock)success</div><div class="line">                                              fail:(HttpClientFailureBlock)fail;</div><div class="line">- (<span class="built_in">NSURLSessionDataTask</span> *)getPreviousNewsWithSuccess:(HttpClientSuccessBlock)success</div><div class="line">                                              fail:(HttpClientFailureBlock)fail;</div><div class="line">- (<span class="built_in">NSInteger</span>)numberofSections;</div><div class="line">- (<span class="built_in">NSInteger</span>)numberofRowsInSection:(<span class="built_in">NSInteger</span>)section;</div><div class="line">- (NewsResponseModel *)modelForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath;</div><div class="line">- (<span class="built_in">NSString</span> *)headerTitleForSection:(<span class="built_in">NSInteger</span>)section;</div><div class="line">- (<span class="built_in">NSInteger</span>)getPreviousNewsWithSection:(<span class="built_in">NSInteger</span> *)section currentID:(<span class="built_in">NSInteger</span>)currentID;</div><div class="line">- (<span class="built_in">NSInteger</span>)getNextNewsWithSection:(<span class="built_in">NSInteger</span> *)section currentID:(<span class="built_in">NSInteger</span>)currentID;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<ul>
<li>因为在详细页可以进行新闻的上下切换，所以有可能更新数据源，这样，当返回到主页时，数据源可能已经更新，这个时候主页需要重新reload 数据，否则会导致崩溃。</li>
<li><p>详细页的上下切换动画实现，直接使用UIView提供的animateWithDuration方法，上下切换时只是View的切换，由同一个控制器管理。</p>
<h2 id="3-主题日报部分："><a href="#3-主题日报部分：" class="headerlink" title="3.主题日报部分："></a>3.主题日报部分：</h2><p><img src="https://raw.githubusercontent.com/zhongwuzw/ZhihuDaily/master/images/demo4.gif" alt=""></p>
</li>
<li><p>主题日报部分基本和主页类似，在主题日报列表中进行切换时，不再重新创建Controller以及UI，而是直接reload数据。</p>
<h2 id="4-夜间部分："><a href="#4-夜间部分：" class="headerlink" title="4.夜间部分："></a>4.夜间部分：</h2><p><img src="https://raw.githubusercontent.com/zhongwuzw/ZhihuDaily/master/images/demo5.gif" alt=""></p>
</li>
<li><p>夜间模式实现：使用UIView的Category，类别中使用Objective-C的关联对象来存储模式的配置项，并且作为Observer来监听夜间模式的切换。</p>
</li>
</ul>
<h2 id="5-设置-移动网络不下载图片"><a href="#5-设置-移动网络不下载图片" class="headerlink" title="5.设置-移动网络不下载图片"></a>5.设置-移动网络不下载图片</h2><p><img src="https://raw.githubusercontent.com/zhongwuzw/ZhihuDaily/master/images/demo6.gif" alt=""></p>
<ul>
<li>实现：使用NSURLProtocol来进行图片的管理，这里需要注意的就是要解决AF、SDWebCache使用NSURLSession的问题。</li>
</ul>
<h2 id="Features-特性"><a href="#Features-特性" class="headerlink" title="Features - 特性"></a>Features - 特性</h2><ul>
<li>实现知乎日报大多数功能</li>
<li>没有广告</li>
</ul>
<h2 id="TODO-后续实现"><a href="#TODO-后续实现" class="headerlink" title="TODO - 后续实现"></a>TODO - 后续实现</h2><ul>
<li><del>网络状况切换管理</del> （已完成）</li>
</ul>
]]></content>
    </entry>
    
  
  
</search>
